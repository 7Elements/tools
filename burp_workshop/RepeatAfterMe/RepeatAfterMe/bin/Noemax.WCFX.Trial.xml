<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Noemax.WCFX.Trial</name>
    </assembly>
    <members>
        <member name="T:Noemax.BZip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses from the BZip2 format (with the file 
            header chars) to be read as any other stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified file path.
            </summary>
            <param name="filename"> 
            The path to the file containing the BZip2 compressed data. 
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>Initialize a new instance of 
            <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified stream.
            </summary>
            <param name="zStream">
            The stream to decompress.
            </param>
            <overloads>
            Initialize a new instance of 
            %BZip2InputStream Class:T:Noemax.BZip2.BZip2InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Initialize a new instance of 
            <see cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Class</see> 
            with the specified stream.
            </summary>
            <param name="zStream">
            The stream to decompress.
            </param>
            <param name="leaveOpen">
            <strong>True</strong> to leave the underlying stream open after this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the current stream.
            </summary>   
            <remarks>
            If this stream have been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is called,
            otherwise the underlying stream is also closed.
            </remarks>
            <seealso cref="T:Noemax.BZip2.BZip2InputStream">BZip2InputStream Constructor</seealso>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Reads a byte from the compressed stream.
            </summary>
            <value>
            The unsigned byte cast to an <b>Int32</b>, or -1 if at the end of the stream.
            </value>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>
            This method is <b>not supported</b>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>        
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <i>offset</i> and
            (<i>offset</i> + <i>count</i> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <i>buffer</i> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference point used to obtain the 
            new position.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <i>buffer</i> at which to begin copying bytes to the current stream. 
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>
            <b>true</b> if the stream supports reading; otherwise, <b>false</b>.
            </value>
            <remarks>
            Always returns <b>true</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>
            <b>true</b> if the stream supports seeking; otherwise, <b>false</b>.
            </value>
            <remarks>
            Always returns <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
            <b>true</b> if the stream supports writing; otherwise, <b>false</b>.
            </value>
            /// <remarks>
            Always returns <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
            <value>
            The current position within the stream.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            <strong>Always throws a NotSupportedException.</strong>
            </remarks>
        </member>
        <member name="T:Noemax.BZip2.BZip2OutputStream">
             An output stream that compresses into the BZip2 format (with the file
             header chars) into another stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             TODO:    Update to BZip2 1.0.1
             <b>NB:</b> note this class has been modified to add a leading BZ to the
             start of the BZIP2 stream to make it compatible with other PGP programs.
            <summary>
            An output stream that compresses into the BZip2 format (with the file 
            header chars) into another stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a filename and compressionLevel.
            </summary>
            <param name="filename">
            The path to the file to which the compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest compression and 9 for maximum compression.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a stream and compression level.
            </summary>
            <param name="inStream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest 
            compression and 9 for maximum compression.
            </param>
            <overloads>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see>
            </overloads>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Class</see> 
            with a stream and compression level.</summary>
            <param name="inStream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            The compression level to be applied, were 1 is for fastest compression and 9 for maximum compression.
            </param>
            <param name="leaveOpen">
            <b>true</b> to leave the underlying stream open after this stream is closed.
            </param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a single byte into the compressed stream.
            </summary>
            <param name="bv">A byte to write.</param>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Close">
            <summary>Flushes the internal buffer content and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para> <para>Before closing, 
            the %BZip2OutputStream% will also flush its buffer. Do not close the underlying stream 
            before closing this stream.</para>
            </remarks>
            <seealso cref="T:Noemax.BZip2.BZip2OutputStream">BZip2OutputStream Constructor</seealso>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Finish">
            <summary>
            Finalizes the compression and flushes the compressed data into stream.  
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flushes compressed data into the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by 
            the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte array with the 
            values between offset and (offset + count - 1) replaced by the bytes read from the current source. 
            </param> 
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference point used to obtain the new position.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking.
            </exception>
            <remarks>
            This method is <strong>not supported</strong> and always throws a <strong>NotSupportedException</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin copying bytes to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream. 
            </param>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            /// <value>
            true if the stream supports reading; otherwise, false.
            </value>
            <remarks>
            Always returns <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>
            true if the stream supports seeking; otherwise, false.
            </value>
            <remarks>
            Always returns <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>
            true if the stream supports writing; otherwise, false.
            </value>
            <remarks>
            If the stream is closed, this property returns false.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
        </member>
        <member name="P:Noemax.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <remarks>
            Always throws a NotSupportedException.
            </remarks>
            <value>
            The current position within the stream.
            </value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="T:Noemax.BZip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:Noemax.FastInfoset.FastInfosetCompression">
            <summary>
            Defines the compression algorithm to be used for compressing and decompressing data.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Deflate">
            <summary>
            DEFLATE compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.GZip">
            <summary>
            GZIP compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzma">
            <summary>
            LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.BZip2">
            <summary>
            BZip2 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf">
            <summary>
            LZF compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf3">
            <summary>
            LZF3 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.FastInfosetCompression.Lzf4">
            <summary>
            LZF4 compression algorithm.
            </summary>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to Fast
            Infoset encoded XML data.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset 
            encoded XML stream.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the Fast Infoset encoded XML
            data.
            </returns>
            <param name="input">The stream containing the Fast Infoset encoded XML data.</param>
            <overloads>
            Creates a new %XmlReader:T:System.Xml.XmlReader% instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlReader"> XmlReader</see> instance for reading the 
            Fast Infoset encoded XML file.
            </summary>
            <returns>
                An System.Xml.XmlReader object to read the Fast Infoset encoded XML data.        
            </returns>
            <param name="inputFileName">        
                The system path to the file containing the Fast Infoset encoded XML data.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader"> XmlReader</see> instance for reading the Fast Infoset encoded XML stream using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the FastInfoset encoded XML
            data.
            </returns>
            <param name="input">        
                The stream containing the FastInfoset encoded XML data.
            </param>
            <param name="settings">
            The <strong>XmlReaderSettings</strong> object used to configure the new
            <strong>XmlFastInfosetReader</strong> instance. This value can be null.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML stream.
            </summary>
            <returns>
            An <strong>XmlReader</strong> object to read the Fast Infoset encoded XML
            data.
            </returns>
            <param name="input">The stream containing the Fast Infoset encoded XML data.</param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded XML file using an
            <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="input"> The stream containing the FastInfoset encoded XML data. </param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Create(System.String,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlReader">XmlReader</see> instance for reading the Fast Infoset encoded 
            XML file using an <see cref="T:System.Xml.XmlReaderSettings">XmlReaderSettings</see> object.
            </summary>
            <returns>
                An <strong>XmlReader</strong> object to read the FastInfoset encoded XML data.        
            </returns>
            <param name="inputFileName">The path to the file with the FastInfoset encoded XML data.</param>
            <param name="settings">
                The <see cref="T:System.Xml.XmlReaderSettings"/> to configure the new
                <strong>XmlFastInfosetReader</strong> instance. This value can be
                <strong>null</strong>.
            </param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>This constructor creates an instance of
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
                which is is not associated with any stream and is intended for reusing the same
                reader for reading more than one stream.</para>
            	<para>If you use this constructor you must initialize the reader by calling
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">Init</see> before using it.</para>
            </remarks>
            <overloads>
            Initializes a new instance of the 
            %XmlFastInfosetReader:T:Noemax.FastInfoset.XmlFastInfosetReader% class.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input">
            	<para>The stream containing the Fast Infoset encoded XML data to read.</para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see> class.
            </summary>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <param name="settings">XmlReaderSettings object to configure the new XmlFastInfosetReader instance.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input">
            	<para>The stream containing the Fast Infoset encoded XML data to read.</para>
            </param>        
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <param name="settings">XmlReaderSettings object to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see> class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="settings">The XmlReaderSettings object used to configure the reader.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="settings">The XmlReaderSettings object used to configure the reader.</param>
            <param name="compression">The compression algorithm to be used for decompressing the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>        
            <overloads>
            Initializes an instance of the %XmlFastInfosetReader:T:Noemax.FastInfoset.XmlFastInfosetReader% class.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided stream as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another stream.</para>
            </remarks>
            <param name="input"><para>The stream containing the Fast Infoset encoded XML data to read.</para></param>    
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.Byte[],System.Int32,System.Int32,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided array of bytes as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another source.</para>
            </remarks>
            <param name="input"><para>The an array of bytes containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="offset"><para>The offset in the array of bytes to start reading from.</para></param>
            <param name="length"><para>The number of byte starting from the offset that contain FastInfoset encoded XML data.</para></param>
            <param name="compression">The compression algorithm to decompress the data.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Init(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <remarks>
            	<para>Initializes the reader and sets it to use the provided array of bytes as
                input.</para>
            	<para>This method allows the reuse of the <strong>XmlFastInfosetReader</strong> for
                reading from another source.</para>
            </remarks>
            <param name="input"><para>The an array of bytes containing the Fast Infoset encoded XML data to read.</para></param>
            <param name="offset"><para>The offset in the array of bytes to start reading from.</para></param>
            <param name="length"><para>The number of byte starting from the offset that contain FastInfoset encoded XML data.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Clear">
            <summary>
            Clears the internal state of the reader.
            </summary>
            <remarks>
            Clears the internal state of the reader. After a call to this method the reader
            remains in an uninitialized state. You must call the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">Init</see>
            method in order to reuse the reader for reading another stream.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.InitializeNameTable">
            <summary>
            Initializes XmlNameTable with default entries.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Close">
            <summary>
            Changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">ReadState</see>
            to <strong>Closed</strong>.
            </summary>
            <remarks>
            If
            <see cref="P:System.Xml.XmlReaderSettings.CloseInput">CloseInput</see>
            is true, the underlying stream is going to be closed as well.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="i">The index of the attribute.</param>
            <overloads>Gets the value of an attribute.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The name of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.LookupNamespace(System.String)">
            <summary><para>Resolves the namespace prefix in the current element's scope.</para></summary>
            <returns>
            The namespace URI to which the prefix maps or a null reference (<b>Nothing</b> in
            Visual Basic) if no matching prefix is found.
            </returns>
            <param name="prefix">
            The prefix whose namespace URI you want to resolve. To match the default
            namespace, pass an empty string. This string does not have to be atomized.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.Int32)">
            <summary>Moves to the attribute specified by the index.</summary>
            <overloads>Moves to the specified attribute.</overloads>
            <param name="i">The index of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.String)">
            <summary>Moves to the attribute specified by the qualified name.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The qualified name of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToAttribute(System.String,System.String)">
            <summary>Moves to the attribute specified by the local name and namespace URI.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            	<strong>true</strong> if the reader is positioned on an attribute (the reader
            moves to the element that owns the attribute); <b>false</b> if the reader is not
            positioned on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToContent">
            <summary>
            Checks whether the current node is a content (non-white space text, <strong>CDATA</strong>, <strong>Element</strong>,
            <strong>EndElement</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong>) node. If the node is 
            not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following 
            type: <strong>ProcessingInstruction</strong>, <strong>DocumentType</strong>, <strong>Comment</strong>,
            <strong>Whitespace</strong>, or <strong>SignificantWhitespace</strong>.
            </summary>
            <returns>
            	<para>The <strong>NodeType</strong> of the current node found by the method or
                <strong> XmlNodeType.None</strong> if the reader has reached the end
                of the input stream.</para>
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns>
            	<strong>true</strong> if an attribute exists (the reader moves to the first
            attribute); otherwise, <b>false</b> (the position of the reader does not
            change).
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            	<strong>true</strong> if there is a next attribute; <b>false</b> if there are no
            more attributes.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAttributeValue">
            <summary>Reads the attribute value.</summary>
            <returns>
            	<strong>true</strong> if there are nodes to return. <b>false</b> if the reader is
            not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ResetState">
            <summary>
            Resets the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">ReadState</see>
            to <strong>Initial</strong>.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">
            		<b>ResetState</b> enables you to parse multiple
                Fast Infoset documents in a single stream. When you reach the end of a Fast Infoset
                document, you can call <b>ResetState</b> to reset
                the state of the reader in preparation for the next Fast Infoset document.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadBase64">
            <summary>
            Reads a Base64 value from the current position in the element content and decodes it into an array of bytes.
            </summary>
            <returns>An array of bytes read.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the node at the current position is Fast
                Infoset binary encoded Base64 bytes, the reader returns these bytes without
                transformation.</para>
            	<para class="Page4Paragraph2Text">If the current node is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadBinHex">
            <summary>
            Reads a hexadecimal value from the current position in the element content and decodes it into an array of bytes.
            </summary>
            <returns>An array of bytes read.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the node at the current position is Fast
                Infoset binary encoded BinHex bytes, the reader returns these bytes without
                transformation.</para>
            	<para class="Page4Paragraph2Text">If the current node is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAs``1">
            <summary>
            Reads the value from the current position in the stream as the type
            specified.
            </summary>
            <returns>The value of the type T read from the stream.</returns>
            <remarks>
            If the value in the stream was encoded as a different type, the reader converts
            it to the required type. For example if the stream contains a binary encoded
            <strong>int</strong> value and a <strong>double</strong> value was requested, the
            reader will perform an int to double conversion automatically.
            </remarks>
            <typeparam name="T">The type to which the value read should be converted to.</typeparam>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsInt">
            <summary>
            Reads a single or multiple occurrences of 32-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsInt</b> method reads a single or multiple integer values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The integer
                values must have been encoded using Fast Infoset's binary encoding of integer
                values.</para>
            </remarks>
            <returns>The 32-bit integer values read.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsShort">
            <summary>
            Reads a single or multiple occurrences of 16-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsShort</b> method reads a single or multiple short integer values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The short
                integer values must have been encoded using Fast Infoset's binary encoding of short
                integer values.</para>
            </remarks>
            <returns>The 16-bit integer values read.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsLong">
            <summary>
            Reads a single or multiple occurrences of 64-bit integer values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsLong</b> method reads a single or multiple long integer values from the
                current position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The long
                integer values must have been encoded using Fast Infoset's binary encoding of long
                integer values.</para>
            </remarks>
            <returns><b>The 64-bit integer values read.</b></returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsFloat">
            <summary>
            Reads a single or multiple occurrences of single-precision floating-point values
            from the current position.
            </summary>
            <returns>
            	<b>The single-precision floating-point values read.</b>
            </returns>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsFloat</b> method reads a single or multiple single values from the current 
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The single
                values must have been encoded using Fast Infoset's binary encoding of single
                values.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsDouble">
            <summary>
            Reads a single or multiple occurrences of double-precision floating-point values
            from the current position.
            </summary>
            <remarks>
            	<para>The <strong>ReadAsDouble</strong> method reads a single or multiple double
                values from the current position in the content.</para>
            	<para>The double values must have been encoded using Fast Infoset's binary encoding
                of double values.</para>
            </remarks>
            <returns>
            	The double-precision floating-point values read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadAsBoolean">
            <summary>
            Reads a single or multiple occurrences of boolean values from the current
            position.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <b>ReadAsBoolean</b> method reads a single or multiple boolean values from the current
                position in the content.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The boolean
                values must have been encoded using Fast Infoset's binary encoding of boolean
                values.</para>
            </remarks>
            <returns>
            	The boolean values read.
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsInt">
            <summary>
            Reads the current element and returns the content as a 32-bit signed
            integer.
            </summary>
            <returns>The element content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsShort">
            <summary>
            Reads the current element and returns the content as a 16-bit signed
            integer.
            </summary>
            <returns><para>The element content as a 16-bit signed integer</para></returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 16-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 16-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsLong">
            <summary>
            Reads the current element and returns the content as a 64-bit signed
            integer.
            </summary>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
            <returns>The element content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDouble">
            <summary>
            Reads the current element and returns the content as a double-precision
            floating-point number.
            </summary>
            <returns>The element content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsFloat">
            <summary>
            Reads the current element and returns the content as a single-precision
            floating-point number.
            </summary>
            <returns>The element content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBoolean">
            <summary>Reads the current element and returns the content as a boolean value.</summary>
            <returns>The element content as a boolean value.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDateTime">
            <summary>
            Reads the node content at the current position as a DateTime value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsDecimal">
            <summary>
            Reads the node content at the current position as a decimal value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or BinHex encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the content is binary encoded BinHex bytes,
                the reader returns the bytes read. If the content is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned by this method
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the content is binary encoded Base64 bytes,
                the reader returns the bytes read. If the content is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            	<para>The buffer into which to copy the resulting bytes. This value cannot be a
                null reference (<b>Nothing</b> in Visual Basic).</para>
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned by this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBase64">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <overloads>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsString">
            <summary>Reads the text content at the current position as a string.</summary>
            <returns>
            The node content as <see cref="T:System.String">String</see> object.
            </returns>
            <remarks>
            Implements <see cref="T:System.String">XmlReader.ReadContentAsString</see>.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDecimal">
            <summary>
            Reads the text content at the current position as a decimal value<font color="black">.</font>
            </summary>
            <returns><para>The text content as a decimal <font color="black">value.</font></para></returns>
            <remarks><para></para></remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDateTime">
            <summary>
            Reads the text content at the current position as a DateTime <font color="black">object.</font>
            </summary>
            <returns><para>The text content as a DateTime <font color="black">object.</font></para></returns>
            <remarks>
            Implements <see cref="M:System.Xml.XmlReader.ReadContentAsDateTime">XmlReader.ReadContentAsDateTime</see>.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsDouble">
            <summary>
            Reads the content at the current position as a double-precision floating-point
            number.
            </summary>
            <returns>The content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsBoolean">
            <summary>Reads the content at the current position as a boolean value.</summary>
            <returns>The content as a boolean value.</returns>
            <remarks>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsFloat">
            <summary>
            Reads the content at the current position as a single-precision floating point
            number.
            </summary>
            <returns>The content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsInt">
            <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
            <returns>The content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsLong">
            <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
            <returns>The content as a 64-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadContentAsShort">
            <summary>Reads the text content at the current position as a 16-bit signed integer.</summary>
            <returns>The content as a 16-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 16-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 16-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded element content and returns the decoded
            bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the content of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If the content is binary encoded Base64 bytes,
                the reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If the content is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
            <overloas>
            Reads the binary or Base64 encoded element content and returns the decoded bytes.
            </overloas>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or BinHex encoded element content and returns the decoded
            bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the content of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If the content is binary encoded BinHex bytes,
                the reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If the content is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            	<para>The maximum number of bytes to copy into the buffer. The actual number of
                bytes copied is returned from this method.</para>
            </param>
            <overloads>
            Reads the binary or BinHex encoded element content and returns the decoded bytes.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBinHex(System.Int32)">
            <summary>
            Reads binary or <strong>BinHex</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <returns>An array with bytes.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded BinHex bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs BinHex
                decoding and returns decoded bytes.</para>
            </remarks>
            <param name="maxArrayLength">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsBase64(System.Int32)">
            <summary>
            Reads binary or <strong>Base64</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded Base64 bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs Base64
                decoding and returns decoded bytes.</para>
            </remarks>
            <returns>An array with bytes.</returns>
            <param name="maxArrayLength">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadElementContentAsString">
            <summary>
            Reads the current element and returns the contents as a <font color="black">
            String object.</font>
            </summary>
            <returns>
            	<para>The element content as a <font color="black">String</font>.</para>
            </returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadString">
            <summary>Reads the contents of the current node into a string.</summary>
            <returns><para>A string that contains the contents of the current node.</para></returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement">
            <summary>Tests if the current content node is a start tag.</summary>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <overloads>Tests if the current content node is a start element.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement(System.String,System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="localname">
            The string to match against the <c>LocalName</c> property of the element
            found.
            </param>
            <param name="ns">
            The string to match against the <c>NamespaceURI</c> property of the element found.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.IsStartElement(System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="name"> The string to match against the <c>Name</c> property of the element found.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement(System.String,System.String)">
            <summary>
            Checks that the current node is the element with specified local name and namespace and advances the reader to the next node.
            </summary>
            <param name="localname">The local name of the specified element</param>
            <param name="ns">The namespace of specified element</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement(System.String)">
            <summary>
            Checks that the current node is the element with specified qualified name and advances the reader to the next node.
            </summary>
            <param name="name">The name of specified element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadStartElement">
            <summary>
            Checks that the current node is an element and advances the reader to the next node.
            </summary>
            <overloads>
            Checks that the current node is an element and advances the reader to the next node.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ReadEndElement">
            <summary>
            Checks that the current content node is an end tag and advances the reader to the
            next node.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            	<strong>true</strong> if the next node was read successfully; <b>false</b> if
            there are no more nodes to read.
            </returns>
            <remarks>
            	<para>When an <b>XmlFastInfosetReader</b> is first created and initialized, there
                is no information available. You must call <b>Read</b> to read the first
                node.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.ResolveEntity">
            <summary>Throws a <strong>NotSupportedException</strong>.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Settings">
            <summary>
            Gets the XmlReaderSettings object used to create this XmlFastInfosetReader instance.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.CanReadBinaryContent">
            <summary>
            Gets a value indicating whether this reader can parse binary content.
            Always returns <strong>true</strong>.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.CanResolveEntity">
            <summary>
            Gets a value indicating whether this reader can parse and resolve entities.
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Data">
            <summary>
            Gets the content of the current node decoded into the same data type it was written as.
            </summary>
            <remarks>
            If reader positioned on the binary encoded content <strong>Data</strong> contains
            an array containing the values of Fast Infoset supported data type, otherwise
            text.
            </remarks>    
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.HasValue">
            <summary>
            Gets a value indicating whether the current node can have a Value.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default 
            value defined in the DTD or schema.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.MaxNodeContentLength">
            <summary>
            Gets and sets the maximum length of the node content in bytes.        
            </summary>
            <remarks>
            	<para>This quota sets a limit on the node content length in bytes. This property
                applies to reading text and binary data content as well as element names, namespace
                URIs etc.</para>
            	<para>The default value assigned to this property during initialization of
                XmlFastInfosetReader is equal to Int32.MaxValue.</para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.MaxDepth">
            <summary>
            Gets and sets the maximum nested node depth.
            </summary>
            <remarks>
            	<para>The default value assigned to this property during initialization of
                XmlFastInfosetReader is equal to Int32.MaxValue.</para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable">XmlNameTable</see> associated with this reader.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute specified by the index. In C#, this property is
            the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
            <overloads>
            Gets the value of the attribute. In C#, this property is the indexer for the
            XmlFastInfosetReader class.
            </overloads>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute specified by the local name and namespace. In C#,
            this property is the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Item(System.String)">
            <summary>
            Gets the value of the attribute specified by the qualified name. In C#, this
            property is the indexer for the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>
            class.
            </summary>
            <value>The value of the specified attribute.</value>
            <value>The value of the specified attribute.</value>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.VocabularyProvider">
            <summary>
            Gets and sets the %IVocabularyProvider% for resolving external vocabulary URI, when it is encountered within a document.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">
            <summary>
            Sets the vocabulary to be used when reading the Fast Infoset document.
            </summary>        
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._eventType">
            <summary> Current event</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._qNameStack">
            <summary> Stack of qualified names and namespaces</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._currentNamespaceAIIsStart">
            <summary> Namespaces associated with START_ELEMENT or END_ELEMENT</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._qualifiedName">
            <summary> Qualified name associated with START_ELEMENT or END_ELEMENT.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._attributes">
            <summary> List of attributes</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._characters">
            <summary> Characters associated with event.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser._piTarget">
            <summary> State for processing instruction</summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.unsafeIsTerminatorNext">
            <summary>
            Checks if the next event in FI stream is single or double terminator by picking next byte from the buffer.             
            </summary>
            <returns>
            Returns true if next FI event in the stream is single or double terminator, otherwise false.
            </returns>
            <remarks>
            Calling this method is not always safe as it can cause data in the octetBuffer to be overwriten next chunk 
            of octets. This method must not be called prior data in octetBuffer is already processed.
            </remarks>  
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.IsEmptyElement">
            <summary>
            Checks if current element is empty by picking next byte from the buffer.             
            </summary>
            <returns>
            Returns true if current FI event is START ELEMET and next event in the stream is single or double terminator, otherwise false.
            </returns>
            <remarks>
            Calling this method is not always safe as it can cause data in the octetBuffer to be overwriten next chunk 
            of octets. This method must not be called prior data in octetBuffer is already processed.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetReader.StAXDocumentParser.isWhiteSpace">
            <summary>  Returns true if the cursor points to a character data event that consists of all whitespace
            Application calling this method needs to cache the value and avoid calling this method again
            for the same event.
            </summary>
            <returns> true if the cursor points to all whitespace, false otherwise
            </returns>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of
            generating streams or files containing Fast Infoset encoded XML data.
            </summary>    
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded 
            XML into the specified stream.
            </summary>
            <returns>An <strong>XmlWriter</strong> object.</returns>
            <param name="output">        
                 The stream to which you want to write. The System.Xml.XmlWriter writes FastInfoset 
             encoded XML and appends it to the specified stream.
             </param>
             <overloads>
             Creates a new %XmlWriter:T:System.Xml.XmlWriter% instance 
             for writing Fast Infoset encoded XML into the specified stream.
             </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlWriter">XmlWriter</see>
            instance for writing Fast Infoset encoded XML into the specified file.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">        
                 The file to which you want to write. The System.Xml.XmlWriter creates a file
                 at the specified path and writes to it FastInfoset encoded XML data. The outputFileName
                 must be a file system path.
             </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
             </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded 
            XML into the specified stream using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">
            The file to which you want to write <strong>XmlWriter</strong> creates a file at
            the specified path. The <em>outputFileName</em> must be a file system path.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>           
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlWriter">XmlWriter</see>
            instance for writing Fast Infoset encoded XML into the specified file.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">        
                 The file to which you want to write. The System.Xml.XmlWriter creates a file
                 at the specified path and writes to it FastInfoset encoded XML data. The outputFileName
                 must be a file system path.
             </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast 
            Infoset encoded XML into the specified stream
            using an
            <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
             </returns>
            <param name="output">
            The stream to which you want to write. The <strong>XmlWriter</strong> writes Fast
            Infoset encoded XML and appends it to the specified stream.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Create(System.String,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new
            <see cref="T:System.Xml.XmlWriter">XmlWriter</see> instance for writing Fast Infoset encoded XML into the specified stream
            using an <see cref="T:System.Xml.XmlWriterSettings">XmlWriterSettings</see> object.
            </summary>
            <returns>
                 An System.Xml.XmlWriter object.
            </returns>
            <param name="outputFileName">
            The file to which you want to write <strong>XmlWriter</strong> creates a file at
            the specified path. The <em>outputFileName</em> must be a file system path.
            </param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param> 
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> 
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">XmlWriterSettings object containing writer configuratoin.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="closeOutput">
            If set to <strong>true</strong> writer will close the output stream when
            closed.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">
            The <strong>XmlWriterSettings</strong> object used to configure the new
            <strong>XmlWriter</strong> instance. If this is <strong>null</strong>
            (<strong>Northing</strong> in Visual Basic), a <strong>XmlWriterSettings</strong> with
            default settings is used.
            </param> 
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <param name="output">The stream to which you want to write.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="closeOutput">
            If set to <strong>true</strong> writer will close the output stream when
            closed.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class.
            </summary>
            <remarks>
            	<para>This constructor creates an instance of
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                which is is not associated to any stream and is intended for reusing the same
                writer for writing into more than one stream.</para>
            	<para>If you use this constructor you must initialize the reader by calling
                <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">Init</see>
                before using it.</para>
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <overloads>
            Initializes an instance of the 
            %XmlFastInfosetWriter:T:Noemax.FastInfoset.XmlFastInfosetWriter% 
            class preparing to write into the specified stream.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings">
            XmlWriterSettings to be applied to writer.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>  
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Initializes an instance of the
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            class preparing to write into the specified stream.
            </summary>
            <remarks>
            	<para>Initializes the writer and sets it to use the provided stream as
                output.</para>
            	<para>This method allows the reuse the
                <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
                for writing to another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
            <param name="settings"> XmlWriterSettings to be to configure the writer. </param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Clear">
            <summary>
            Clears the internal state of
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>.
            </summary>
            <remarks>
            Clears the internal state of the writer. After a call to this method the writer
            remains in an uninitialized state. You must call
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.Init(System.IO.Stream)">Init</see>
            in order to reuse the writer for writing into another stream.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Close">
            <summary>
            Changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">WriteState</see>
            to <strong>Closed</strong>.
            </summary>
            <remarks>
            If
            <see cref="P:System.Xml.XmlWriterSettings.CloseOutput">CloseOutput</see>
            is set to <strong>true</strong>, the underlying stream will also be closed.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.Flush">
            <summary>
            Flushes whatever is in the buffer into the underlying stream and flushes the
            underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.LookupPrefix(System.String)">
            <summary>
            Returns the closest prefix defined in the current namespace scope for the namespace URI
            </summary>
            <returns>
            The matching prefix or a null reference (<b>Nothing</b> in Visual Basic) if no
            matching namespace URI is found in the current scope.
            </returns>
            <param name="ns"><para>The namespace URI whose prefix you want to find.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of Base64 values
            and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of hexadecimal
            values and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count"><para>The number of bytes to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int32)">
            <summary>
            Encodes a 32-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <overloads>Writes an element containing a single value.</overloads>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int64)">
            <summary>
            Encodes a 64-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Int16)">
            <summary>
            Encodes a 16-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Double)">
            <summary>
            Encodes a double-precision floating-point number using Fast Infoset's binary
            encoding and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Single)">
            <summary>
            Encodes a single-precision floating-point number using Fast Infoset's binary
            encoding and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.String,System.Boolean)">
            <summary>
            Encodes a boolean value using Fast Infoset's binary encoding and writes the
            result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int32)">
            <summary>
            Encodes a 32-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <overloads>Writes an element containing a single value.</overloads>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int64)">
            <summary>
            Encodes a 64-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Int16)">
            <summary>
            Encodes a 16-bit signed integer using Fast Infoset's binary encoding and writes
            the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Double)">
            <summary>
            Encodes a double-precision floating-pointing using Fast Infoset's binary encoding
            and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Single)">
            <summary>
            Encodes a single-precision floating-pointing using Fast Infoset's binary encoding
            and writes the result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteElementData(System.String,System.Boolean)">
            <summary>
            Encodes a boolean value using Fast Infoset's binary encoding and writes the
            result as a complete element content.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Object)">
            <summary><para>Writes the value.</para></summary>
            <remarks>
            <para>This method takes the common language runtime (CLR) object and converts the
            input value to the desired output type using the FastInfoset encoding rules. If the
            type cannot not be represented as a binary encoded value it's serialized as a
            string according to the XML Schema definition language (XSD) data type conversion
            rules.</para>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            <c>WriteValue(Object)</c> method using an array of values as parameter.</para>
            </remarks>
            <param name="value">The object representing the value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int32[])">
            <summary>
            	<para>Encodes a single or multiple 32-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <overloads>Writes a single or multiple simple-typed values.</overloads>
            <param name="value">The array containing a single or multiple 32-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int64[])">
            <summary>
            	<para>Encodes a single or multiple 64-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <param name="value">The array containing a single or multiple 64-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int16[])">
            <summary>
            	<para>Encodes a single or multiple 16-bit signed integers using Fast Infoset's
                binary encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <param name="value">The array containing a single or multiple 16-bit signed integers.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Double[])">
            <summary>
            	<para>Encodes a single or multiple double-precision floating-point numbers using
                Fast Infoset's binary encoding and writes the result at the current position in the
                element content.</para>
            </summary>
            <param name="value">
            The array containing a single or multiple double-precision floating-point
            numbers.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Single[])">
            <summary>
            	<para>Encodes a single or multiple single-precision floating-point numbers using
                Fast Infoset's binary encoding and writes the result at the current position in the
                element content.</para>
            </summary>
            <param name="value">
            The array containing a single or multiple single-precision floating-point
            numbers.
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Boolean[])">
            <summary>
            	<para>Encodes a single or multiple boolean values using Fast Infoset's binary
                encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <remarks>
            	<para>This method encodes a single or multiple boolean values using Fast Infoset's
                binary encoding and writes the result at the current position in the
                content.</para>
            </remarks>        
            <param name="value">The array containing a single or multiple boolean values.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Decimal[])">
            <summary>
            	<para>Encodes a single or multiple decimal values using Fast Infoset's binary
                encoding and writes the result at the current position in the element
                content.</para>
            </summary>
            <remarks>
            	<para>This method encodes a single or multiple decimal values using Fast Infoset's
                binary encoding and writes the result at the current position in the
                content.</para>
            </remarks>        
            <param name="value">The array containing a single or multiple decimal values.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a boolean value.  
            </summary>  
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The boolean value to write.</para>
            </param>      
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Double)">
            <summary>
            Writes a double-precision floating point value. 
            </summary>    
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The double-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Single)">
            <summary>
            Writes a single-precision floating point value.
            </summary>
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The single-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int64)">
            <summary>
            Writes a 64-bit signed integer value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 64-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>        
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 32-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Int16)">
            <summary>
            Writes a 16-bit signed integer value. 
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 16-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteGuid(System.Guid)">
            <summary>
            Writes GUID value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">Guid value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.TimeSpan)">
            <summary>
            Write TimeSpan value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks> 
            <param name="value">TimeSpan value to write.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.Decimal)">
            <summary>
            Write Decimal value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">Decimal value to writer.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteValue(System.DateTime)">
            <summary>
            Write DateTime value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">DateTime value to writer.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteCData(System.String)">
            <summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            </remarks>
            <param name="text"><para>The text to place inside the CDATA block.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteCharEntity(System.Char)">
            <summary>
            Forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch"><para>The Unicode character for which to generate a character entity.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes text one buffer at a time.
            </summary>
            <param name="buffer">The character array containing the text to write.</param>
            <param name="index"><para>The position in the buffer indicating the start of the text to write.</para></param>
            <param name="count"><para>The number of characters to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment containing the specified text.
            </summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            	<para>If
                <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">
                RemoveComments</see> is set to <strong>true</strong>, the writer ignores all calls to
                this method.</para>
            </remarks>
            <param name="text"><para>The text to place inside the comment.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing DOCTYPE is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">
            If non-null it also writes PUBLIC "pubid" "sysid" where
            <b>pubid</b> and <b>sysid</b> are
            replaced with the value of the given arguments.
            </param>
            <param name="sysid">
            If <b>pubid</b> is a null reference (<b>Nothing</b> in
            Visual Basic) and <b>sysid</b> is non-null it writes SYSTEM
            "sysid" where <b>sysid</b> is replaced with the value of this
            argument.
            </param>
            <param name="subset">
            	<para>If non-null it writes [subset] where subset is replaced with the value of
                this argument.</para>
            </param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndAttribute">
            <summary>
            Closes the previous
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartAttribute(System.String,System.String,System.String)">WriteStartAttribute</see> call.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndDocument">
            <summary>
            Closes any open elements or attributes and changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">WriteState</see> to <strong>Start</strong>.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteEntityRef(System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing of entity references is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name"><para>The name of the entity reference.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteFullEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteName(System.String)">
            <summary>
            Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation.
            </summary>
            <param name="name"><para>The name to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteNmToken(System.String)">
            <summary>
            Writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation.
            </summary>
            <param name="name"><para>The name to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>Writes out a processing instruction.</summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text"><para>The text to include in the processing instruction.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.
            </summary>
            <remarks>
            	<para>If <b>ns</b> maps to the current default namespace,
                no prefix is generated.</para>
            	<para>This method generates a prefix if <b>ns</b> is not
                found.</para>
            </remarks>
            <param name="localName">The local name to write.</param>
            <param name="ns"><para>The namespace URI for the name.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary><para>This method is not supported.</para></summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">WriteString</see>.
            </remarks>
            <param name="buffer">The character array containing the text to write.</param>
            <param name="index">The position within the buffer indicating the start of the text to write.</param>
            <param name="count"><para>The number of characters to write.</para></param>
            <overloads>
            This method is not supported.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteXmlnsAttribute(System.String,System.String)">
            <summary>
            Writes a namespace declaration attribute.
            </summary>
            <param name="prefix">The prefix that is bound to the given namespace.</param>
            <param name="namespaceUri">The namespace to which the prefix is bound.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start of an attribute.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="ns"><para>The namespace URI for the attribute.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteRaw(System.String)">
            <summary>This method is not supported.</summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">WriteString</see>.
            </remarks>
            <param name="data"><para>The string containing the text to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
            <overloads>
            Writes the XML declaration with the version "1.0".
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
            <remarks>
            Since
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            does not preserve the original XML declaration, <strong>standalone</strong> is
            ignored.
            </remarks>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Writes the specified start tag.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            </summary>
            <param name="text"><para>The text to write.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>Writes a Unicode surrogate char pair.</summary>
            <param name="lowChar"><para>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</para></param>
            <param name="highChar"><para>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</para></param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <remarks>
            	<strong>XmlFastInfosetWriter</strong> does not preserve non-significant white
            space unless it's written within the scope of the element with the xml:space attribute
            set to "true" (xml:space="true").
            </remarks>
            <param name="ws"><para>The string of white space characters.</para></param>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.AttributeStringsIndexed">
            <summary>
            Returns the number of the attribute value strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.ContentStringsIndexed">
            <summary>
            Returns the number of the element content strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.OtherStringsIndexed">
            <summary>
            Returns the number of the comment and Processing Instruction value strings indexed in FastInfoset vocabulary.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.WriteState">
            <summary>Gets the state of the writer.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Settings">
            <summary>
            Gets the XmlWriterSettings object used to create this XmlWriter instance.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.XmlSpace">
            <summary>
            Gets an XmlSpace representing the current xml:space scope.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Vocabulary">
            <summary>
            Sets and gets the vocabulary to be use when writing the Fast Infoset document.
            </summary>        
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the
            Fast Infoset stream by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.IgnoreComments">
            <summary>
            Gets and sets whether this writer should ignore calls to the
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteComment(System.String)">WriteComment</see>
            method.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.IgnoreProcessingInstructions">
            <summary>
            Gets and sets whether this writer should ignore calls to the
            <see cref="M:Noemax.FastInfoset.XmlFastInfosetWriter.WriteProcessingInstruction(System.String,System.String)">WriteProcessingInstruction</see>
            method.
            </summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MinVocabularyStringLength">
            <summary>
            Gets and sets the minimum number of characters that a string value must contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The minimum string length specifies the minimum number of characters that a string value must contain in order to be added to
            the vocabulary. 
            </para>
            <para>
            Default value of this property is 0.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum number of characters that a string value may contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum string length specifies the maximum number of characters that a string value may contain in order to be added to
            the vocabulary. Longer values are not added to the vocabulary. A higher limit might result in higher compactness but might also 
            result in higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that may be added to the vocabulary. 
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum number of strings specifies up to how many strings may be added to the vocabulary. When this limit is reached, no 
            more values are added to the vocabulary. A higher limit might result in higher compactness but might also result in 
            higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriter.Profile">
            <summary>
            	<see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see>
                that defines the way how primitive data-type are going to be serialized.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.CHARACTER_CONTENT_CHUNK_SIZE_CONSTRAINT">
            The default value for the limit on the size of character content chunks
            that will be indexed.
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.UTF_8">
            The character encoding scheme string for UTF-8
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetWriter.Encoder.UTF_16BE">
            The character encoding scheme string for UTF-16BE
        </member>
        <member name="T:Noemax.FastInfoset.EncodingAlgorithmIndexes">
            <summary> The indexes of built-in encoding algorithms.	
            <p>The indexes of the built-in encoding algorithms are specified
            in ITU-T Rec. X.891 | ISO/IEC 24824-1 (Fast Infoset), clause
            10. The indexes start from 0 instead of 1 as specified.</p>	
            </summary>	
        </member>
        <member name="M:Noemax.FastInfoset.Notation.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of Notation </summary>
        </member>
        <member name="T:Noemax.FastInfoset.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>	
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>	
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a string into a specified array of chars
            </summary>
            <param name="sourceString">The string to get the chars from</param>
            <param name="sourceStart">Position of the string to start getting the chars</param>
            <param name="sourceEnd">Position of the string to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.PutElement(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Adds a new key-and-value pair into the hash table
            </summary>
            <param name="collection">The collection to work with</param>
            <param name="key">Key used to obtain the value</param>
            <param name="newValue">Value asociated with the key</param>
            <returns>The old element associated with the key</returns>
        </member>
        <member name="T:Noemax.FastInfoset.SupportClass.ArraysSupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SupportClass.ArraysSupport.IsArrayEqual(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array whith the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="M:Noemax.FastInfoset.UnparsedEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of UnparsedEntityDeclaration </summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.DEFAULT_INITIAL_CAPACITY">
            <summary> The default initial capacity - MUST be a power of two.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.MAXIMUM_CAPACITY">
            <summary> The maximum capacity, used if a higher value is implicitly specified
            by either of the constructors with arguments.
            MUST be a power of two.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap.DEFAULT_LOAD_FACTOR">
            <summary> The load factor used when none specified in constructor.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._size">
            <summary> The number of key-value mappings contained in this identity hash map.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._threshold">
            <summary> The next size value at which to resize (capacity * load factor).</summary>
        </member>
        <member name="F:Noemax.FastInfoset.KeyIntMap._loadFactor">
            <summary> The load factor for the hash table.</summary>
        </member>
        <member name="M:Noemax.FastInfoset.Util.isEmptyString(System.String)">
            <summary> a string is empty if it's null or contains nothing</summary>
            <param name="s">The character to check.
            </param>
        </member>
        <member name="T:Noemax.FastInfoset.XMLChar">
            <summary> This class defines the basic XML character properties. Add more methods as needed.
            Refer to XMLChar.java in xerces.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XMLChar.isSpace(System.Int32)">
            <summary> Returns true if the specified character is a space character
            as defined by production [3] in the XML 1.0 specification.
            </summary>
            <param name="c">The character to check.
            </param>
        </member>
        <member name="T:Noemax.FastInfoset.IVocabularyProvider">
            <summary>
            Defines the interface for resolving URI references to Fast Infoset vocabularies.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.IVocabularyProvider.ProvideVocabulary(System.String,Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Resolves the vocabulary URI and, if found, calls the 
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">Vocabulary</see> method of the specified 
            reader instance.
            </summary>
            <param name="uri">The URI to resolve.</param>
            <param name="reader">The reader to which vocabulary will be provided.</param>
            <remarks>The XmlFastInfosetReader calls this method when an external vocabulary URI is encountered within a document. 
            The implementation of the IVocabularyProvider must resolve the vocabulary URI and, if found, call the 
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.Vocabulary">Vocabulary</see> method of the specified reader instance.
            </remarks> 
        </member>
        <member name="T:Noemax.FastInfoset.ReaderVocabulary">
            <summary>
            Provides a Fast Infoset vocabulary for use by %Noemax.FastInfoset.XmlFastInfosetReader%.
            </summary>
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the Fast Infoset stream
            by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="T:Noemax.FastInfoset.Vocabulary">
            <summary>
            Provides the base implementation for Fast Infoset vocabularies.
            </summary>
            <remarks>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values added 
            to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.    
            </remarks>
        </member>
        <member name="F:Noemax.FastInfoset.Vocabulary._hasInitialReadOnlyVocabulary">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Noemax.FastInfoset.Vocabulary._referencedVocabularyURI">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.Vocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.HasInitialVocabulary">
            <summary>
            Specifies whether this vocabulary uses initial read-only vocabulary.
            </summary>
            <returns>true if this vocabulary uses initial read-only vocabulary; false otherwise.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.HasExternalVocabulary">
            <summary>
            Specifies whether this vocabulary is linked to an external vocabulary.
            </summary>
            <returns>true if this vocabulary is linked to an external vocabulary, false otherwise.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.Vocabulary.ExternalVocabularyURI">
            <summary>
            Specifies the URI to an external vocabulary.
            </summary>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.#ctor">
            <summary>Initializes a new instance of %ReaderVocabulary%.</summary>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.#ctor(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Initializes a new instance of %ReaderVocabulary% by coping tables from the specified %WriterVocabulary%.
            </summary>
            <param name="vocabulary">The writer vocabulary from which to copy tables from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.SetReadOnlyVocabulary(Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Specifies and external vocabulary to be used as read-only vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary to use as read-only vocabulary.</param>        
            <remarks>
            The read-only vocabulary is used as a predefined reference vocabulary for resolving strings and indexes. The read-only 
            vocabulary never gets updated with more strings. Strings that are neither in the read-only vocabulary nor the current 
            vocabulary are added to the current vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.SetExternalVocabulary(System.String,Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Sets the read-only referenced vocabulary for this vocabulary.
            </summary>
            <param name="referencedVocabularyURI">The URI of external referenced vocabulary.</param>
            <param name="referencedVocabulary">The external referenced vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Clear">
            <summary>
            Clears vocabulary tables.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromFi(Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified reader.
            </summary>
            <param name="reader">The reader to read the Fast Infoset document from.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromFi(System.String)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified file.
            </summary>
            <param name="filename">The file to read the Fast Infoset document from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromXml(System.Xml.XmlReader,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML reader.
            </summary>
            <param name="reader">The XML reader to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.LoadFromXml(System.String,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML file.
            </summary>
            <param name="filename">The XML file to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.String)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.IO.Stream)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Save(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.String)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.IO.Stream)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.ReaderVocabulary.Load(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="T:Noemax.FastInfoset.SchemaVocabulary">
            <summary>
            Provides methods and properties for generating a Fast Infoset vocabulary from an XSD schema.
            </summary>
            <remark>
            Values are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            </remark>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.#ctor">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.FastInfoset.SchemaVocabulary">SchemaVocabulary</see> class.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="name">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="name">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromXmlSerialized(System.Object)">
            <summary>
            Generates a new %SchemaVocabulary% from the schema inferred from XML serialized object. 
            </summary>        
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromSchemaSet(System.String)">
            <summary>
            Generates a new %SchemaVocabulary% from the XSD schema set. 
            </summary>
            <param name="path">The path to the schema to generate vocabulary from.</param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.FromSchemaSet(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Generates a new %SchemaVocabulary% from the XSD schema set. 
            </summary>
            <param name="schemaSet">The %XmlSchemaSet% to generate vocabulary from.</param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateWriterVocabulary">
            <summary>
            Creates a new %WriterVocabulary% from this %SchemaVocabulary% instance.
            </summary>
            <returns>The generated vocabulary</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateReaderVocabulary">
            <summary>
            Creates a new %ReadVocabulary% from this SchemaVocabulary instance.
            </summary>
            <returns>The generated vocabulary.</returns>
            <overloads>
            Creates a new %ReadVocabulary% from this SchemaVocabulary instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateWriterVocabulary(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Creates a new %WriterVocabulary% from the specified XSD schema set.
            </summary>
            <param name="schemaSet">The schema set to be used to generate the vocabulary.</param>
            <returns>The generated vocabulary.</returns>
            <overloads>
            Creates a new %WriterVocabulary% from this SchemaVocabulary instance.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CreateReaderVocabulary(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Creates a new ReaderVocabulary from the specified XSD schema set.
            </summary>
            <param name="schemaSet"></param>
            <returns>The generated vocabulary.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.SchemaVocabulary.CopyTo(Noemax.FastInfoset.Vocabulary)">
            <summary>
            Copies all the tables of the current vocabulary into another %Noemax.FastInfoset.Vocabulary%.
            </summary>
            <param name="vocabulary">The vocabulary where to copy all entries too.</param>
        </member>
        <member name="T:Noemax.FastInfoset.WriterVocabulary">
            <summary>
            Provides a Fast Infoset vocabulary for use by %Noemax.FastInfoset.XmlFastInfosetWriter%.
            </summary>
            <remarks>
            The vocabulary provides mappings of strings to integer indices which are used to improve the compactness of the Fast Infoset stream
            by replacing strings contained in it with their index in the vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.#ctor">
            <summary>
            Initializes a new instance of %Noemax.FastInfoset.WriterVocabulary%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.#ctor(Noemax.FastInfoset.ReaderVocabulary)">
            <summary>
            Initializes a new instance of %Noemax.FastInfoset.WriterVocabulary% by copping tables of the specified %ReaderVocabulary%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetReadOnlyVocabulary(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets the read-only vocabulary for this vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary to use.</param>
            <remarks>
            The read-only vocabulary is used as a predefined reference vocabulary for resolving strings and indexes. The read-only 
            vocabulary never gets updated with more strings. Strings that are neither in the read-only vocabulary nor the current 
            vocabulary are added to the current vocabulary.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetInitialReadOnlyVocabulary(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets an initial read-only vocabulary for this vocabulary.
            </summary>
            <param name="initialVocabulary">The initial vocabulary to use.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.SetExternalVocabulary(System.String,Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets an external read-only vocabulary for this vocabulary.
            </summary>
            <param name="externalVocabularyURI">
            The URI to  identify the external vocabulary in the document.
            </param>
            <param name="externalVocabulary">The external vocabulary to use.</param>        
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddAttributeName(System.String,System.String,System.String)">
            <summary>
            Adds the attribute qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an attribute namespace.</param>
            <param name="localName">The attribute local name.</param>
            <param name="namespaceUri">The namespace URI of an attribute.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddElementName(System.String,System.String,System.String)">
            <summary>
            Adds the element qualified name to the vocabulary.
            </summary>
            <param name="prefix">The prefix of an element namespace.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceUri">The namespace URI of the element qualified name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddNamespace(System.String)">
            <summary>
            Adds the namespace URI to the vocabulary.
            </summary>        
            <param name="namespaceUri">The namespace URI.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddPrefix(System.String)">
            <summary>
            Adds the prefix to the vocabulary.
            </summary>
            <param name="prefix">The prefix string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddLocalName(System.String)">
            <summary>
            Adds the local name to the vocabulary.
            </summary>
            <param name="name">The local name.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddContentString(System.String)">
            <summary>
            Adds the content string to the vocabulary.
            </summary>
            <param name="text">The content string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.AddAttributeString(System.String)">
            <summary>
            Adds the attribute value string.
            </summary>
            <param name="text">The attribute value string.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Clear">
            <summary>
            Clears the vocabulary.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromXml(System.Xml.XmlReader,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML reader.
            </summary>
            <param name="reader">The XML reader to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>                
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromXml(System.String,System.Int32,System.Int32)">
            <summary>
            Populates the vocabulary by serializing the document from the specified XML file.
            </summary>
            <param name="filename">The XML file to read the document from.</param>
            <param name="maxVocabularyStringLength">The %MaxVocabularyStringLength:XmlFastInfosetWriter.MaxVocabularyStringLength% 
                setting to use when serializing to document into the vocabulary.</param>
            <param name="maxVocabularyStringIndex">The %MaxVocabularyStringIndex:XmlFastInfosetWriter.MaxVocabularyStringIndex% 
                setting to use when serializing to document into the vocabulary.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromFi(Noemax.FastInfoset.XmlFastInfosetReader)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified reader.
            </summary>
            <param name="reader">The reader to read the Fast Infoset document from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.LoadFromFi(System.String)">
            <summary>
            Populates the vocabulary by reading the Fast Infoset document from the specified file.
            </summary>
            <param name="filename">The file to read the Fast Infoset document from.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(Noemax.FastInfoset.XmlFastInfosetWriter)">
            <summary>
            Saves the vocabulary by writing it into the specified %XmlFastInfosetWriter%.
            </summary>
            <param name="writer">The %XmlFastInfosetWriter% to be used to write the vocabulary.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.String)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the file with speicifed path.
            </summary>
            <param name="path">The path to the file to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.IO.Stream)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <overloads>
            Saves the vocabulary.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Save(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Saves the vocabulary into the speicifed stream.
            </summary>
            <param name="stream">The stream to save the vocabulary into.</param>
            <param name="compression">The compression method to use to compress vocabulary.</param> 
            <param name="compressionLevel">The compression level to use when compressing vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.String)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the file with specified path.
            </summary>
            <param name="path">The path to the file to load the vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.IO.Stream)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load vocabulary from.</param>
            <overloads>Populates the vocabulary.</overloads>
        </member>
        <member name="M:Noemax.FastInfoset.WriterVocabulary.Load(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Load the vocabulary form the specified stream.
            </summary>
            <param name="stream">The stream to load vocabulary from.</param>
            <param name="compression">The compression method to use to decompress vocabulary.</param> 
        </member>
        <member name="P:Noemax.FastInfoset.WriterVocabulary.ReadOnlyVocabulary">
            <summary>
            Gets an associated read-only vocabulary.
            </summary>  
            <remarks>
            External read-only vocabulary provides provides indecies for encoding previously encountered values, 
            it does not get updated when new values are encountered in the document.
            You can populate read-only vocabulary by loading XML or FI document or reusing 
            vocabulary once used for writing a Fast Infoset document.
            </remarks>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetFactory">
            <summary>
            Manages %Noemax.FastInfoset.XmlFastInfosetReader% and %Noemax.FastInfoset.XmlFastInfosetWriter% objects.
            </summary>
            <remarks>
            The XmlFastInfosetFactory performs pooling of <c>XmlFastInfosetReader</c> and <c>XmlFastInfosetWriter</c> 
            instances to speed up the initialization of these objects.
            </remarks> 
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.#ctor">
            <summary>
            Initializes a new instance of %XmlFastInfosetFactory%.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <returns>
            An instance of XmlFastInfosetReader.
            </returns>
            <overloads>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>                
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetReader%. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <returns>An instance of %XmlFastInfosetReader%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of %XmlFastInfosetReader%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>                
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.IO.Stream,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="stream">The stream containing the Fast Infoset document.</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateReader(System.String,System.Xml.XmlReaderSettings,Noemax.FastInfoset.FastInfosetCompression)">
            <summary>
            Creates a new or reuses an existing instance of XmlFastInfosetReader. 
            </summary>
            <param name="filename">The URI to the file containing the Fast Infoset document</param>        
            <param name="settings">The XmlReaderSettings object used to configure the new XmlFastInfosetReader instance.</param>
            <param name="compression">The compression algorithm to be used to decompress the Fast Infoset document.</param>
            <returns>An instance of XmlFastInfosetReader.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>        
            <returns>An instance of XmlFastInfosetWriter.</returns>
            <overloads>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%.
            </overloads>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>        
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write. </param>
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>    
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.IO.Stream,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="stream">The stream to which you want to write. </param>
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>        
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>                
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetFactory.CreateWriter(System.String,System.Xml.XmlWriterSettings,Noemax.FastInfoset.FastInfosetCompression,System.Int32)">
            <summary>
            Creates a new or reuses an existing instance of %XmlFastInfosetWriter%. 
            </summary>
            <param name="filename"> The URI of the file to write.</param>    
            <param name="settings">The XmlWriterSettings object used to configure the new XmlFastInfosetWriter instance.</param>
            <param name="compression">The compression algorithm to compress the output data.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <returns>An instance of %XmlFastInfosetWriter%.</returns>
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetFormat">
            <summary>Defines the way that Fast Infoset serializes primitive data types.</summary>
            <remarks>When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy 
            and increase compactness. However, if there are few repeating values of the same data type then 
            it might be preferable not to use indexing.</remarks>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.LiteralNoIndex">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.RestrictedAlphabet">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.RestrictedAlphabetNoIndex">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.Binary">
            <summary>Encodes values in a binary format. Provides higher processing performance than Literal and Restricted Alphabet.</summary>
        </member>
        <member name="F:Noemax.FastInfoset.XmlFastInfosetFormat.DotNet">
            <summary> This format is obsolete.</summary>        
        </member>
        <member name="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">
            <summary>Contains the settings that specify the way FastInfoset serializes primitive data types.</summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.#ctor">
            <summary>
            Initializes a new instance of XmlFastInfosetWriterProfile with default settings.
            </summary>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.#ctor(Noemax.FastInfoset.XmlFastInfosetWriterProfile)">
            <summary>
            Initializes a new instance of XmlFastInfosetWriterProfile by coping settings of
            already exisitng one.
            </summary>
            <param name="source">The profile to copy settings from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.CopyFrom(Noemax.FastInfoset.XmlFastInfosetWriterProfile)">
            <summary>Coppies all properties from already existing XmlFastInfosetWriterProfile object.</summary>
            <param name="source">The source XmlFastInfosetWriterProfile object to copy properties from.</param>
        </member>
        <member name="M:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Clone">
            <summary>Creates a copy cone of the XmlFastInfosetWriterProfile.</summary>
            <returns>The clone of this object.</returns>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DateTimeFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DecimalFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.TimeSpanFormat">
            <summary>Gets and sets the format used to encode TimeSpan values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.LongFormat">
            <summary>Gets and sets the format used to encode long integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.IntFormat">
            <summary>Gets and sets the format used to encode integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.ShortFormat">
            <summary>Gets and sets the format used to serialize short integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.DoubleFormat">
            <summary>Gets and sets the format used to serialize double precision floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.FloatFormat">
            <summary>Gets and sets the format used to serialize floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.GuidFormat">
            <summary>Gets and sets the format used to serialize guild values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.BooleanFormat">
            <summary>Gets and sets the format used to serialize boolean values.</summary>      
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides interoperability with Fast Infoset 
            implementations that only support the Literal representation.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Basic">
            <summary>The Basic profile usually provides the highest processing performance. It is set to use the Binary representation whenever available.</summary>
        </member>
        <member name="P:Noemax.FastInfoset.XmlFastInfosetWriterProfile.Compact">
            <summary>The Compact profile usually provides the highest compactness.It is set to use the Restricted Alphabet representation whenever available.</summary>
        </member>
        <member name="T:Noemax.Xml.XmlSchemaBasedConverter">
            <summary>
            This class takes XML input and processes it using its XML schema and performs original data-type aware serialization, 
            taking into account node content types defined by schema. The final output of sialization depends on which writer is being used. 
            This class can be used combined with binary XML writers to  produce a more efficient representation of text XML document.
            </summary>    
        </member>
        <member name="M:Noemax.Xml.XmlSchemaBasedConverter.#ctor(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Creates a new instance of XmlSchemaBasedConverter.
            </summary>
            <param name="schemaSet">
            XML schema to use during converting XML documents.
            </param>
            <param name="validationEventHandler">
            The callback method that will handle XML schema validation events.
            </param> 
        </member>
        <member name="M:Noemax.Xml.XmlSchemaBasedConverter.Convert(System.Xml.XmlWriter,System.Xml.XmlReader)">
            <summary>
            Convert XML stream from the reader into format produced by the writer. 
            </summary>
            <param name="writer">XmlWriter to write the result of conversion.</param>
            <param name="input">XmlReader from which to read the input to convert.</param>        
        </member>
        <member name="P:Noemax.Xml.XmlSchemaBasedConverter.TypedValueCount">
            <summary>
            Reports the number of primitive typed values that were processed by the converter during processing document.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlSchemaBasedConverter.ReaderSettings">
            <summary>
            The settings of the schema validating reader used by XmlSchemaBasedConverter while converting documents.
            </summary>
        </member>
        <member name="T:Noemax.GZip.Deflate">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.ZStream">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.ZLIB_VERSION">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.MIN_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.MAX_MATCH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.PRESET_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FILTERED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_HUFFMAN_ONLY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_RLE">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FIXED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DEFAULT_STRATEGY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NULL">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_OK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_STREAM_END">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NEED_DICT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_ERRNO">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_STREAM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DATA_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_MEM_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_BUF_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_VERSION_ERROR">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_NO_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_PARTIAL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_SYNC_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FULL_FLUSH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_FINISH">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_BLOCK">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_TREES">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.Z_DEFLATED">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_in_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.avail_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.total_in">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.next_out_index">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.avail_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.total_out">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.data_type">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.adler">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStream.msg">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.ERR_MSG(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.ERR_RETURN(Noemax.GZip.ZStream,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.ZStream.MemZero(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateInit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.FlushOutput(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflate(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Deflate.deflateEnd">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.DeflateInputStream">
            <summary>
            Provides methods and properties for decompressing streams using the DEFLATE algorithm.
            </summary>
            <remarks>
            <para>By default, DeflateInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %DeflateInputStream%
            </summary>   
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            	<para>If <strong>true</strong> the underlying stream is expected to be RFC1950 Zlib format stream.</para>
            </param>          
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %DeflateInputStream%.
            </summary>   
            <param name="stream">The stream to decompress.</param> 
            <overloads>
            Initializes a new instance of %DeflateInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <b>count</b> bytes
            from <b>buffer</b> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin copying bytes to the current stream.
            </param>
            <param name="count"><para>The number of bytes to be written to the current stream.</para></param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Restart">
            <summary>
            Restarts the decompression starting from current possition of the underlying stream.
            </summary>        
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Flush">
            <summary>This method is not supported.</summary>
        </member>
        <member name="M:Noemax.GZip.DeflateInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %DeflateInputStream% 
            and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources.
            </param>  
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanRead">
            <summary>This property always returns <strong>true</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanWrite">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.BytesBuffered">
            <summary>
            Returns the number of unprocessed bytes in DeflateInputStream buffer.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ForceBuffering">
            <summary>
            Specifies whether to force buffering input data. Default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            	The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>   
        </member>
        <member name="P:Noemax.GZip.DeflateInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks> 
        </member>
        <member name="T:Noemax.GZip.DeflateOutputStream">
            <summary>
            Provides methods and properties for compressing streams using the DEFLATE algorithm.
            </summary>
            <remarks>
            <para>By default, DeflateOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>
            <param name="fileName">The path to the file to which compressed data will be written.</param> 
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>  
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Specifies the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %DeflateOutputStream% class.
            </summary>        
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Specifies the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            	<para>If <strong>true</strong> RFC1950 Zlib format will be used to write DEFLATE stream.</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance %DeflateOutputStream% class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <overloads>
            Initializes a new instance %DeflateOutputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the %Flush%, %Finish% or %Close% method is
            called.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0) if the
            end of the stream has been reached.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            	<para>The zero-based byte offset in <b>buffer</b> at which
                to begin storing the data read from the current stream.</para>
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Finish">
            <summary>
            Concludes compression and flushes the content of the internal buffer to the
            underlying stream.
            </summary>
            <remarks>
            	<para><strong>Finish</strong> concludes compression by writing the markup
                indicating the end of compressed data and flushing the content of the internal
                buffer.</para>
            	<para>After this method has been called, no more data can be written to this
                stream.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            	<para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
                <strong>true</strong>, the underlying stream remains open after this method is
                called, otherwise the underlying stream is also closed.</para>
            	<para>If %Finish% has not yet been called, <strong>Close</strong> will call <strong>Finish</strong>
                before closing the stream. Do not close the underlying stream before closing this
                stream.</para>
            </remarks>
            <seealso cref="T:Noemax.GZip.DeflateOutputStream">DeflateOutputStream Constructor</seealso>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the DeflateOutputStream
            and optionally releases the managed resources. 
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateOutputStream.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanRead">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>
            <remarks>
            This property is always <strong>true</strong> if %Finish% has not been
            called. After <strong>Finish</strong> has been called this property is
            <strong>false</strong>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            	The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>   
        </member>
        <member name="P:Noemax.GZip.DeflateOutputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks> 
        </member>
        <member name="T:Noemax.GZip.DeflateStream">
            <summary>
            Provides methods and properties for processing streams using the DEFLATE algorithm.
            </summary>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of DeflateStream class.
            </summary>
            <remarks>
            By default, DeflateStream owns the underlying stream, so closing the stream also closes the underlying stream.
            There is no limit in the size of the stream to be compressed.
            </remarks>        
            <param name="fileName">The path to the file where to write compressed data or read compressed data from.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default <strong>DeflateStream</strong> owns the underlying stream, so
                closing this <b>stream</b> also closes the underlying
                stream. Note that the state of the underlying stream can affect the usability of
                this stream.</para>
            </remarks>
            <overloads>
            Initializes a new instance of the %DeflateStream% class.
            </overloads>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            	<para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
                stream also closes the underlying stream. Note that the state of the underlying
                stream can affect the usability of the stream. Also, no explicit checks are
                performed, so no additional exceptions are thrown when the new instance is
                created.</para>
            	<para>If an instance of the <b>DeflateStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="zlibFormat">
            <para>If <strong>true</strong> the stream is to be RFC1950 Zlib format stream.</para>
            </param>        
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks>
            <para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is
            created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the %DeflateStream% class.
            </summary>
            <remarks><para>By default, <b>DeflateStream</b> owns the underlying stream, so closing the
            stream also closes the underlying stream. Note that the state of the underlying
            stream can affect the usability of the stream. Also, no explicit checks are
            performed, so no additional exceptions are thrown when the new instance is created.</para>
            <para>If an instance of the <b>DeflateStream</b> class is created with the 
            <b>mode</b> parameter equal to <b>Compress</b>, header
            information is inserted immediately. If no further action occurs, the stream
            appears as a valid, empty, compressed file.</para></remarks>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="zlibFormat">
            <para>If <strong>true</strong> the stream is to be RFC1950 Zlib format stream.</para>
            </param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
            <remarks><para>When writing using the <see cref="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">Write</see> method, the
            data may not be written to the stream since writing the data back in chunks can provide better performance. Calling the 
            <b>Flush</b> method forces the data to be written.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the
            <see cref="M:Noemax.GZip.DeflateStream.Flush">Flush</see>,       
            <see cref="M:Noemax.GZip.DeflateStream.Close">Close</see> method is called.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            <para>The zero-based byte offset in the <b>buffer</b> at
            which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Dispose(System.Boolean)">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>        
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipStream">GZipStream Constructor</seealso>
        </member>
        <member name="M:Noemax.GZip.DeflateStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            <para>If this stream had been initialized with <strong>leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is
            called, otherwise the underlying stream is also closed.</para>
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipStream">GZipStream Constructor</seealso>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanRead">
            <summary>Gets a value indicating whether the stream supports reading.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>        
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Length">
            <summary>
            This property is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.Position">
            <summary>
            This property is not supported and always throws a <strong>NotSupportedException</strong>.
            </summary>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.DeflateStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.DeflateStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.ExtraFieldCollection">
            <summary>Represents a collection of GZip header fields.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">Add(Byte,
                Byte, Byte[])</see> overload.</para>
            </remarks>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
            <param name="data">The array of bytes to be stored in header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Add(System.Byte,System.Byte,System.Byte[])">
            <summary>Adds the header to the list of GZip headers.</summary>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Add(System.Int32,System.Byte[])">Add(Int32,
                Byte[])</see> overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <param name="data">The array of bytes to be stored in the header field.</param>
            <overloads>
            Adds the header to the list of GZip headers.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetByID(System.Int32)">
            <summary>
            Gets the header associated with the ID represented as a 16-bit unsigned
            integer.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and ID2),
                which can be represented as a single 16-bit unsigned integer where ID1 is the most
                significant 8 bits and ID2 is the less significant 8 bits of its binary
                representation.</para>
            	<para>Use this method if it's more comfortable to provide the ID as a single
                <strong>Int16</strong> value. To provide the ID as two 8-bit fields use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">Get(Byte,
                Byte)</see> overload.</para>
            </remarks>
            <overloads>Gets the header.</overloads>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Byte,System.Byte)">
            <summary>
            Gets the GZip header associated with the ID represented as two ANSI character
            octet.
            </summary>
            <returns>The array of bytes stored in the header field.</returns>
            <remarks>
            	<para>Each GZip header extra-field is identified by two 8-bit values (ID1 and
                ID2).</para>
            	<para>Use this method if it's more comfortable to provide the ID as two 8-bit
                values. To provide the ID as a single 16-bit unsigned integer use
                <see cref="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">Get(Int32)</see>
                overload.</para>
            </remarks>
            <param name="id1">The 8-bit ID1 value.</param>
            <param name="id2">The 8-bit ID2 value.</param>
            <overloads>
            Gets the GZip header.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Get(System.Int32)">
            <summary>Gets the GZip header specified by its index in the list of headers.</summary>
            <returns>The array of bytes stored in the header field.</returns>
            <param name="index">The index of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Remove(System.Int32)">
            <summary>Removes the header with the specified index.</summary>
            <param name="index">The index of header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.RemoveByID(System.Int32)">
            <summary><para>Removes the header specified by the 16-bit unsigned integer ID.</para></summary>
            <param name="id">The 16-bit unsigned integer identifier of the header field.</param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.Clear">
            <summary>Clears the list of GZip headers.</summary>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.CopyTo(Noemax.GZip.GZipHeaderField[],System.Int32)">
            <summary>
            Copies the content of the collection into an array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </summary>
            <param name="array">
            The destination array of
            <see cref="T:Noemax.GZip.GZipHeaderField">GZipHeaderField</see>.
            </param>
            <param name="arrayIndex">
            	<para>The index in the destination <b>array</b> at which to
                begin copying .</para>
            </param>
        </member>
        <member name="M:Noemax.GZip.ExtraFieldCollection.GetEnumerator">
            <summary>Gets a list of items in a collection.</summary>
            <returns>
            An <strong>IEnumerator</strong> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Count">
            <summary>Gets the number of contained headers.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.Item(System.Int32)">
            <summary>Gets the header at the specified index.</summary>
        </member>
        <member name="P:Noemax.GZip.ExtraFieldCollection.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipHeaderField">
            <summary>Represents a GZip header field.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID">
            <summary>The 16-bit identifier of the header field (concatenated ID1 and ID2).</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID1">
            <summary>The 8-bit ID1 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.ID2">
            <summary>The 8-bit ID2 identifier.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipHeaderField.Data">
            <summary>The data contained in the header field.</summary>
        </member>
        <member name="T:Noemax.GZip.GZipInputStream">
            <summary>    
            Provides methods and properties to decompress GZIP stream.
            </summary>
            <remarks>
            <para>By default, GZipInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see>
            class.
            </summary>  
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see> class.
            </summary>        
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of 
            <see cref="T:Noemax.GZip.GZipInputStream">GZipInputStream</see> class.
            </summary>        
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of 
            %GZipInputStream:T:Noemax.GZip.GZipInputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.ReadHeader">
            <summary>
            Reads the GZIP header from the stream.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Flush">
            <summary>This method is not supported.</summary>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            	<para>If data is found in an invalid format, an <b>IOException</b> is
                thrown. A cyclic redundancy check (CRC) is performed when all data up to the end of
                stream have been read.</para>
            </remarks>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <b>count</b> bytes
            from <b>buffer</b> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin copying bytes to the current stream.
            </param>
            <param name="count"><para>The number of bytes to be written to the current stream.</para></param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipInputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipInputStream.Close">
            <summary>Closes the current stream.</summary>   
            <remarks>
            If this stream have been initialized with <strong>_leaveOpen</strong> set to
            <strong>true</strong>, the underlying stream remains open after this method is called,
            otherwise the underlying stream is also closed.
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipInputStream">GZipInputStream Constructor</seealso>        
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading while decompressing a file.
            </summary>
            <remarks>
            Returns <strong>true</strong> if the underlying stream supports reading and is
            not closed.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanWrite">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Length">
            <summary>Gets the length in bytes of the underlying stream.</summary>
            <remarks>
            	<strong>GZipInputStream</strong> will try to read the <strong>Length</strong>
            property of the underlying stream. Check the the <strong>Length</strong> property
            documentation of the underlying stream for more information.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ExtraFields">
            <summary>The collection of extra-fields read from the GZip header.</summary>
            <remarks>
            If the GZip header does not contain any extra-fields this property returns an
            empty
            <see cref="T:Noemax.GZip.ExtraFieldCollection">ExtraFieldCollection</see>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ParseExtraFields">
            <summary>
            Gets and sets whether the reader should parse the extra-fields stored in the GZip
            header.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <remarks>  
            The length check can fail on the files that are bigger than 4GB, since GZIP header does not support 
            serializing bigger number. For this reason it's recommended to set this property to <strong>false</strong> 
            in cases when original data might exceed the 4294967295 bytes.
            </remarks> 
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.Filename">
            <summary>Gets the filename specified in the GZip header.</summary>
            <remarks>
            If the filename is not present in the GZip header it returns
            <strong>null</strong> (<strong>Nothing</strong> for Visual Basic).
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileComments">
            <summary>
            Gets the comments specified in the GZip header.  
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.FileTime">
            <summary>
            Gets an original file last modified time.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.GZipOutputStream">
            <summary>
            Provides the compression stream writing GZip streams and files.
            </summary>
            <remarks>
            <para>By default, GZipOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para> 
            <para> There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.String,System.Int32)">
            <summary> Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see>
            class.</summary>
            <param name="fileName">The path to the file to which the compressed data will be written.</param>        
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>        
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see>
            class.
            </summary>    
            <param name="stream">The stream to to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> 
            Initializes a new instance of the <see cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream</see> class.
            </summary>      
            <param name="stream">The stream to to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <overloads>
            Initializes a new instance of the 
            %GZipOutputStream:T:Noemax.GZip.GZipOutputStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0) if the
            end of the stream has been reached.
            </returns>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the bytes read from the current source.
            </param>
            <param name="offset">
            	<para>The zero-based byte offset in <b>buffer</b> at which
                to begin storing the data read from the current stream.</para>
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            	<para>The write might not occur immediately since it is buffered until the buffer
                size is reached or until the
                <see cref="M:Noemax.GZip.GZipOutputStream.Flush">Flush</see> or <see cref="M:Noemax.GZip.GZipOutputStream.Close">Close</see> method is
                called.</para>
            	<para>Upon the first write operation <strong>GZipOutputStream</strong> will write
                the GZip header into the underlying stream, therefore all required headers have to
                be specified before the first write operation.</para>
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Close">
            <summary>Flushes the internal buffer content and closes the current stream.</summary>
            <remarks>
            	<para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
                <strong>true</strong>, the underlying stream remains open after this method is
                called, otherwise the underlying stream is also closed.</para>
            	<para>Before closing, the <strong>GZipOutputStream</strong> will also flush its
                buffer and write the GZip trailer fields into the underlying stream. Do not close
                the underlying stream before closing this stream<strong>.</strong></para>
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipOutputStream">GZipOutputStream Constructor</seealso>
        </member>
        <member name="M:Noemax.GZip.GZipOutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipOutputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>       
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanRead">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.<!--DXMETADATA end --></summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>
            <remarks>
            Returns <strong>true</strong> if the underlying stream supports writing and is
            not closed; otherwise, <b>false</b>.
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Length">
            <summary>Gets the length in bytes of the underlying stream.</summary>
            <remarks>
            	<strong>GzipOutputStream</strong> will try to readthe <strong>Length</strong>
            property of the underlying stream. Check the <strong>Length</strong> property
            documentation the underlying stream for more information .
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Filename">
            <summary>
            Gets and sets the filename to write into the GZip header.
            </summary>
            <remarks>
            <para>You can provide the name of the compressed file to be written into the GZip
            header by setting this property.</para>
            <para>The GZip header will be written during the first write operation, therefore
            this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.FileTime">
            <summary>
            The original last modified time of the compressed file.
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.Comments">
            <summary>Gets and sets the file comments to write into the GZip header.</summary>
            <remarks>
            <para>You can provide the comments for the compressed file to be written into the
            GZip header by setting this property.</para>
            <para>The GZip header will be written during the first write operation, therefore
            this property has to be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ExtraFields">
            <summary>The collection of extra-fields to write into the GZip header.</summary>
            <remarks>
            <para>You can provide the set of extra-fields to be written into the GZip header by
            modifying this collection.</para>
            <para>The GZip header will be written during the first write operation, therefore
            the extra-header fields should be specified before writing any data into the
            stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipOutputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.GZip.CompressionMode">
            <summary>
            Defines the compression modes for GZipStream.
            </summary>    
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Compress">
            <summary>
            To compress data.
            </summary>
        </member>
        <member name="F:Noemax.GZip.CompressionMode.Decompress">
            <summary>
            To decompress data.
            </summary>
        </member>
        <member name="T:Noemax.GZip.GZipStream">
            <summary>
            Provides methods and properties for processing streams using GZIP.
            </summary>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.String,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>        
            <param name="fileName">The path to the file to which the compressed data will be written or from which the data 
            to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode"> One of the <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <overloads>
            Initializes a new instance of the %GZipStream% class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            	<para>If an instance of the <b>GZipStream</b> class is created with the
                <b>mode</b> parameter equal to <b>Compress</b>, header
                information is inserted immediately. If no further action occurs, the stream
                appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be 
            decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.#ctor(System.IO.Stream,Noemax.GZip.CompressionMode,System.Int32)">
            <summary>
            Initializes a new instance of the %GZipStream% class.
            </summary>
            <remarks>
            <para>If an instance of the <b>GZipStream</b> class is created with the
               <b>mode</b> parameter equal to <b>Compress</b>, header
               information is inserted immediately. If no further action occurs, the stream
               appears as a valid, empty, compressed file.</para>
            </remarks>
            <param name="stream">The stream to which the compressed data will be written or from which the data to be decompressed will be read.</param>
            <param name="mode">
            One of the
            <see cref="T:Noemax.GZip.CompressionMode">CompressionMode</see> values that
            indicates the action to take.
            </param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Flush">
            <summary>Flushes the content of the internal buffer to the underlying stream.</summary>
            <remarks>
            <para>When writing using the
            <see cref="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">Write</see> method, the data may not be 
            written to the stream since writing the data back in chunks can provide better performance.
            Calling the <b>Flush</b> method forces the data to be
            written.</para>
            </remarks>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <returns>
            The number of bytes that were decompressed into the byte array. If the end of the
            stream has been reached, zero or the number of bytes read is returned.
            </returns>
            <remarks>
            If data is found in an invalid format, an <b>IOException</b> is
            thrown.
            </remarks>
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <b>offset</b> and
            (<b>offset</b> + <b>count</b> - 1)
            replaced by the decompressed bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <b>buffer</b> at which to
            begin storing the data read from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <returns>A long value.</returns>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the <strong>SeekOrigin</strong> values.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.SetLength(System.Int64)">
            <summary>
            This method is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes compressed bytes to the underlying stream from the specified byte
            array.
            </summary>
            <returns>The number of bytes compressed into the stream.</returns>
            <remarks>
            The write might not occur immediately since it is buffered until the buffer size
            is reached or until the
            <see cref="M:Noemax.GZip.GZipStream.Flush">Flush</see>,        
            <see cref="M:Noemax.GZip.GZipStream.Close">Close</see> method is called.
            </remarks>
            <param name="buffer">The array containing the bytes to compress.</param>
            <param name="offset">
            	<para>The zero-based byte offset in the <b>buffer</b> at
                which to begin compressing and copying bytes to the current stream.</para>
            </param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.GZip.GZipStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the %GZipOutputStream% and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>  
        </member>
        <member name="M:Noemax.GZip.GZipStream.Close">
            <summary>Flushes the content of internal buffer and closes the current stream.</summary>
            <remarks>
            	<para>If this stream had been initialized with <strong>_leaveOpen</strong> set to
                <strong>true</strong>, the underlying stream remains open after this method is
                called, otherwise the underlying stream is also closed.</para>
            </remarks>
            <seealso cref="T:Noemax.GZip.GZipStream">GZipStream Constructor</seealso>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Filename">
            <summary>Gets and sets the filename to write into or read from the GZip header.</summary>
            <remarks>
            	<para>You can provide the name of the compressed file to be written into the GZip
                header by setting this property.</para>
            	<para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
                <para>The GZip header will be written during the first write operation, therefore
                this property should be specified before writing any data into the stream.</para>
            </remarks>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanRead">
            <summary>Gets a value indicating whether the stream supports reading.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanSeek">
            <summary>This property always returns <strong>false</strong>.</summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckCRC">
            <summary>
            Gets and sets whether to check CRC of the decompressed data.
            </summary>
            <value>
             <b>true</b> if CRC of decompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CheckLength">
            <summary>
            Gets and sets whether to check the length of uncompressed data.
            </summary>
            <value>
             <b>true</b> if the length of uncompressed data should be validated; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Length">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.Position">
            <summary>
            This property is not supported and always throws a
            <strong>NotSupportedException</strong><font color="black">.</font>
            </summary>
        </member>
        <member name="P:Noemax.GZip.GZipStream.CanTimeout">
            <summary>Gets a value that determines whether the current stream can time out.</summary>
            <remarks>
            The <b>CanTimeout</b> property returns a value of the inner stream CanTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>        
        </member>
        <member name="P:Noemax.GZip.GZipStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            	The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>        
        </member>
        <member name="T:Noemax.GZip.Inflate">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateReset">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateInit(System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflateInit">
            <summary/>
        </member>
        <member name="M:Noemax.GZip.Inflate.inflate(System.Int32)">
            <summary/>
        </member>
        <member name="T:Noemax.GZip.InvalidInputException">
            <summary>
            The exception that is thrown when a compressed input stream is in an invalid
            format.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class.
            </overloads>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class with a specified error message.
            </summary>
        </member>
        <member name="M:Noemax.GZip.InvalidInputException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.GZip.InvalidInputException">InvalidInputException</see>
            class with a reference to the inner exception that is the cause of this
            exception.
            </summary>
        </member>
        <member name="T:Noemax.GZip.ZStreamDataType">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_BINARY">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_TEXT">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_ASCII">
            <summary/>
        </member>
        <member name="F:Noemax.GZip.ZStreamDataType.Z_UNKNOWN">
            <summary/>
        </member>
        <member name="T:LZF.NET.CLZF">
            <summary>
            Summary description for CLZF.
            </summary>
        </member>
        <member name="F:LZF.NET.CLZF.HLOG">
            <summary>
            LZF Compressor
            </summary>
        </member>
        <member name="M:LZF.NET.CLZF.lzf_decompress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            LZF Decompressor
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf3InputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF3 compression algorithm.
            </summary>
            <remarks> 
            <para>By default, Lzf3InputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks>
        </member>
        <member name="F:Noemax.Lzf.Lzf3InputStream.HLOG">
            <summary>
            LZF Compressor
            </summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>     
            <overloads>
            Initializes a new instance of %Lzf3InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf3InputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Close">
            <summary>
            Closes the stream.
            </summary>  
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Flush">
            <summary>Not supported.</summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into a specified array of bytes.
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer where to store decompressed bytes.</param>
            <param name="count">The number of bytes to decompress.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Calls the Seek method of the underlying stream. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.SetLength(System.Int64)">
            <summary>Calls the SetLength method of the underlying stream.</summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanTimeout">
            <summary>Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.WriteTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.ReadTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanRead">
            <summary>
            Gets the value of CanRead property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanSeek">
            <summary>
            Gets the value of CanSeek property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanWrite">
            <summary>Always returns <b>false</b>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.Length">
            <summary>Gets the Length property of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.Position">
            <summary>
            Get and set the possition of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3InputStream.CanReadWithoutInput">
            <summary>
            Gets the value that indicates whether the Lzf3InputStream have bytes buffered
            in its internal buffer and can return bytes without reading from the underlying stream.
            </summary>
            <value>
            Returns <b>true</b> if this Lzf3InputStream can read some amount of bytes without reading from
            the underlying stream; returns <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Noemax.Lzf.Lzf3OutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="fileName">The file to which compressed data will be written.</param>        
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>        
            <overloads>
            Initializes a new instance of %Lzf3OutputStream%. 
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Close">
            <summary>
            Flushes the buffer and closes the stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calls the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> method of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.SetLength(System.Int64)">
            <summary>
            Calls the <see cref="M:System.IO.Stream.SetLength(System.Int64)"/> method of the underlying stream.
            </summary>
            <param name="value">The value to set as length of the stream.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf3OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified array of bytes and writers them into stream.
            </summary>
            <param name="buffer">The buffer with bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanWrite">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanWrite"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.Length">
            <summary>
            Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.Position">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf3OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4Decoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4Decoder.#ctor">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Decoder.Decompress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4Encoder">
            <summary>    
            Provides methods and properties to compress streams using LZF3 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf3OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.#ctor">
            <summary>
            Initializes a new instance of %Lzf3OutputStream%. 
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary/>
        </member>
        <member name="M:Noemax.Lzf.Lzf4Encoder.Reset">
            <summary/>
        </member>
        <member name="T:Noemax.Lzf.Lzf4InputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF4 compression algorithm.
            </summary>
            <remarks> 
            <para>By default, Lzf4InputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified file.
            </summary>
            <param name="filename">The path to the file to read compressed data from.</param>                
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified stream.
            </summary>
            <param name="stream">The stream to read compressed data from.</param>     
            <overloads>
            Initializes a new instance of %Lzf4InputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf4InputStream% that reads compressed data from the specified stream.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Flush">
            <summary>Not supported.</summary> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into a specified array of bytes. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer where to store decompressed bytes.</param>
            <param name="count">The number of bytes to decompress.</param>
            <returns>The number of bytes decompressed.</returns>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Calls the <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> method of the underlying stream. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.SetLength(System.Int64)">
            <summary>Calls the <see cref="M:System.IO.Stream.SetLength(System.Int64)"/> method of the underlying stream.</summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Not supported. </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4InputStream.Close">
            <summary>Closes the stream and release associated resources. If stream was created with <b>leaveOpen</b> parameter set to <b>false</b>, the underlying stream is also closed.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanRead">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanRead"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanSeek">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanSeek"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanWrite">
            <summary>Always returns <b>false</b>.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Length">
            <summary>Gets the <see cref="P:System.IO.Stream.Length"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.Position">
            <summary>Gets and sets the <see cref="P:System.IO.Stream.Position"/> property value of the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.CanTimeout">
            <summary>Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.WriteTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4InputStream.ReadTimeout">
            <summary> Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value from the underlying stream.</summary>
        </member>
        <member name="T:Noemax.Lzf.Lzf4OutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF4 compression algorithm.
            </summary>
            <remarks>
            <para>By default, Lzf4OutputStream owns the underlying stream, so closing this stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified file. 
            </summary>
            <param name="filename">The file to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified stream.
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>     
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %Lzf4OutputStream% that writes compressed data into the specified stream. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calls the Seek method of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.SetLength(System.Int64)">
            <summary>
            Calls the SetLength method of the underlying stream.
            </summary>
            <param name="value">The value to set as length of the stream.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified array of bytes and writers them into the stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzf.Lzf4OutputStream.Close">
            <summary>
            Flushes the buffer and closes the stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanSeek">
            <summary>
            Gets the value of the CanSeek property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanWrite">
            <summary>
            Gets the value of the CanWrite property from the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Length">
            <summary>
            Gets the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.Position">
            <summary>
            Gets and sets the possition of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.CanTimeout">
            <summary>
            Gets the <see cref="P:System.IO.Stream.CanTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.WriteTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.WriteTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.Lzf4OutputStream.ReadTimeout">
            <summary>
            Gets and sets the <see cref="P:System.IO.Stream.ReadTimeout"/> property value of the underlying stream.
            </summary>
        </member>
        <member name="T:Noemax.Lzf.LzfInputStream">
            <summary>    
            Provides methods and properties to decompress streams compressed by LZF compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzfInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="fileName">The path to the file from which to read copressed data from.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of %LzfInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %LzfInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>        
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Flush">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into specified buffer. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfInputStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanRead">
            <summary>
            Gets the CanRead property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanSeek">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanWrite">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.Length">
            <summary>
            Returns the length of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.Position">
            <summary>
            Get and set the possition of underlying compressed stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>
        </member>
        <member name="P:Noemax.Lzf.LzfInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.Lzf.LzfOutputStream">
            <summary>    
            Provides methods and properties to compress streams using LZF compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzfOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="filename">The path to the file to which the compressed data will be written.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>
            <overloads>
            Initializes a new instance of %LzfOutputStream%. 
            </overloads>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of %LzfOutputStream%. 
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Flush">
            <summary>
            Flushes the buffered compressed data into underlying stream and flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>       
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified byte array and writers them into stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzf.LzfOutputStream.Close">
            <summary>
            Flushes the buffer and closes the stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanRead">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanSeek">
            <summary>
            Always returns <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanWrite">
            <summary>
            Returns the value of CanWrite property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.Length">
            <summary>
            Gets the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.ReadTimeout">
            <summary>
            Gets the ReadTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzf.LzfOutputStream.WriteTimeout">
            <summary>
            Gets the WriteTimeout property of the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.ICoder.Code(System.IO.Stream,System.IO.Stream)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>		
        </member>
        <member name="T:Noemax.Lzma.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA <![CDATA[(0 <= x <= 8)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA <![CDATA[(0 <= x <= 4)]]>.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaMatchFinder">
            <summary>
            Defines the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt2">
            <summary>
            BinTree2.
            </summary>   
        </member>
        <member name="F:Noemax.Lzma.LzmaMatchFinder.Bt4">
            <summary>
            BinTree4
            </summary>
        </member>
        <member name="T:Noemax.Lzma.LzmaSettings">
            <summary>
            Represents the LZMA compression algorithm settings.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.ToString">
            <summary>
            Represents the LzmaEncoderSettings object as string.
            </summary>
            <returns>
            The string representing the LzmaEncoderSettings.
            </returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaSettings.#ctor">
            <summary>
            Creates a new intance of LzmaEncoderSettings class. 
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.MatchFinder">
            <summary>
            Gets and sets the type of match finder to be used by LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.PosStateBits">
            <summary>
            Gets and sets PosStateBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitContextBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.LitPosBits">
            <summary>
            Gets and sets LitContextBits setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.NumFastBytes">
            <summary>
            Gets and sets the NumFastBytes setting of LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaSettings.Dictionary">
            <summary>
            Gets and set the LZMA algorithm dictionary size.
            </summary>
            <remarks>
            Setting this value to a bigger number can improve compactness but will result in higher memory
            consumption.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaFactory">
            <summary>
            Provides a factory pattern for creating a LZMA compression/decompression streams.
            </summary>    
            <remarks>
            Factory also performs caching of LZMA processing related resources to speed up creation of new 
            compression/decompression streams.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaInputStream">
            <summary>
            Provides methods and properties to decompress streams compressed by LZMA compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzmaInputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be decompressed.</para>
            </remarks> 
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <overloads>
            Initializes a new instance of %LzmaInputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="fileName">The path to the file from which the compressed data will be read.</param>        
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %LzmaInputStream%.
            </summary>
            <param name="stream">The stream to decompress.</param>
            <param name="leaveOpen"><b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="expectLzmaFileHeader">Specifies whether the stream is expected to contain the LZMA file header.</param> 
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Flush">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data from compressed stream and decompresses it into specified buffer. 
            </summary>
            <param name="buffer">The buffer where to store dompressed bytes.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset">Not supported.</param>
            <param name="origin">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.SetLength(System.Int64)">
            <summary>
            Not supported. 
            </summary>
            <param name="value">Not supported. </param>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported. 
            </summary>
            <param name="buffer">Not supported.</param>
            <param name="offset">Not supported.</param>
            <param name="count">Not supported.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaInputStream.Close">
            <summary>
            Close this stream and the underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanRead">
            <summary>
            Returns true. This stream can read.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanSeek">
            <summary>
            Returns false. This stream cannot seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanWrite">
            <summary>
            Returns false. This stream cannot write.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Length">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>ReadTimeout</b> property returns a value of the inner stream ReadTimeout property.
            </remarks>     
        </member>
        <member name="P:Noemax.Lzma.LzmaInputStream.WriteTimeout">
            <summary>Gets or sets a value that determines how long the stream will attempt to read before 
            timing out.</summary>
            <remarks>
            The <b>WriteTimeout</b> property returns a value of the inner stream WriteTimeout property.
            </remarks>
        </member>
        <member name="T:Noemax.Lzma.LzmaOutputStream">
            <summary>
            Provides methods and properties to compress streams using LZMA compression algorithm.
            </summary>
            <remarks>
            <para>By default, LzmaOutputStream owns the underlying stream, so closing the stream also closes the underlying stream.</para>
            <para>There is no limit in the size of the stream to be compressed.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="filename">The path to the file to which the compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="stream">
            The stream to which compressed data will be written.
            </param>
            <param name="compressionLevel">
            Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.
            </param>
            <overloads>
            Initializes a new instance of %LzmaOutputStream%.
            </overloads>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of %LzmaOutputStream%.
            </summary>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="compressionLevel">Gets and sets the compression level to be applied, were 1 is for fastest compression 
            and 9 for maximum compression.</param>
            <param name="leaveOpen">Set to <b>true</b> to leave the underlying stream open after this stream is closed.</param>
            <param name="writeLzmaFileHeader">Set to <b>true</b> to write an LZMa file header into stream; otherwise shorter stream header is used.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Flush">
            <summary>
            Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses bytes from the specified byte array and writers them into stream.
            </summary>
            <param name="buffer">The buffer containing bytes to compress.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The number of bytes to compress.</param>
        </member>
        <member name="M:Noemax.Lzma.LzmaOutputStream.Close">
            <summary>
            Flushes compressed bytes and closes the stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanRead">
            <summary>
            Returns <strong>false</strong>. This stream cannot be read.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanSeek">
            <summary>
            Returns <strong>false</strong>. This stream cannot seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanWrite">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Length">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.Position">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.CanTimeout">
            <summary>
            Gets the CanTimeout property of underlying stream.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.ReadTimeout">
            <summary>Gets or sets a value that determines how long the stream will 
            attempt to read before timing out.
            </summary>
        </member>
        <member name="P:Noemax.Lzma.LzmaOutputStream.WriteTimeout">
            <summary>
            Gets or sets a value that determines how long the stream will 
            attempt to read before timing out.
            </summary>
        </member>
        <member name="T:Noemax.Utils.BytesReadCallback">
            <summary>
            Delegeate to the callback to call whenever ByteCounterStream reads data.
            </summary>
            <param name="sender">The ByteCounterStream intance that read data from the stream.</param>
            <param name="byteRead">The number of bytes read.</param>
        </member>
        <member name="T:Noemax.Utils.ByteCounterStream">
            <summary>
            Used internally. Reports the number of bytes read/written to the stream upon every read/write operation.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.#ctor(System.IO.Stream,Noemax.Utils.BytesReadCallback)">
            <summary>
            Initializes a new instance of ByteCounterStream.
            </summary>
            <param name="innerStream">The stream to reader/write.</param>
            <param name="byteReadCallback">The callback to be called upon every read operation.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Flush">
            <summary>
            Flushes the inner stream.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the inner stream.
            </summary>
            <param name="buffer">The buffer where to save bytes read.</param>
            <param name="offset">The offest in the buffer where save bytes read.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the stream possition to the offset from specified stream origin.
            </summary>
            <param name="offset">The offset to move stream possition too.</param>
            <param name="origin">The origin from which to calculate the offset.</param>
            <returns>A new stream possition.</returns>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.SetLength(System.Int64)">
            <summary>
            Sets the length of inner stream to specified value.
            </summary>
            <param name="value">The length of the stream to set.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a number of bytes into inner stream, and counts the number of bytes written.
            </summary>
            <param name="buffer">The buffer containg bytes to write.</param>
            <param name="offset">The offset from begin of the buffer where to start getting bytes from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Reset">
            <summary>
            Resets the counter of bytes read/written.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Close">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Utils.ByteCounterStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object and release associated resources.
            </summary>
            <param name="disposing">If set to <strong>true</strong> the associated unmanaged resources will be released.</param>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanRead">
            <summary>
            Returns true if inner stream can read data.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanSeek">
            <summary>
            Returns true if inner stream can seek possition.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.CanWrite">
            <summary>
            Returns true if inner stream can write data.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.Length">
            <summary>
            Returns the length of the inner stream.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.Position">
            <summary>
            Returns the possition of inner stream.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.BytesRead">
            <summary>
            Returns the number of bytes read.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.BytesWritten">
            <summary>
            Return the number of bytes written.
            </summary>
        </member>
        <member name="P:Noemax.Utils.ByteCounterStream.OnClose">
            <summary>
            The callback to call when this stream is closed.
            </summary>
        </member>
        <member name="T:Noemax.Utils.ISilverlightPolicyServerCallback">
            <summary>Define the interface to be implmented by a class providing the Silverlight policy file.</summary>
        </member>
        <member name="M:Noemax.Utils.ISilverlightPolicyServerCallback.GetPolicy(System.Net.EndPoint)">
            <summary>When implemented returns an array of bytes containing a Silverlight policy file.</summary>
        </member>
        <member name="T:Noemax.Utils.PolicyServer">
            <summary>
            Provides socket access policy file through port 943, for Silverlight clients.
            </summary>
        </member>
        <member name="M:Noemax.Utils.PolicyServer.#ctor(Noemax.Utils.ISilverlightPolicyServerCallback)">
            <summary>Initializes a new instance of %PolicyServer%.</summary>
        </member>
        <member name="M:Noemax.Utils.PolicyServer.Open">
            <summary>Opens the server and starts listening on port 943 waiting for Silverlight clients to connect.</summary>
        </member>
        <member name="M:Noemax.Utils.PolicyServer.Close">
            <summary>Stops listening for client connection and closes the server.</summary>
        </member>
        <member name="P:Noemax.Utils.PolicyServer.Callback">
            <summary>Gets and sets the %SilverlightPolicyServerCallback% for providing the policy file upon the client request.</summary>
        </member>
        <member name="T:Noemax.Utils.SendPolicyFileCallbackHandler">
            <summary>SendPolicyFileCallbackHandler provides Silverlight policy by reading it from the local file.</summary>
        </member>
        <member name="M:Noemax.Utils.SendPolicyFileCallbackHandler.#ctor(System.String)">
            <summary>Initializes a new instance of %SendPolicyFileCallbackHandler% with a path 
            to the file containing Silverlight policy.</summary>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnumerableStreamAttribute">
            <summary>
            An operation behavior that reduces memory consumption by serializing IEnumerable parameters in a streamed manner.
            </summary>
            <remarks>
            <para>
            The EnumerableStreamBehavior performs streamed serialization of IEnumerable 
            parameters without loading the entire enumerable collection into memory. It is most useful when the service operation returns a large IEnumerable collection.
            </para>
            <para>
            For the EnumerableStreamBehavior to perform as expected, the transfer mode of the transport specified by the 
            binding being used must be set to <c>Streamed</c>.
            </para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnumerableStreamAttribute.#ctor">
            <summary>
            Initializes a new instance of EnumerableStreamAttrtibute.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnumerableStreamBehavior">
            <summary>
            An operation behavior that reduces memory consumption by serializing IEnumerable parameters in a streamed manner.
            </summary>
            <remarks>
            <para>
            The EnumerableStreamBehavior performs streamed serialization of IEnumerable 
            parameters without loading the entire enumerable collection into memory. It is most useful when the service operation returns a large IEnumerable collection.
            </para>
            <para>
            For the EnumerableStreamBehavior to perform as expected, the transfer mode of the transport specified by the 
            binding being used must be set to <c>Streamed</c>.
            </para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnumerableStreamBehavior.#ctor">
            <summary>
            Initializes a new instance of EnumerableStreamBehavior.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute">
            <summary>Specifies that %Noemax.WCFX.Behaviors.EnvelopeBehavior% is going to be applied to the service operation.</summary>
            <remarks>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks> 
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.#ctor">
            <summary>
            Initializes a new instance of EnvelopeBehaviorAttribute.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.CompressionMethod">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionMethod" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.CompressionLevel">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionLevel" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.ProcessIncomming">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessIncomming" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.ProcessOutgoing">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessOutgoing" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehaviorAttribute.CompressionThreshold">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionThreshold" filter=""/>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnvelopeBehavior">
            <summary>An operation behavior that reduces message size by serializing the message body into a compact envelope.</summary>
            <remarks>
            <para>
            The EnvelopeBehavior serializes the message body as a Fast Infoset document and compresses it using a selectable 
            compression algorithm. As a result, a compact binary representation of the original message body is produced. 
            This compact binary representation is referred to as an envelope.
            </para>
            <para>
            Applying the EnvelopeBehavior requires no changes to the binding configuration. The EnvelopeBehavior can be used to reduce 
            message size even when the binding cannot be modified.
            </para>
            <para>
            When message security is being used, the EnvelopeBehavior not only reduces message size but also increases processing 
            performance since the processing overhead incurred by message security is largely dependent on message size.
            </para>
            <para>
            Even though the use of the EnvelopeBehavior will almost always result in significantly reducing message size, the 
            final size of the message transmitted by the transport layer will be determined by the message encoding specified by the 
            binding being used. For the same envelope, a binding which uses a binary message encoding (such as 
            %Fast Infoset:Noemax.WCFX.Channels.FiMessageEncodingBindingElement% or WCF Binary) will provide relatively better 
            compactness and processing performance then a binding which uses a non-binary message encoding.    
            </para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnvelopeBehavior.CreateClientBehavior(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Initializes a new instance of %EnvelopeBehavior% for associated operation on the client side.
            </summary>
            <param name="operation">The operation to which the behavior will be associated.</param>
            <returns>A new instance of %EnvelopeBehavior%.</returns>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnvelopeBehavior.CreateDispatcherBehavior(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Initializes a new instance of %EnvelopeBehavior% for associated operation on the service side.
            </summary>
            <param name="operation">The operation to which the behavior will be associated.</param>
            <returns>A new instance of %EnvelopeBehavior%.</returns>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnvelopeBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.Boolean)">
            <summary>
            Initializes a new instance of EnvelopeBehavior associated to the specific operation.
            </summary>
            <param name="operation">And opperation to associate this behavior too.</param>
            <param name="dispatcher">Specifies whether behavior is getting created for dispatcher role.</param>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.CompressionThreshold">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionThreshold" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.CompressionMethod">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionMethod" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.CompressionLevel">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionLevel" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessIncomming">
            <summary>Gets and sets whether incomming messages need to be de-enveloped. If set too <b>true</b> behavior will attempt 
            to de-envelope incomming messages.</summary>
            <remarks>In case when this property is to <b>true</b> and message is actually not enveloped, no actions will be taken 
            and message will be forwarded for farther processing.</remarks>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessOutgoing">
            <summary>Gets and sets whether the outgoing messages will be enveloped.</summary>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior">
            <summary>
            Specifies that %Noemax.WCFX.Behaviors.EnvelopeBehavior% will be applied on every operation of the service endpoint.
            </summary>
            <remark>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remark>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.#ctor">
            <summary>
            Creates new instance of EnvelopeEndpointBehavior.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.CompressionMethod">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionMethod" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.CompressionThreshold">
            <contentfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionThreshold" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.CompressionLevel">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionLevel" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.ProcessIncomming">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessIncomming" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior.ProcessOutgoing">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessIncomming" filter=""/>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.MessageBodyEnvelope">
            <summary>
            Class used internaly by %Noemax.WCFX.Behaviors.EnvelopeBehavior% to write/read enveloped messages.
            </summary>    
            <remarks>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.MessageBodyEnvelope.#ctor">
            <summary>
            Creates new instance of MessageBodyEnvelope.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.MessageBodyEnvelope.Envelope(System.ServiceModel.Channels.Message)">
            <summary>
            Envelopes the message body and returns the enveloped message.
            </summary>
            <param name="message">The message to envelope.</param>
            <returns>The enveloped message.</returns>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.MessageBodyEnvelope.DeEnvelope(System.ServiceModel.Channels.Message)">
            <summary>
            De-envelopes the message body and returns de-enveloped message.
            </summary>
            <param name="message">The message to de-envelope.</param>
            <returns>De-enveloped message.</returns>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionMethod">
            <summary>
            Sets and gets the compression method to be used by the message envelope.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed, if compression is enabled. 
            </summary>
            <remarks>
            Setting this property to the value greater than 0 breakes backward compatibility with WCF-Xtension released prior 
            WCF-Xtensions v5.
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.ExportMetadataBehavior">
            <summary>
            Enables service to publish WSDL through WCF-Xtensions transport endpoints.
            </summary>
            <remarks>
            Enables export of WSDL through Noemax WCF-Xtentions provided transports. This
            behavior can be added to the <b>ServiceDescription.Behaviors</b> collection (or the
            <strong>&lt;serviceBehaviors&gt;</strong> configuration element) or assigned to
            service implementation class as an attribute.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.ExportMetadataBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
            <param name="endpoints"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">
            <summary>
            Defines an interface to be implemented by the custom message filter attribute 
            which can be used to modify the message dispatching behavior.
            </summary>
            <remarks>
            You can create an attribute that implements the
            <strong>IOperationMessageFilter</strong> interface and use it in combination with the
            <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
            QualifiedNameOperationSelectorAttribute</see> to provide the service with your own
            criteria for dispatching messages based on the content of their header or body. The
            <see cref="T:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase">OperationMessageFilterAttributeBase</see>
            class simplifies the creation of a custom message filter attribute. Prefer deriving
            this class to creating your own implementation of
            <strong>IOperationMessageFilter</strong>.
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para> 
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.IOperationMessageFilter.Match(System.ServiceModel.Channels.Message@)">
            <summary>
            When implemented, tries to associate the incoming message with the local
            operation.
            </summary>
            <returns>
            Returns <strong>true</strong> if message is associated to the local operation;
            otherwise <strong>false</strong>.
            </returns>
            <remarks>
            	<para>Within this method the filter can always evaluate the header of the message,
                while it can evaluate the body of the message only if it is buffered.
                Implementations should return <strong>true</strong> if the message is associated
                with the represented local operation, otherwise <strong>false</strong>.</para>
            	<para>The <em>message</em> is provided <strong>ByRef</strong>, thereby allowing
                substitution of the original message with a wrapper, buffered copy or any other
                instance of the <strong>Message</strong> class. In such cases the subsequent
                filters will receive the new substitute message regardless of what value this
                method returns.</para>
            </remarks>
            <param name="message">The incoming message to try to associate to the local operation.</param>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase">
            <summary>
            Represents a base class to be derived by the custom message filter attribute
            which can be used to modify the message dispatching behavior.
            </summary>
            <remarks>
            This class simplifies the creation of an attribute class that can be used in
            combination with the
            <see cref="T:Noemax.WCFX.Behaviors.CustomOperationSelectorAttribute">CustomOperationSelectorAttribute</see>
            and
            <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
            QualifiedNameOperationSelectorAttribute</see> to provide the service with your own
            criteria for dispatching messages based on the content of their header or body. Prefer
            deriving this class to creating your own implementation of
            <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>.
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para> 
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase.Match(System.ServiceModel.Channels.Message@)">
            <summary>
            When implemented in a derived class, it tries to associate the incoming message
            with the local operation.
            </summary>
            <returns>
            Returns <strong>true</strong> if the incoming message is associated to the local
            operation; otherwise <strong>false</strong>.
            </returns>
            <remarks>
            	<para>Within this method the filter can always evaluate the header of the message.
                While it can evaluate the body of the message only if it is buffered.
                Implementations should return <strong>true</strong> if the message is associated
                with the represented local operation, otherwise <strong>false</strong>.</para>
            	<para>The <em>message</em> is provided <strong>ByRef</strong>, this allows
                substitution of the original message with a wrapper, buffered copy or any other
                instance of the <strong>Message</strong> class. In such cases the subsequent
                filters will receive the new substitute message regardless of what value this
                method returns.</para>
            </remarks>
            <param name="message">The incoming message to try to associate to the local operation.</param>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implements the <strong>IOperationBehavior.AddBindingParameters</strong>
            method.
            </summary>
            <param name="operationDescription">A description of the associated operation contract.</param>
            <param name="bindingParameters">A collection of binding parameters.</param>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Implements the <strong>IOperationBehavior.ApplyClientBehavior</strong>
            method.
            </summary>
            <param name="operationDescription">A description of the associated operation.</param>
            <param name="clientOperation">
            An instance of <strong>ClientOperation</strong> used to modify or extend the
            execution behavior of a specific contract operation in a client object or client
            channel object.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Implements the <strong>IOperationBehavior.ApplyDispatchBehavior</strong>
            method.
            </summary>
            <param name="operationDescription">A description of the associated operation.</param>
            <param name="dispatchOperation">
            An instance of <strong>DispatchOperation</strong> used to modify or extend the
            execution behavior of a specific service operation in a service endpoint.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.OperationMessageFilterAttributeBase.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>Implements the <strong>IOperationBehavior.Validate</strong> method.</summary>
            <param name="operationDescription">A description of the associated operation.</param>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute">
            <summary>
            Associates the message to the local operation by evaluating the qualified name of
            the first element in the request body.
            </summary>
            <remarks>
            	<para>This class is used by
                <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
                QualifiedNameOperationSelectorAttribute</see> and
                <see cref="T:Noemax.WCFX.Behaviors.CustomOperationSelectorAttribute">CustomOperationSelectorAttribute</see>
                to dispatch messages based on the qualified name of the first element in the
                request body. It implements the
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>
                interface in order to attach itself into the service endpoint as an operation
                behavior. By analyzing the service contracts it automatically decides what
                qualified name the first element of message body is expected for the local
                operation. If the incoming message matches the qualified name represented by this
                attribute, it will be dispatched to the operation it represents.</para>
            	<para>During evaluation of the message body, the message <strong>does not</strong>
                get buffered. This behavior is compatible with the streaming transfer mode.</para>
            	<para>There is also ability to override the automatically obtained qualified name
                by setting the
                <see cref="P:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute.NamespaceURI">
                NamespaceURI</see> and
                <see cref="P:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute.LocalName">
                LocalName</see> properties. Unless you need to override it, you don't need to assign
                this attribute to the operation of the contract marked with
                <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
                QualifiedNameOperationSelectorAttribute</see> as this will be done
                automatically.</para>
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para> 
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute">QualifiedNameMessageFilterAttribute</see>
            class.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute.NamespaceURI">
            <summary>The namespace URI of the qualified name to match.</summary>
            <remarks>
            Set this property to the namespace URI of the qualified name to be matched by
            this message filter.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute.LocalName">
            <summary>The local name of the qualified name to match.</summary>
            <remarks>
            Set this property to the local name of the qualified name to be matched by this
            message filter.
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
            <summary>
            Provides an alternative mechanism of dispatching messages by the qualified name
            of the first element in the request body.
            </summary>
            <remarks>
            	<para wrap="">By applying this attribute either to the service implementation or to
                the contract definition you can make WCF dispatch messages based on the qualified
                name of the first element of the message body instead of the SOAP envelope action
                header.</para>
            	<para wrap="">This functionality is useful with POX messaging since it doesn't use
                a SOAP envelope, as well as when the service needs to dispatch SOAP messages that
                don't include a WS-Addressing header or don't specify a SOAPAction.</para>
            	<para wrap="">The <strong>QualifiedNameOperationSelectorAttribute</strong> is
                derived from
                <see cref="T:Noemax.WCFX.Behaviors.CustomOperationSelectorAttribute">CustomOperationSelectorAttribute</see>
                and can be used in combination with attributes that implement
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>.
                By implementing this interface you can define your own criteria for message
                dispatching. These attributes can be applied to methods that represent Web Services
                operations. The <strong>QualifiedNameOperationSelectorAttribute</strong> tries to
                match the message to any of the criteria specified in the
                <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute">
                QualifiedNameMessageFilterAttribute</see> or
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>
                attributes, otherwise it tries to use the default dispatching mechanism.</para>
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para>    
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.CustomOperationSelectorAttribute">
            <summary>
            Provides an alternative mechanism of dispatching messages by custom criteria.
            </summary>
            <remarks>
            	<para wrap="">By applying this attribute either to the service implementation or to
                the contract definition you can make WCF dispatch messages based on the custom
                criteria specified by
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>
                descendant attributes.</para>
            	<para wrap="">This functionality is useful with POX messaging since it doesn't use
                a SOAP envelope, as well as when the service needs to dispatch SOAP messages that
                don't include a WS-Addressing header or don't specify a SOAPAction.</para>
            	<para wrap="">The <strong>CustomOperationSelectorAttribute</strong> can be used in
                combination with custom attributes that implement
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>.
                By implementing this interface you can define your own criteria for message
                dispatching. These custom attributes can be applied to methods that represent Web
                Services operations. The <strong>CustomOperationSelectorAttribute</strong> tries to
                match the message to any of the criteria specified in the or
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>
                attributes, otherwise it tries to use the default dispatching mechanism.</para>
            	<para wrap="">
            	<see cref="T:Noemax.WCFX.Behaviors.QualifiedNameMessageFilterAttribute">
                QualifiedNameMessageFilterAttribute</see> also implements
                <see cref="T:Noemax.WCFX.Behaviors.IOperationMessageFilter">IOperationMessageFilter</see>
                and can be used with in combination with <strong>CustomOperationSelectorAttribute</strong> just 
                like with <see cref="T:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute">
                QualifiedNameOperationSelectorAttribute</see>.</para>
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para> 
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.CustomOperationSelectorAttribute.PropogateMessageFilters(System.ServiceModel.Description.ContractDescription)">
            <summary>
            When implemented propogates the custom message fileters into operations speificied by ContractDescriptions.
            </summary>
            <param name="contractDescription"></param>
        </member>
        <member name="M:Noemax.WCFX.Behaviors.QualifiedNameOperationSelectorAttribute.PropogateMessageFilters(System.ServiceModel.Description.ContractDescription)">
            <summary>
            Provides the operations of the specified contract with qualified name based message filters.
            </summary>
            <param name="contractDescription">The contract description.</param>
        </member>
        <member name="T:Noemax.WCFX.Channels.CompressionMethod">
            <summary>
            Defines the compression method to be used.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.Deflate">
            <summary>
            DEFLATE compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.GZip">
            <summary>
            GZIP compression algorithm.
            </summary>        
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.Lzma">
            <summary>
            LZMA compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.BZip2">
            <summary>
            BZip2 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.Lzf">
            <summary>
            LZF compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.Lzf3">
            <summary>
            LZF3 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionMethod.Lzf4">
            <summary>
            LZF4 compression algorithm.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.CompressionBindingElement">
            <summary>
            <para>This binding element specifies that compression will be applied on the messages exchanged through the channel.</para>
            </summary>
            <remarks>
            This binding element must be added to the <strong>CustomBinding</strong> before
            the message encoding binding element, or can be plugged into an existing and already
            configured binding using the
            <see cref="M:Noemax.WCFX.Channels.CompressionBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">PlugIn</see>
            method.
            </remarks>
            <example>
            	<para>[C#]</para>
            	<para>// Adding compression to custom binding</para>
            	<para>CustomBinding binding =new CustomBinding();</para>
            	<para>binding.Elements.Add(new CompressionBindingElement());</para>
            	<para>binding.Elements.Add(new FiMessageEncodingBindingElement());</para>
            	<para>binding.Elements.Add(new TcpTransportBindingElement());</para>
            	<para>[C#]</para>
            	<para>// Plugging in compression into standard binding</para>
            	<para>Binding binding = new WSHttpBinding();</para>
            	<para>CompressionBindingElement compression = new
                CompressionBindingElement();</para>
            	<para>binding = compression.PlugIn(binding);</para>
            </example>
        </member>
        <member name="T:Noemax.WCFX.IPluggableBindingElement">
            <summary>
            An interface that binding element implement in order to be pluggable into bindings through code and configuration files.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.IPluggableBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a custom binding based on the original binding, modified to use the implementation of <see cref="T:Noemax.WCFX.IPluggableBindingElement">IPluggableBindingElement</see>.
            </summary>
            <param name="binding">The original binding.</param>
            <returns>The customized binding modified to use the this instace of <see cref="T:Noemax.WCFX.IPluggableBindingElement">IPluggableBindingElement</see>.</returns>
            <overides>
            Creates a custom binding, modified to use the implementation 
            of %IPluggableBindingElement:T:Noemax.WCFX.IPluggableBindingElement%.
            </overides>
        </member>
        <member name="M:Noemax.WCFX.IPluggableBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a binding element collection based on the original binding element collection, modified to use the 
            implementation of <see cref="T:Noemax.WCFX.IPluggableBindingElement">IPluggableBindingElement</see>.
            </summary>
            <param name="bindingElementCollection">The original binding element collection.</param>
            <returns>The binding element collection that uses this instance <see cref="T:Noemax.WCFX.IPluggableBindingElement">IPluggableBindingElement</see>.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.CompressionBindingElement">CompressionBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.CompressionBindingElement">CompressionBindingElement</see>.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for 
            the factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>        
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.Clone">
            <summary>
            Creates a new <b>CompressionBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <strong>CompressionBindingElement</strong> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context"><para>The <strong>BindingContext</strong> for the binding element.</para></param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Injects the CompressionBindingElement into the provided binding element collection.
            </summary>
            <param name="bindingElementCollection">The binding element collection to have the CompressionBindingElement injected into it.</param>
            <returns>The binding element collection with the CompressionBindingElement injected into it.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new binding based on the provided binding with the CompressionBindingElement injected into it.
            </summary>
            <param name="binding">The binding on which the the new binding will be based.</param>
            <returns>
            The new binding which is based on the provided binding with the CompressionBindingElement injected into it.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.CompressionBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the 
            compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression 
            algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by 
            a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable 
            for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.CompressionBindingElement.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed. 
            </summary>
            <remarks>
            Setting this property to the value greater than 0 results in different message format being used by
            the message compression breaking backward compatibility with WCF-Xtension released prior 
            WCF-Xtensions v5.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.CompressionBindingElement.CompressionMethod">
            <summary>
            Gets and sets the algorithm used for compressing the message payload.
            </summary> 
        </member>
        <member name="T:Noemax.WCFX.Channels.CompressionStreamBindingElement">
            <summary>
            Respresents a stream upgrade that provides the transport level compression.
            </summary>
            <remarks>
            <para>This binding element should be used only with transports which support stream upgardes.</para>
            <para>
            The CompressionStreamBindingElement supports the use of an underlying stream upgrade. For example, a security
            stream upgrade can be used as an underlying stream upgrade. In such cases the CompressionStreamBindingElement 
            first upgrades the stream using the underlying stream upgrade and then applies its own upgrade.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.#ctor">
            <summary>Creates a new isntance of CompressionStreamBindingElement.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.#ctor(Noemax.WCFX.Channels.CompressionStreamBindingElement)">
            <summary>Creates a new isntance of CompressionStreamBindingElement.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.#ctor(System.ServiceModel.Channels.StreamUpgradeBindingElement)">
            <summary>Creates a new isntance of CompressionStreamBindingElement.</summary>
            <param name="innerUpgrade">The inner stream upgrade which will be applied to the transport stream,
            prior compression upgrade applied.</param> 
            <remarks>
            The CompressionStreamBindingElement supports the use of an underlying stream upgrade. For example,
            a security stream upgrade can be used as an underlying stream upgrade. In such cases the
            CompressionStreamBindingElement first upgrades the stream using the underlying stream upgrade 
            and then applies its own upgrade.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.BuildServerStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.Clone">
            <summary>Creates a copy of the binding element.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new binding based on the provided binding with the CompressionStreamBindingElement injected into it.
            </summary>
            <param name="binding">The binding on which the the new binding will be based.</param>
            <returns>
            The new binding which is based on the provided binding with the CompressionStreamBindingElement injected into it.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.CompressionStreamBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Injects the CompressionStreamBindingElement into the provided binding element collection.
            </summary>
            <param name="bindingElementCollection">The binding element collection to have the
            CompressionStreamBindingElement injected into it.</param>
            <returns>The binding element collection with the CompressionStreamBindingElement injected into it.</returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.CompressionStreamBindingElement.CompressionFormat">
            <summary>Gets and set the transport compression format used for compressing the transport stream.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.CompressionStreamBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer
            configures the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. 
            It is possible that minimum consumption of resources will be provided by a compression level other 
            than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most 
            suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different 
            compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.ContentNegotiationContextProperty">
            <summary>
            	<para>Allows to modify SmartHttpBinding behavior when sending and receiving
                messages and also provides additional information about message received by this
                binding.</para>
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.ContentNegotiationContextProperty.Name">
            <summary>The name of the property.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationContextProperty.#ctor(Noemax.WCFX.Channels.ContentNegotiationContextFactory)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationContextProperty">
            ContentNegotiationContextProperty</see>.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationContextProperty.ExtractFromMessage(System.ServiceModel.Channels.Message)">
            <summary>Extracts this property from the WCF <strong>Message</strong> object.</summary>
            <param name="message">
            The message where to extract this
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationContextProperty">ContentNegotiationContextProperty</see>
            from.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationContextProperty.CopyTo(Noemax.WCFX.Channels.ContentNegotiationContextProperty)">
            <summary>
            Copies all fields of this object into another instance of
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationContextProperty">
            ContentNegotiationContextProperty</see>.
            </summary>
            <param name="target">The message in which to plug message context.</param>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationContextProperty.Decompression">
            <summary>Compression factory used or to be used for this message decompression.</summary>
            <remarks>
            By reading this property within operation scope, you can get an instance of
               <see cref="T:Noemax.WCFX.Channels.ContentEncoding">IContentEncodingFactory</see>
               used to process message. If received message was not compressed this property is
               <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationContextProperty.Compression">
            <summary>Compression factory used/to be used for this message compression.</summary>
            <remarks>
            By setting this property within operation scope, you can set an instance of
               <see cref="T:Noemax.WCFX.Channels.ContentEncoding">IContentEncodingFactory</see>
               that will be used to compress the message. Set this property to
               <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if you wish to
               disable compression for this message.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.BZip2CompressionFactory.MediaType">
            <summary>Return the MIME type assigned to this compression.</summary>
            <value>Returns the "gzip".</value>
        </member>
        <member name="T:Noemax.WCFX.Channels.WCFXTrace">
            <summary>
            Provides a TraceSource for tracing the WCF-Xtensions related events.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.WCFXTrace.#ctor">
            <summary>
            Initializes a new instance of WCFXTrace.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.MessageStatisticsBindingElement">
            <summary>
            This binding element reports the size of messages produced by the message encoder specified by the binding. 
            It is used only for support purposes during development and may not be used in production systems.
            </summary>
            <remarks>
            The results reported by the MessageStatisticsBindingElement depend on the other binding elements specified by the
            binding and do not reflect the final size of the messages exchanged between the communicating sides.
            </remarks> 
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.CompressionBindingElement">CompressionBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.CompressionBindingElement">CompressionBindingElement</see>.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.#ctor(Noemax.WCFX.Channels.MessageStatisticsBindingElement)">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WCFX.Channels.MessageStatisticsBindingElement"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <span class="parameter">TChannel</span> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <span class="parameter">TChannel</span> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>        
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.Clone">
            <summary>
            Creates a new <b>CompressionBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <strong>CompressionBindingElement</strong> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context"><para>The <strong>BindingContext</strong> for the binding element.</para></param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong>, with this binding element plugged into the collection of
            binding elements.
            </summary>
            <returns>
            The <strong>BindingElementCollection</strong> based on the source <strong>BindingElementCollection</strong>
            with this binding element plugged into it.
            </returns>
            <param name="bindingElementCollection">
            The target <b>BindingElementCollection</b> to use as source to create the resulting
            <strong>CustomBinding</strong>.
            </param>        
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageStatisticsBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong>, with this binding element plugged into the collection of
            binding elements.
            </summary>
            <returns>
            The <strong>CustomBinding</strong> based on the source <strong>Binding</strong>
            with this binding element plugged into it.
            </returns>
            <param name="targetBinding">
            The target binding to use as source to create the resulting
            <strong>CustomBinding</strong>.
            </param>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageStatisticsBindingElement.LogFilename">
            <summary>The name of the output file.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageStatisticsBindingElement.Verbose">
            <summary>
            If set to <strong>true</strong> then the output file will contain detailed log of
            all messages exchanged during communication; otherwise only summary report.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.#ctor">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.#ctor(Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.Clone">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context">
            <para>The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for
            the binding element.</para>
            </param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>         
        </member>
        <member name="M:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="P:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.MessageVersion">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.JsonRpcMessageEncodingBindingElement.ReaderQuotas">
            <remarks>
            	<para>The complexity constraints protect against a class of denial of service (DOS)
                attacks that attempt to use message complexity to tie up endpoint processing
                resources. The properties that express these constraints and their default values
                are as follows:</para>
            	<ul>
                    <li><p>MaxDepth = 32</p></li>
                    <li><p>MaxStringContentLength = 8192</p></li>
                    <li><p>MaxArrayLength = 16384</p></li>
                    <li><p>MaxBytesPerRead = 4096</p></li>
                    <li><p>MaxNameTableCharCount = 16384</p></li>
                </ul>
            </remarks>
            <summary>
            Gets constraints on the complexity of XML messages that can be processed
            by endpoints configured with this binding element.
            </summary>         
        </member>
        <member name="T:Noemax.Xml.XmlFastInfosetDictionaryReader">
            <summary>
            The <c>XmlFastInfosetDictionaryReader</c> provides Fast Infoset data deserialization by delegating 
            calls to the <see cref="T:Noemax.FastInfoset.XmlFastInfosetReader">XmlFastInfosetReader</see>.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Create">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryReader.
            </summary>
            <returns>A new instance of XmlFastInfosetDictionaryReader.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Create(System.IO.Stream)">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryReader.
            </summary>
            <param name="input">The stream to read data from.</param>
            <returns>A new instance of XmlFastInfosetDictionaryReader.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Create(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryReader.
            </summary>
            <param name="input">The stream to read data from.</param>
            <param name="quotas">
            The <strong>XmlReaderSettings</strong> object used to configure the new
            <strong>XmlFastInfosetDictionaryReader</strong> instance. This value can be null.
            </param>
            <returns></returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.#ctor">
            <summary>Initializes a new instance of XmlFastInfosetDictionaryReader.</summary>        
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of XmlFastInfosetDictionaryReader.</summary>
            <param name="stream">The Fast Infoset encoded XML stream to read from.</param>        
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.#ctor(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
            <summary>Initializes a new instance of XmlFastInfosetDictionaryReader.</summary>
            <param name="stream">The Fast Infoset encoded XML stream to read from.</param>
            <param name="readerQuotas">
            	<para>The <strong>XmlDictionaryReaderQuotas</strong> object to apply to this
                reader.</para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.#ctor(System.Xml.XmlDictionaryReaderQuotas)">
            <summary>Initializes a new instance of XmlFastInfosetDictionaryReader.</summary>
            <param name="readerQuotas">
            	<para>The <strong>XmlDictionaryReaderQuotas</strong> object to apply to this
                reader.</para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.#ctor(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlDictionaryReaderQuotas)">
            <summary>Initializes a new instance of XmlFastInfosetDictionaryReader.</summary>
            <param name="stream">The Fast Infoset encoded XML stream to read from.</param>
            <param name="readerSettings">
            The <strong>XmlReaderSettings</strong> object used to configure the new
            XmlFastInfosetDictionaryReader instance.
            </param>
            <param name="readerQuotas">
            	<para>The <strong>XmlDictionaryReaderQuotas</strong> object to apply to this
                reader.</para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Init(System.IO.Stream)">
            <summary>
            Initializes an existing instance of XmlFastInfosetDictionaryReader and sets it to
            use specified stream.
            </summary>
            <param name="stream">The stream containing the Fast Infoset encoded XML data to read.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Init(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes an existing instance of XmlFastInfosetDictionaryReader and sets it to
            read specified buffer in memory.
            </summary>
            <param name="input">The buffer that contain Fast Infoset document.</param>
            <param name="offset">And index of the byte where to start reading data.</param>
            <param name="length">The total number of bytes available to read.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Clear">
            <summary><para>Clears the internal state of the reader.</para></summary>
            <remarks>
            Clears the internal state of the reader. After call to this method reader remains
            in uninitialized states. You must call
            <see cref="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Init(System.IO.Stream)">
            Init</see> method in order to reuse reader for reading another stream.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ResetState">
            <summary>
            Resets the <see cref="P:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadState">
            ReadState</see> to Initial.
            </summary>
            <remarks>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">The
                <span style="FONT-WEIGHT: bold">ResetState</span> method resets the
                <see cref="P:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadState">
                ReadState</see> to <span style="FONT-WEIGHT: bold">Initial</span>.</para>
            	<para class="Page4Paragraph2Text" style="BACKGROUND-COLOR: transparent">
            		<span style="FONT-WEIGHT: bold">ResetState</span> enables you to parse multiple
                Fast Infoset documents in a single stream. When you reach the end of a Fast Infoset
                document, you can call <span style="FONT-WEIGHT: bold">ResetState</span> to reset
                the state of the reader in preparation for the next Fast Infoset document.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Close">
            <summary>
            Changes the
            <see cref="P:Noemax.FastInfoset.XmlFastInfosetReader.ReadState">ReadState</see>
            to <strong>Closed</strong>.
            </summary>
            <remarks>
            If
            <see cref="P:System.Xml.XmlReaderSettings.CloseInput">CloseInput</see>
            is true, the underlying stream is going to be closed as well.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="i">The index of the attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute.
            </summary>
            <returns>The value of the specified attribute.</returns>
            <param name="name">The name of an attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.LookupNamespace(System.String)">
            <summary><para>Resolves the namespace prefix in the current element's scope.</para></summary>
            <returns>
            The namespace URI to which the prefix maps or a null reference (<b>Nothing</b> in
            Visual Basic) if no matching prefix is found.
            </returns>
            <param name="prefix">
            The prefix whose namespace URI you want to resolve. To match the default
            namespace, pass an empty string. This string does not have to be atomized.
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToAttribute(System.String,System.String)">
            <summary>Moves to the attribute specified by the local name and namespace URI.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToAttribute(System.String)">
            <summary>Moves to the attribute specified by the qualified name.</summary>
            <returns>
            	<strong>true</strong> if the attribute is found; otherwise, <b>false</b>. If
            <b>false</b>, the reader's position does not change.
            </returns>
            <param name="name">The qualified name of the attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToAttribute(System.Int32)">
            <summary>Moves to the attribute specified by the index.</summary>
            <overloads>Moves to the specified attribute.</overloads>
            <param name="i">The index of the attribute.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            	<strong>true</strong> if the reader is positioned on an attribute (the reader
            moves to the element that owns the attribute); <b>false</b> if the reader is not
            positioned on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns>
            	<strong>true</strong> if an attribute exists (the reader moves to the first
            attribute); otherwise, <b>false</b> (the position of the reader does not
            change).
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            	<strong>true</strong> if there is a next attribute; <b>false</b> if there are no
            more attributes.
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            	<strong>true</strong> if the next node was read successfully; <b>false</b> if
            there are no more nodes to read.
            </returns>
            <remarks>
            	<para>When an %XmlFastInfosetDictionaryReader% is first created and initialized, there
                is no information available. You must call <b>Read</b> to read the first
                node.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadAttributeValue">
            <summary>Reads the attribute value.</summary>
            <returns>
            	<strong>true</strong> if there are nodes to return. <b>false</b> if the reader is
            not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read.
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ResolveEntity">
            <summary>Throws a <strong>NotSupportedException</strong>.</summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBinHex">
            <summary>
            Reads binary or <strong>BinHex</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded BinHex bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs BinHex
                decoding and returns decoded bytes.</para>
            </remarks>       
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBase64">
            <summary>
            Reads binary or <strong>Base64</strong> encoded element content and returns
            decoded bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the contents of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If content is binary encoded Base64 bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs Base64
                decoding and returns decoded bytes.</para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadStartElement">
            <summary>
            Checks that the current node is an element and advances the reader to the next
            node.
            </summary>
            <overloads>
            Checks that the current node is an element and advances the reader to the next
            node.
            </overloads>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadStartElement(System.String,System.String)">
            <summary>
            Checks that the current content node is an element with the given localname
            <font color="black">and namespace and advances the reader to the next
            node.</font>
            </summary>
            <param name="localname">The local name of the element.</param>
            <param name="ns"><para>The namespace URI of the element.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadStartElement(System.String)">
            <summary>
            Checks that the current content node is an element with the given Name
            <font color="black">and advances the reader to the next node.</font>
            </summary>
            <param name="name"><para>The qualified name of the element.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadEndElement">
            <summary>
            Checks that the current content node is an end tag and advances the reader to the
            next node.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.IsStartElement">
            <summary>Tests if the current content node is a start element.</summary>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <overloads>Tests if the current content node is a start element.</overloads>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.IsStartElement(System.String,System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            <para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
            <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="localname">
            The string to match against the <c>LocalName</c> property of the element found.
            </param>
            <param name="ns">
            The string to match against the <c>NamespaceURI</c> property of the element found.
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.IsStartElement(System.String)">
            <summary>Tests if the current content node is a start element with specified name and namespace.</summary>
            <remarks>
            Calls %MoveToContent% and tests if the current content node is a start tag or empty
            element tag and if the local name and namespace of the element found matches the given
            arguments.
            </remarks>
            <returns>
            	<para><c>true</c> if %MoveToContent% finds a start tag or empty element tag; <c>false</c> if a node type other than
                <c>XmlNodeType.Element</c> was found.</para>
            </returns>
            <param name="name">
            The string to match against the <c>Name</c> property of the element
            found.
            </param>       
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.MoveToContent">
            <contentfrom cref="M:Noemax.FastInfoset.XmlFastInfosetReader.MoveToContent" filter=""/>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadFullStartElement(System.String,System.String)">
            <summary>
            Checks whether the current node is an element with the given <b>localName</b> and <b>namespaceUri</b> and
            advances the reader to the next node.
            </summary>
            <overloads>
            Checks whether the current node is an element and advances the reader to the next
            node.
            </overloads>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceUri"><para>The namespace URI of the element.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadFullStartElement(System.String)">
            <summary>
            Checks whether the current node is an element with the given <b>name</b> and advances the reader to the next node.
            </summary>
            <param name="name"><para>The qualified name of the element.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementString(System.String)">
            <summary>
            Checks that the name <font color="black">of the element found matches the given
            string before reading a text-only element.</font>
            </summary>
            <returns>
            	<para>The text contained in the element that was read. An empty string if the
                element is empty (<span class="code">&lt;item&gt;&lt;/item&gt;</span> or
                <span class="code">&lt;item/&gt;</span>).</para>
            </returns>
            <param name="name">The name to check.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementString(System.String,System.String)">
            <summary>
            Checks that the localname <font color="black">and namespace of the element found
            matches the given strings before reading a text-only element.</font>
            </summary>
            <returns>
            	<para>The text contained in the element that was read. An empty string if the
                element is empty (<span class="code">&lt;item&gt;&lt;/item&gt;</span> or
                <span class="code">&lt;item/&gt;</span>).</para>
            </returns>
            <param name="localname">The local name to check.</param>
            <param name="ns">The namespace URI to check.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded element content and returns the decoded
            bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">This method reads the start tag, the content of
                the element, and moves the reader past the end element tag. It expands entities and
                ignores processing instructions and comments. The element can only contain simple
                content. That is, it cannot have child elements.</para>
            	<para class="Page4Paragraph2Text">If the content is binary encoded Base64 bytes,
                the reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If the content is text, the reader performs
                Base64 decoding and returns the decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>        
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
            <summary>Reads the element content as the requested type.</summary>
            <overloads>Reads the element content as the requested type.</overloads>
            <returns><para>The element content converted to the requested typed object.</para></returns>
            <param name="returnType">The type of the value to be returned.</param>
            <param name="namespaceResolver">
            An <strong>IXmlNamespaceResolver</strong> object that is used to resolve any
            namespace prefixes related to type conversion.
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the element content as the requested type.
            </summary>
            <returns><para>The element content converted to the requested typed object.</para></returns>
            <param name="returnType">The type of the value to be returned.</param>
            <param name="namespaceResolver">
            An <see cref="T:System.Xml.IXmlNamespaceResolver">IXmlNamespaceResolver</see> object that is used to resolve any namespace
            prefixes related to type conversion.
            </param>
            <param name="localName"><para>The local name of the element.</para></param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>Converts a node's content to an array of Base64 bytes.</summary>
            <returns><para>The number of bytes written to the buffer.</para></returns>
            <param name="buffer">
            The buffer into which to copy the resulting text. This value cannot be
            <font color="black"><span class="keyword"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span><span class="nu">a null
            reference (<span class="keyword">Nothing</span> in Visual Basic)</span>.</font>
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBoolean(System.String,System.String)">
            <summary>Converts an element's content to a Boolean<font color="black">.</font></summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDateTime(System.String,System.String)">
            <summary>Converts an element's content to a DateTime<font color="black">.</font></summary>
            <returns><para>The element contents as a DateTime <font color="black">object.</font></para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDecimal(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a Decimal
            <font color="black">object.</font>
            </summary>
            <returns><para>The element content as a Decimal <font color="black">object.</font></para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDouble(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a
            double-precision floating-point number.
            </summary>
            <returns><para>The element content as a double-precision floating-point number.</para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsFloat(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a
            single-precision floating-point number.
            </summary>
            <returns><para>The element content as a single-precision floating point number.</para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsInt(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a 32-bit
            signed integer.
            </summary>
            <returns><para>The element content as a 32-bit signed integer.</para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsLong(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a 64-bit
            signed integer.
            </summary>
            <returns><para>The element content as a 64-bit signed integer.</para></returns>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The local name of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsString(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the
            current element, then reads the current element and returns the contents as a String
            <font color="black">object.</font>
            </summary>
            <returns><para>The element content as a String <font color="black">bject.</font></para></returns>
            <param name="localName"><para>The local name of the element.</para></param>
            <param name="namespaceURI">The namespace URI of the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsString">
            <summary>
            Reads the current element and returns the contents as a <font color="black">
            String object.</font>
            </summary>
            <returns>
            	<para>The element content as a <font color="black">String</font>.</para>
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDouble">
            <summary>
            Reads the current element and returns the content as a double-precision
            floating-point number.
            </summary>
            <returns>The element content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsBoolean">
            <summary>Reads the current element and returns the content as a boolean value.</summary>
            <returns>The element content as a boolean value.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDateTime">
            <summary>
            Reads the node content at the current position as a DateTime value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsDecimal">
            <summary>
            Reads the node content at the current position as a decimal value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsFloat">
            <summary>
            Reads the current element and returns the content as a single-precision
            floating-point number.
            </summary>
            <returns>The element content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsGuid">
            <summary>
            Converts a node's content to <font color="black"><span class="keyword">guid</span>.</font>
            </summary>
            <returns>
            	<para>The <font color="black"><span class="keyword">guid</span> representation of
                node's content.</font></para>
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsInt">
            <summary>
            Reads the current element and returns the content as a 32-bit signed
            integer.
            </summary>
            <returns>The element content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsLong">
            <summary>
            Reads the current element and returns the content as a 64-bit signed
            integer.
            </summary>
            <remarks>
            	<para>This method reads the start tag, the content of the element, and moves the
                reader past the end element tag. It expands entities and ignores processing
                instructions and comments. The element can only contain simple content. That is, it
                cannot have child elements.</para>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
            <returns>The element content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsDateTime">
            <summary>
            Reads the node content at the current position as a DateTime value. 
            </summary>
            <returns>The element content as a decimal value.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsTimeSpan">
            <summary>Converts an element's content to a TimeSpan<font color="black">.</font></summary>
            <returns>The node's content represented as a TimeSpan.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementContentAsUniqueId">
            <summary>Converts an element's content to a unique identifier.</summary>
            <returns><para>The node's content represented as a unique identifier.</para></returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadElementString">
            <summary>Reads a text-only element.</summary>
            <returns>
            	<para>The text contained in the element that was read. An empty string if the
                element is empty (<span class="code">&lt;item&gt;&lt;/item&gt;</span> or
                <span class="code">&lt;item/&gt;</span>).</para>
            </returns>
            <overloads>Reads a text-only element.</overloads>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or BinHex encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If content is binary encoded BinHex bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs BinHex
                decoding and returns decoded bytes.</para>
            </remarks>
            <param name="buffer">
            The buffer into which to copy the resulting bytes. This value cannot be a null
            reference (<b>Nothing</b> in Visual Basic).
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If content is binary encoded Base64 bytes block,
                reader returns the bytes read.</para>
            	<para class="Page4Paragraph2Text">If content is text, reader performs Base64
                decoding and returns decoded bytes.</para>
            </remarks>
            <param name="buffer">
            	<para>The buffer into which to copy the resulting bytes. This value cannot be a
                null reference (<b>Nothing</b> in Visual Basic).</para>
            </param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">
            The maximum number of bytes to copy into the buffer. The actual number of bytes
            copied is returned from this method.
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsBase64">
            <summary>
            Reads the binary or Base64 encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
            <summary>Converts a node's content to a specified type.</summary>
            <param name="type">The Type of the value to be returned.</param>
            <param name="namespaceResolver">
            An IXmlNamespaceResolver <font color="black">object that is used to resolve any
            namespace prefixes related to type conversion. For example, this can be used when
            converting an XmlQualifiedName object to an <span class="code">xs:string</span>. This
            value can be a null reference.</font>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsBinHex">
            <summary>
            Reads the binary or BinHex encoded content at the current position and returns
            the decoded binary bytes.
            </summary>
            <returns>The number of bytes written to the buffer.</returns>
            <remarks>
            	<para class="Page4Paragraph2Text">If the content is binary encoded BinHex bytes,
                the reader returns the bytes read. If the content is text, the reader performs
                BinHex decoding and returns the decoded bytes.</para>
            </remarks>        
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsDouble">
            <summary>
            Reads the content at the current position as a double-precision floating-point
            number.
            </summary>
            <returns>The content as a double-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded double-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a double-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsBoolean">
            <summary>Reads the content at the current position as a boolean value.</summary>
            <returns>The content as a boolean value.</returns>
            <remarks>
            	<para>If the content is a binary encoded boolean value<font color="black">, the
                reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a boolean value.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsFloat">
            <summary>
            Reads the content at the current position as a single-precision floating point
            number.
            </summary>
            <returns>The content as a single-precision floating-point number.</returns>
            <remarks>
            	<para>If the content is a binary encoded single-precision floating-point
                number<font color="black">, the reader returns the value read. If the content is of
                any other type, the reader attempts to convert it to a single-precision
                floating-point number.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsInt">
            <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
            <returns>The content as a 32-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 32-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 32-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsLong">
            <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
            <returns>The content as a 64-bit signed integer.</returns>
            <remarks>
            	<para>If the content is a binary encoded 64-bit signed integer<font color="black">,
                the reader returns the value read. If the content is of any other type, the reader
                attempts to convert it to a 64-bit signed integer.</font></para>
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsDecimal">
            <summary>
            Reads the text content at the current position as a decimal value<font color="black">.</font>
            </summary>
            <returns><para>The text content as a decimal <font color="black">value.</font></para></returns>
            <remarks><para></para></remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsGuid">
            <summary>
            Converts a node's content to <font color="black"><span class="keyword">guid</span>.</font>
            </summary>
            <returns>
            	<para>The <font color="black"><span class="keyword">guid</span> representation of
                node's content.</font></para>
            </returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadContentAsString">
            <summary>Reads the text content at the current position as a string.</summary>
            <returns>
            The node content as <see cref="T:System.String">String</see> object.
            </returns>
            <remarks>
            Implements <see cref="M:System.Xml.XmlReader.ReadContentAsString"> XmlReader.ReadContentAsString</see>.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadString">
            <summary>Reads the contents of the current node into a string.</summary>
            <returns><para>A string that contains the contents of the current node.</para></returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryReader.SetVocabulary(Noemax.FastInfoset.ReaderVocabulary)">
            <summary>Specifies an initial vocabulary to be used while reading the data.</summary>
            <param name="vocabulary">ParserVocabulary object to use as <em>initial</em> vocabulary.</param>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.Settings">
            <contentfrom cref="P:Noemax.FastInfoset.XmlFastInfosetReader.Settings" filter=""/>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.Quotas">
            <summary>
            Gets the quota values that apply to the current instance of this class.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.CanReadBinaryContent">
            <summary>
            Gets a value indicating whether this reader can parse binary content. 
            Always returns <strong>true</strong>.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.AttributeCount">
            <contentfrom cref="P:Noemax.FastInfoset.XmlFastInfosetReader.AttributeCount" fileter=""/>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.HasValue">
            <summary>
            Gets a value indicating whether the current node can have a Value.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable">XmlNameTable</see> associated with this reader.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryReader.VocabularyProvider">
            <summary>
            Gets and sets the %IVocabularyProvider% for resolving external vocabulary URI, when it is encountered within a document.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">
            <summary>
            The binding element that enables the use of BasicHttpBinding with an SSL/TLS accelator proxy.
            </summary>
            <remarks>
            	<para>When the BasicHttpBinding security mode is set to TransportWithMessageCredential, BasicHttpBinding
            enforces the use of transport security which introduces a lot of exrta overhead if the servers are proxied by 
            and SSL/TLS accelerator proxy. 
                </para>
                <para>When this binding element is plugged into the BasicHttpBinding, it enables the server to avoiding extra 
            overhead and receive client messages and credentials from the SSL/TLS accelerator proxy over an unsecured connection.
                </para>
                <para>It should be used <b>only on the server side</b>, when transport security is provided by an SSL/TLS 
            accelerator proxy.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">
            HttpsViaProxyTransportBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">
            HttpsViaProxyTransportBindingElement</see>.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.#ctor(Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">
            HttpsViaProxyTransportBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">
            HttpsViaProxyTransportBindingElement</see>.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.Clone">
            <summary>
            Creates a new <strong>HttpsViaProxyTransportBindingElement</strong> object
            initialized from the current one.
            </summary>
            <returns>
            An <b>HttpsViaProxyTransportBindingElement</b> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context">
            <para>The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for
            the binding element.</para>
            </param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong> object, with this binding element plugged into it.
            </summary>
            <param name="binding">
            The binding to be used as source for the new <strong>CustomBinding</strong>,
            which will have this binding element plugged into it.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>BindingElementCollection</strong> based on the specified source,
            with this binding element plugged into it.
            </summary>
            <param name="collection">
            The collection to be used as source for the new <strong>BindingElementCollection</strong>,
            which will have this binding element plugged into it.
            </param>
        </member>
        <member name="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">
            <summary>
            Provides HTTP transport with standard HTTP compression and support of multiple message encodings on the same SOAP/REST endpoint.
            </summary>
            <remarks>
            <para>When this binding element is added to the binding, it provides the HTTP transport with a collection of
            alternative message encodings and a standard HTTP compression using GZIP, DEFLATE, LMZA, LZF or LZF3 compression methods.</para> 
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see>
            class.
            </summary>   
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.#ctor(Noemax.WCFX.Channels.ContentNegotiationBindingElement)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see>
            class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see>
            class.
            </overloads>        
            <remarks>
            <para>This method is a copy constructor used to clone the binding element.</para>
            </remarks>
            <param name="source">
            	<para>An instance of the
                <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see>
                class.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Gets a property from the specified BindingContext.
            </summary>
            <returns>
            The property from the specified BindingContext.
            </returns>
            <param name="context">
            A BindingContext.
            </param>
            <typeparam name="T">The property to get.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.Clone">
            <summary>Creates a copy of the current binding element.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Creates a channel factory that can be used to create a channel. 
            </summary>
            <typeparam name="TChannel">
            Type of channel factory.
            </typeparam>
            <param name="context">
            BindingContext members that describe bindings, behaviors, contracts and other information required to create 
            the channel factory.
            </param>
            <returns>
            A channel factory of the specified type. 
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Creates a channel listener of the specified type.
            </summary>
            <returns>
            A channel listener of the specified type.
            </returns>
            <param name="context">
            BindingContext members that describe bindings, behaviors, contracts and other
            information required to create the channel listener.
            </param>
            <typeparam name="TChannel">Type of channel listener.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the binding element can build a channel
            factory for a specific type of channel.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new binding based on the provided binding with the ContentNegotiationBindingElement injected into it.
            </summary>
            <param name="binding">The binding on which the the new binding will be based.</param>
            <returns>
            The new binding which is based on the provided binding with the ContentNegotiationBindingElement injected into it.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Injects the ContentNegotiationBindingElement into the provided binding element collection.
            </summary>
            <param name="bindingElementCollection">The binding element collection to have the ContentNegotiationBindingElement
            injected into it.</param>
            <returns>The binding element collection with the ContentNegotiationBindingElement injected into it.</returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.MessageEncodings">
            <summary>
            A collection of MessageEncodingBindingElement used for dynamic content
            negotiation as set of alternative message encodings.
            </summary>
            <remarks>
            Collection should be populated with
            <strong>MessageEncodingBindingElement</strong> according to the rules specified in
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see>.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.MessageEncodingMode">
            <summary>Gets and sets the message encoding mode to be used by this binding.</summary>     
            <para>The default value of this property is <c>SmartMessageEncodingMode.Pessimistic</c>.</para>        
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CompressionMode">
            <summary>Gets and sets the compression mode to be used by this binding.</summary>
            <remarks>
            <para> The default value of this property is <strong>SmartCompressionMode.Pessimistic</strong>. </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed, if compression is
            enabled.
            </summary>
            <remarks>
            <para>Specifies the minimal size of the payload that channel will compress. If the size of the payload 
            is lower than specified value, compression will not be applied to it.</para>
            <para>The default value of this property is 0, all payload will be compressed irrespective of it's size.</para>
            <para>Note : If compression threshold is set to the value greater than 0, than a buffer of equivalent 
            size is required to be allocated for buffering data prior compression.</para>
            <para>This property is supported only when message compression is enabled and the transport used is LiteHTTP.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.ZlibFormat">
            <summary>Specified whether the RFC 1950 Zlib format is used for DEFLATE compression.</summary>        
        </member>
        <member name="P:Noemax.WCFX.Channels.ContentNegotiationBindingElement.ForceStreamedCompression">
            <summary>
            If set to <strong>true</strong> the compression and decompression of the message payload will always
            be performed in streamed mode, irrespecitve of the transport settings.
            </summary>
            <remarks>
            Setting this property to <strong>true</strong> can improve performace and reduce memory consumption in cases
            when large payloads getting exchanged through the channel. However, some bindings might not support streamed 
            compression, in such cases this property must be set to <strong>false</strong>.
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.LzmaCompressionFactory.MediaType">
            <summary>Return the MIME type assigned to this compression.</summary>
            <value>Returns the "gzip".</value>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.RpcEndpointBehavior">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement">
            <summary>
            Represents the binding element used to specify an HTTPS transport with dynamic
            content negotiation for transmitting messages.
            </summary>
            <remarks>
            	<para>This transport extends functionality of <see cref="T:Noemax.WCFX.Channels.LiteHttpTransportBindingElement">LiteHttpTransportBindingElement</see>
                with secure HTTPS transport protocol.</para>
            	<para><span><span><span>This HTTP implementation is independent from system
                provided HTTP implementation included in .NET and does not depend from external
                services.</span></span></span></para>
            	<para>The security parameters such as authentication mode and certificates for this
                transport should be provided through the <span id="nsrTitle"><strong>ClientCredentials</strong> class for client side and the
                <strong>ServiceCredentials</strong> class on the service side, just like for
                <span id="nsrTitle"><strong>SslStreamSecurityBindingElement</strong>
                class.</span></span></para>
                <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.LiteHttpTransportBindingElement">
            <summary>
            Represents the binding element used to specify an HTTP transport with dynamic content negotiation for 
            transmitting messages. 
            </summary>
            <remarks>
            	<para>This transport use the standard dynamic content negotiation capabilities of
                the HTTP protocol, that allows to transparently negotiate the message encoding and
                content encoding during communication. These enables channel to support efficient
                message encoding formats as well as payload compression without breaking
                interoperability with clients and servers that does not support HTTP dynamic
                content negotiation.</para>
            	<para>Most of existing web servers support dynamic content negotiation and payload
                compression, this transport can utilize this capabilities and it is fully
                interoperable with any other HTTP bindings in WCF or any standard HTTP
                implementation.</para>
            	<para><b>LiteHttpTransportBindingElement</b> is used in the same way as
                HttpTransportBindingElement but also can be provided with 
                <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see>
                which contains the set of additional message encodings to use during
                communication.</para>
            	<para>This HTTP implementation is independent from system provided HTTP
                implementation included in .NET and does not depend from external
                services.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <b>LiteHttpTransportBindingElement</b>
            class.
            </summary>
            <overloads>
            Initializes a new instance of the <b>LiteHttpTransportBindingElement</b>
            class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.#ctor(Noemax.WCFX.Channels.LiteHttpTransportBindingElement)">
            <summary>
            Initializes a new instance of the <b>LiteHttpTransportBindingElement</b>
            class.
            </summary>
            <remarks><para>This method is a copy constructor used to clone the binding element.</para></remarks>
            <param name="source">
            	<para>An instance of the
                <see cref="T:Noemax.WCFX.Channels.LiteHttpTransportBindingElement">LiteHttpTransportBindingElement</see>
                class.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Creates a channel factory that can be used to create a channel. 
            </summary>
            <typeparam name="TChannel">Type of channel factory.</typeparam>
            <param name="context"><b>BindingContext</b> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
            <returns>A channel factory of the specified type.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Creates a channel listener of the specified type. 
            </summary>
            <typeparam name="TChannel">
            Type of channel listener.
            </typeparam>
            <param name="context"><b>BindingContext</b> members that describe bindings, 
            behaviors, contracts and other information required to create the channel listener.</param>
            <returns> <b>true</b> if a channel listener can be built; otherwise <b>false</b>. </returns>        
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Determines whether a channel listener of the specified type can be built. 
            </summary>
            <typeparam name="TChannel">Type of channel listener.</typeparam>
            <param name="context">Type of channel listener.</param>
            <returns> <b>true</b> if a channel listener can be built; otherwise <b>false</b>. </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Determines whether a channel factory of the specified type can be built. 
            </summary>
            <typeparam name="TChannel">Type of channel factory.</typeparam>
            <param name="context">Type of channel factory.</param>
            <returns> <b>true</b> if a channel factory can be built; otherwise <b>false</b>. </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.Clone">
            <summary>Creates a copy of the current binding element.</summary>
            <returns>
            A copy of the current binding element. 
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new binding based on the provided binding with the LiteHttpTransportBindingElement injected into it.
            </summary>
            <param name="binding">The binding on which the the new binding will be based.</param>
            <returns>
            The new binding which is based on the provided binding with the LiteHttpTransportBindingElement injected into it.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Injects the LiteHttpTransportBindingElement into the provided binding element collection.
            </summary>
            <param name="bindingElementCollection">The binding element collection to have the LiteHttpTransportBindingElement injected into it.</param>
            <returns>The binding element collection with the LiteHttpTransportBindingElement injected into it.</returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>        
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.UseDefaultWebProxy">
            <summary>
            Gets or sets a value that indicates whether the auto-configured HTTP proxy
            of the system should be used, if available.
            </summary>
            <remarks>
            !SILVERLIGHT
            </remarks> 
            <returns>
            true if the auto-configured HTTP proxy of the system should be used, if available;
            otherwise, false. The default value is true.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.ProxyAddress">
            <summary>The address of HTTP proxy that should be used for establishing HTTP connection.</summary>
            <remarks>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>        
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.KeepAliveEnabled">
            <summary>
            Gets or sets a value indicating whether to make a persistent connection to a service endpoint. 
            </summary>
            <remarks>
            Set this property to true to send a Connection HTTP header with the value Keep-alive. A client 
            uses this property to indicate a preference for persistent connections. When this property is 
            true, the connection that the client makes to a service endpoint is persistent if the service 
            endpoint supports that.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.Scheme">
            <summary>
            Gets the URI scheme for the transport. 
            </summary>
            <remarks>
            This property is used to validate bindings against base addresses.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.AuthenticationScheme">
            <summary>
            Gets or sets the authentication scheme used to authenticate client requests being processed by an HTTP listener.
            </summary>
            <remarks>
            The authentication scheme can only be set once.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.ProxyAuthenticationScheme">
            <summary>
            Gets or sets the authentication scheme used to authenticate client requests being processed by an HTTP proxy.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </summary>      
            <remarks>
            When proxy authentication is used,  a client credentials specified in a ClientCredentials object will 
            be used to authenticate with a proxy, rather than target endpoint.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.EnableGetWSDL">
            <summary>Gets and sets if transport should support WSDL export through HTTP GET requests.</summary>
            <remarks>
            In order to configure service to export WSDL through LiteHttp transport
            application should use <see cref="T:Noemax.WCFX.Behaviors.ExportMetadataBehavior">ExportMetadataBehavior</see>
            in combination with this property. If this EnableGetWsdl property is set to
            <b>true</b>, the transport will respond with web service WSDL on HTTP GET request to
            base address + "?wsdl" e.g. http://somehost/someservice?wsdl.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.AllowCookies">
            <summary>
            Gets or sets a value that indicates whether the client accepts cookies 
            and propagates them on future requests.
            </summary>
            <remarks>
            This property is provided as a convenience for interacting with ASMX Web services that use cookies to make sure that the cookies returned from the server are automatically copied to all future client requests for that service.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </remarks>
            <value>
            <b>true</b> if cookies are allowed; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpTransportBindingElement.InactivityTimeoutMinutes">
            <summary>
            Gets and sets a number of minutes that the server should wait prior discarding an inactive client connection.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <b>LiteHttpsTransportBindingElement</b>
            class.
            </summary>
            <overloads>
            Initializes a new instance of the <b>LiteHttpsTransportBindingElement</b>
            class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.#ctor(Noemax.WCFX.Channels.LiteHttpsTransportBindingElement)">
            <summary>
            Initializes a new instance of the <b>LiteHttpsTransportBindingElement</b>
            class.
            </summary>
            <requirements><para>This method is a copy constructor used to clone the binding element.</para></requirements>
            <param name="source">
            	<para>An instance of the
                <see cref="T:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement">LiteHttpsTransportBindingElement</see>
                class.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Gets a property from the specified <b>BindingContext</b>.</summary>
            <param name="context">
            	<list type="termdef">
            		<item>
            			<term>A <strong>BindingContext</strong>.</term>
            		</item>
            	</list>
            </param>
            <typeparam name="T">The property to get.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Determines whether a channel factory of the specified type can be built. 
            </summary>
            <typeparam name="TChannel">Type of channel factory.</typeparam>
            <param name="context">Type of channel factory.</param>
            <returns> <b>true</b> if a channel factory can be built; otherwise <b>false</b>. </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Determines whether a channel listener of the specified type can be built. 
            </summary>
            <typeparam name="TChannel">Type of channel listener.</typeparam>
            <param name="context">Type of channel listener.</param>
            <returns> <b>true</b> if a channel listener can be built; otherwise <b>false</b>. </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.Clone">
            <summary>
            Overridden. Creates a copy of the current binding element. 
            </summary>
            <returns>
            A copy of the current binding element. 
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.Scheme">
            <summary>
            Gets the URI scheme for the transport. 
            </summary>
            <remarks>
            This property is used to validate bindings against base addresses.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement.RequireClientCertificate">
            <summary>
            Gets or sets a value that indicates whether SSL client authentication is required.
            </summary>
            <value>
            <b>true</b> if SSL client authentication is required; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
        </member>
        <member name="M:Noemax.WCFX.Channels.ContentNegotiationContextFactory.SelectEncoder(System.String)">
            <summary>
            Selects prefered encoding according to "accept" header of HTTP request or 
            any string containing various encoding Media-type in comma separated list.
            </summary>
            <remarks>
            Selects prefered encoding according to "accept" header of HTTP request or 
            any string containing various encoding Media-type in comma separated list.
            Encoding media-types should be sorted according to the preference, with most 
            prefered encoding specified first.
            </remarks>
            <param name="accept">
            The HTTP Accept header or any string containing comma separated
            list of content-types representing different encodings. 
            </param>
            <returns>MessageEncoder object that represents preffered encoding</returns>
        </member>
        <member name="T:Noemax.WCFX.Channels.NoemaxTlsAuthentication">
            <summary>
            Provides methods and properties for controling TLS authentication.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.NoemaxTlsAuthentication.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Noemax.WCFX.Channels.NoemaxTlsAuthentication"/>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.NoemaxTlsAuthentication.Connect(System.IO.Stream,System.Uri)">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.DefaultServiceCertificate">
            <summary>
            Gets and sets the X509Certificate that remote endpoint is expected to provide during the SSL/TLS handshake.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.ClientCertificate">
            <summary>
            Gets and sets the X509Certificate that client is expected to provide during the SSL/TLS handshake.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.ServiceCertificateValidator">
            <summary>
            Gets and sets the callback to be called during validation of X509Certificate provided by a remote endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.TargetHost">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.NoemaxTlsAuthentication.CheckCertificateRevocation">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Channels.BasicSoapTcpBinding">
            <summary>WS-I Basic Profile 1.1 conformant SOAP/TCP binding.</summary>
            <remarks>
            BasicSoapTcpBinding uses SOAP/TCP as duplex and stateful Fast Infoset as message encoding. 
            Optionally, it can compress the payload using a selectable compression algorithm.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.BasicSoapTcpBinding.#ctor">
            <summary>
            Initializes a new instance of the <strong>BasicSoapTcpBinding</strong>
            class.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.BasicSoapTcpBinding.CreateTransportBindingElement">
            <summary>
            Creates a transport binding element.
            </summary>
            <returns>The transport binding element.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.BasicSoapTcpBinding.GetMessageVersion">
            <summary>
            Returns the message version to be used by the binding.
            </summary>
            <returns>Returns the message version to be used by the binding.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.BasicSoapTcpBinding.CreateBindingElements">
            <summary>Creates a collection with the binding elements for the binding.</summary>
            <returns>
            	<para>The collection of %System.ServiceModel.Channels.BindingElement% that makes up the binding.</para>
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.Scheme">
            <summary>
            Returns the URI scheme for the transport.
            </summary>
            <value>
            Returns the URI scheme for the transport "soap.tcp".
            </value>        
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.Compression">
            <summary>Enables or disables GZIP payload compression.</summary>
            <value>
            	<b>true</b> to enable compression of message payload; otherwise <b>false</b>;
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.CompressionMethod">
            <summary>
            Gets and sets the algorithm used for compressing the message payload
            </summary> 
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>      
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.MaxReceivedMessageSize">
            <summary>
            Gets or sets the maximum size for a received message that is processed by the binding.
            </summary>
            <value>
            The maximum size (in bytes) for a received message that is processed by the binding. The default value is 65,536 bytes.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.MaxBufferSize">
            <summary>
            Gets or sets the maximum number of bytes that are used to buffer incoming messages in memory.
            </summary>
            <value>
            The maximum number of bytes that are used to buffer incoming messages in memory. The default value is 65,536 bytes.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum number of bytes that are used to buffer incoming messages in memory.
            </summary>
            <value>
            If you receive more data than you can buffer, the data that exceeds the buffer size remains 
            on the underlying socket until your buffer has room for the rest of the data.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.WriterProfile">
            <contentfrom cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.Profile" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.MaxVocabularyStringLength">
            <contentfrom cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringLength" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.PermitStateful">
            <contentfrom cref="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.PermitStateful" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Channels.BasicSoapTcpBinding.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>        
        </member>
        <member name="T:Noemax.WCFX.Channels.DuplexSoapTcpBinding">
            <summary>Duplex SOAP/TCP binding.</summary>
            <remarks>
            <c>DuplexSoapTcpBinding</c> uses SOAP/TCP as duplex transport and stateful Fast Infoset as message encoding.
            Optionally, it can compress the payload using a selectable compression algorithm.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.DuplexSoapTcpBinding.#ctor">
            <summary>
            Creates new instance of BasicSoapTcpDuplexBinding. 
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.DuplexSoapTcpBinding.CreateTransportBindingElement">
            <summary>
            Creates the SoapTcpDuplexTransportBindingElement transport to be used by BasicSoapTcpDuplexBinding.
            </summary>
            <returns>
            The instance of SoapTcpDuplexTransportBindingElement.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.DuplexSoapTcpBinding.GetMessageVersion">
            <summary>
            Returns the message version to be used by the binding.
            </summary>
            <returns>Returns the message version to be used by the binding.</returns>
        </member>
        <member name="T:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement">
            <summary>
            Represents the binding element used to specify the SOAP/TCP transport for transmitting messages. 
            </summary>
            <remarks>
            <para>
            SOAP/TCP is a specification by Sun Microsystems that describes an efficient and lightweight 
            protocol for transmitting Web services messages over a TCP connection.</para>
            <para>
            The SOAP/TCP transport included in WCF-Xtensions provides excellent performance when used with 
            the Fast Infoset stateful message encoding which maintains the Fast Infoset vocabulary 
            during a connection. This stateful message encoding eliminates the need to build a new vocabulary 
            with every message, thus minimizing FI message size and maximizing FI processing performance.</para>
            <para>
            With the Noemax SOAP/TCP you can use any %Noemax.WCFX.Channels.TransferMode% irrespective of the mode 
            used by the remote side. You can also use message security and transport security, which is offered through 
            StreamUpgradeBindingElement implementations such as the SslStreamSecurityElement. Note that currently 
            the Sun SOAP/TCP only supports message security. 
            </para> 
            <para>
            SOAP/TCP enables you to communicate over TCP with WCF as well as with any container that 
            supports the Metro Web services stack.</para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">
            <summary>
            Represents the binding element used to specify the SOAP/TCP transport for transmitting messages. 
            </summary>
            <remarks>
            <para>
            SOAP/TCP is a specification by Sun Microsystems that describes an efficient and lightweight 
            protocol for transmitting Web services messages over a TCP connection.</para>
            <para>
            The SOAP/TCP transport included in WCF-Xtensions provides excellent performance when used with 
            the Fast Infoset stateful message encoding which maintains the Fast Infoset vocabulary 
            during a connection. This stateful message encoding eliminates the need to build a new vocabulary 
            with every message, thus minimizing FI message size and maximizing FI processing performance.</para>
            <para>
            With the Noemax SOAP/TCP you can use any TransferMode irrespective of the mode used by the remote 
            side. You can also use message security and transport security, which is offered through 
            StreamUpgradeBindingElement implementations such as the SslStreamSecurityElement. Note that currently 
            the Sun SOAP/TCP only supports message security. 
            </para> 
            <para>
            SOAP/TCP enables you to communicate over TCP with WCF as well as with any container that 
            supports the Metro Web services stack.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.#ctor">
            <summary>
                Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>.
                
                <overloads>Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>.</overloads>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.#ctor(Noemax.WCFX.Channels.SoapTcpTransportBindingElement)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>.
            </overloads>        
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.Clone">
            <summary>
            Creates a new <b>SoapTcpTransportBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <b>SoapTcpTransportBindingElement</b> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended to be used only by the framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong>, with
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>
            plugged into the collection of binding elements.
            </summary>
            <returns>
            The <strong>CustomBinding</strong> based on the source <strong>Binding</strong>
            with
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>
            binding element plugged into it.
            </returns>
            <param name="binding">
            The <b>Bindin</b> to use as source.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>BindingElementCollection</strong> based on the specified
            source, with
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>
            plugged into the collection of binding elements.
            </summary>
            <returns>
            The <strong>BindingElementCollection</strong> based on the source
            <strong>BindingElementCollection</strong> with
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see>
            binding element plugged into it.
            </returns>
            <param name="bindingElementCollection">
            	<b>BindingElementCollection</b> to use as source.
            </param>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.Scheme">
            <summary>
            Gets the URI scheme for the transport. 
            </summary>
            <remarks>
            This property is used to validate bindings against base addresses.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size of the buffer to use. For buffered messages this value is the 
            same as <b>MaxReceivedMessageSize</b>. For streamed messages, this value is the maximum size 
            of the SOAP headers, which must be read in buffered mode. 
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.TransportCompression">
            <summary>
            Specifies the whether the transport level compression should be applied and the type of compression to be used.
            </summary>
            <remarks>
            Currently only LZF3 and DEFLATE compression algorithms aresuitable for "statefull transport stream compression.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.TransportCompressionLevel">
            <summary>
            Speicifies a compression level to be applied by the transport compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.Security">
            <summary>
            Gets and sets the security settings to be used by a transport channel.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>        
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.Socks">
            <summary>
            Represents the settings of the SOCKS proxy to use to connect to the service
            endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.UseDefaultWebProxy">
            <summary>
            Gets or sets a value that indicates whether the auto-configured HTTP proxy
            of the system should be used, if available.
            </summary>
            <remarks>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks> 
            <returns>
            true if the auto-configured HTTP proxy of the system should be used, if available;
            otherwise, false. The default value is true.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.ProxyAddress">
            <summary>The address of HTTP proxy that should be used for establishing HTTP connection.</summary>
            <remarks>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.ConnectionPooling">
            <summary>Enables and disables connection pooling.</summary>
            <value>
            If <strong>true</strong> outgoing connections are going to be pooled in
            connection pool and reused when client reconnects back to the same endpoint.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.InactivityTimeoutMinutes">
            <summary>
            Gets and sets a number of minutes that the server should wait prior discarding an inactive client connection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.IdleTimeout">
            <summary>
            Gets and set the amount of time during which server will allow connection to stay idle before terminating it.
            </summary>      
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.#ctor">
             <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement">SoapTcpDuplexTransportBindingElement</see>.
             </summary>    
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.#ctor(Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement">SoapTcpDuplexTransportBindingElement</see>.
            </summary>        
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            <strong>true</strong> if the specified channel listener stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            <strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.Clone">
            <summary>
            Creates a new <b>SoapTcpDuplexTransportBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <b>SoapTcpDuplexTransportBindingElement</b> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement.Scheme">
            <summary>
            Gets the URI scheme for the transport. 
            </summary>
            <remarks>
            This property is used to validate bindings against base addresses.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpChannelSettings.#ctor(Noemax.WCFX.Channels.openChannelRequest)">
            <remarks/>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpChannelSettings.NegotiatedMimeTypes">
            <remarks/>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpChannelSettings.NegotiatedParams">
            <remarks/>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpChannelSettings.TargetWSURI">
            <remarks/>
        </member>
        <member name="P:Noemax.WCFX.Channels.SoapTcpChannelSettings.ChannelID">
            <remarks/>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpServiceChannelBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            text
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpServiceChannelBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            text
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpServiceChannelBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            text
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SoapTcpServiceChannelBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            text
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.ServiceChannelWSImpl">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.ServiceChannelWSImpl.initiateSession(Noemax.WCFX.Channels.initiateSessionRequest)">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.ServiceChannelWSImpl.openChannel(Noemax.WCFX.Channels.openChannelRequest)">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.ServiceChannelWSImpl.closeChannel(Noemax.WCFX.Channels.closeChannelRequest)">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.initiateSessionRequest">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.initiateSessionRequest.#ctor">
            <summary />    
        </member>
        <member name="T:Noemax.WCFX.Channels.initiateSessionResponse">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.initiateSessionResponse.#ctor">
            <summary />    
        </member>
        <member name="T:Noemax.WCFX.Channels.mimeType">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.Channels.mimeType.mimeTypeString">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.Channels.mimeType.embeddedParams">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.EmbeddedParam">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.Channels.EmbeddedParam.key">
            <remarks/>
        </member>
        <member name="P:Noemax.WCFX.Channels.EmbeddedParam.value">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.openChannelRequest">
            <summary />    
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelRequest.targetWSURI">
            <summary />    
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelRequest.negotiatedMimeTypes">
            <summary />    
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelRequest.negotiatedParams">
            <summary />    
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelRequest.sessionID">
            <summary />    
        </member>
        <member name="M:Noemax.WCFX.Channels.openChannelRequest.#ctor">
            <summary />    
        </member>
        <member name="M:Noemax.WCFX.Channels.openChannelRequest.#ctor(System.String,System.String[],System.String[])">
            <summary />    
        </member>
        <member name="T:Noemax.WCFX.Channels.openChannelResponse">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelResponse.channelId">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelResponse.negotiatedMimeTypes">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelResponse.negotiatedParams">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.openChannelResponse.sessionID">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.openChannelResponse.#ctor">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.openChannelResponse.#ctor(System.Int32,System.String[],System.String[])">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.closeChannelRequest">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.closeChannelRequest.arg0">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.closeChannelRequest.sessionID">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.closeChannelRequest.#ctor">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.closeChannelRequest.#ctor(System.Int32)">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.closeChannelResponse">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.closeChannelResponse.return">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.closeChannelResponse.sessionID">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.closeChannelResponse.#ctor">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.closeChannelResponse.#ctor(System.Int32)">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.ServiceChannelWSImplChannel">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.ServiceChannelException">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.ServiceChannelException.#ctor">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelException.errorCode">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelException.message">
            <summary />
        </member>
        <member name="M:Noemax.WCFX.Channels.ServiceChannelException.#ctor(Noemax.WCFX.Channels.ServiceChannelErrorCode)">
            <summary />
        </member>
        <member name="T:Noemax.WCFX.Channels.ServiceChannelErrorCode">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelErrorCode.TOO_MANY_OPEN_SESSIONS">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelErrorCode.TOO_MANY_OPEN_CHANNELS_FOR_SESSION">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelErrorCode.UNKNOWN_ENDPOINT_ADDRESS">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelErrorCode.CONTENT_NEGOTIATION_FAILED">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.ServiceChannelErrorCode.UNKNOWN_CHANNEL_ID">
            <summary />
        </member>
        <member name="F:Noemax.WCFX.Channels.MimeType.srHashCode">
            hash code to check whether stringRepresentation
            really represents current MimeType values 
        </member>
        <member name="T:Noemax.WCFX.Channels.SoapTcpMessageInputStream.IncommingMessageStream">
            <summary>
            Helper stream
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            <summary>Represents a collection of <strong>MessageEncodingBindingElement</strong>.</summary>
            <remarks>
            	<para>This collection is used to specify the list of message encodings to be
                supported by the channel or the service endpoint.</para>
            	<para>The order in which items are added into a collection specifies the preference
                order, where the most preferred encoding is added first and the least preferred
                last.</para>
            	<para>If a default message encoding is not specified, the last message encoding
                added is considered as the default.</para>
            	<para>The best practice is that the most interoperable encoding is the
                default.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Create(Noemax.WCFX.Channels.SmartMessageEncodingSet)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> class from a predefined set of message
            encodings.
            </summary>
            <remarks>
            The collection is initialized according to the set of message encodings specified
            by the <em>messageEncodingSet</em> parameter.
            </remarks>
            <param name="messageEncodingSet">The predefined set of message encodings to use.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> class from an array of
            <b>MessageEncodingBindingElement</b>.
            </summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="messageEncodings"><para>The array of <strong>MessageEncodingBindingElement</strong>.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.#ctor(Noemax.WCFX.Channels.SmartMessageEncodingSet)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> class from a predefined set of message
            encodings.
            </summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="messageEncodingSet">The predfined set of message encoding to use.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.#ctor(Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Initializes a new
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> instance from the already existing
            one.
            </summary>
            <param name="collection">The already initialized collection of MessageEncodingBindingElement.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.CopyTo(Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Copies all items from this collection into another
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            MessageEncodingBindingElementCollection</see>.
            </summary>
            <param name="collection">The target collection.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.SetMessageVersion(System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Sets a MessageVersion property of each contained MessageEncodingBindingElement to the specified value.
            </summary>
            <param name="messageVersion">MessageVersion value to set.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.AddRange(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.MessageEncodingBindingElement})">
            <summary>
            Adds an enumerable collection of <strong>MessageEncodingBindingElement</strong>
            to the collection.
            </summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="enumerable">
            An enumerable collection containing the list of
            <strong>MessageEncodingBindingElement</strong>.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Add(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>Adds a <strong>MessageEncodingBindingElement</strong> to the collection.</summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="messageEncoding">The MessageEncodingBindingElement to add to the collection.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Add(System.ServiceModel.Channels.MessageEncodingBindingElement,System.Boolean)">
            <summary>Adds a <strong>MessageEncodingBindingElement</strong> to the collection.</summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="messageEncoding">The MessageEncodingBindingElement to add to the collection.</param>
            <param name="makeDefault">
            	<para>If <strong>true</strong> the <strong>MessageEncodingBindingeElement</strong>
                specified by <em>messageEncoding</em> will be set as the default.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Add``1(System.Boolean)">
            <summary>Adds a <strong>MessageEncodingBindingElement</strong> to the collection.</summary>
            <remarks>
            	<para>The order in which items are added to the collection specifies the preference
                order, where the most preferred encoding goes first and the least preferred goes
                last.</para>
            	<para>If the default message encoding is not specified the last added message
                encoding becomes the default.</para>
            </remarks>
            <param name="makeDefault">
            If <strong>true</strong> the specified
            <strong>MessageEncodingBindingeElement</strong> will be set as the default.
            </param>
            <typeparam name="T">
            The type of <strong>MessageEncodingBindingElement</strong> to create and add to
            the collection.
            </typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Clear">
            <summary>
            Removes all items from the
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see>.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Contains(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>
            	<para>Determines whether this collection contains the specified
                <strong>MessageEncodingBindingElement</strong>.</para>
            </summary>
            <returns>
            	<strong>true</strong> if the specified MessageEncodingBindingElement is found in
            this collection; otherwise, <strong>false</strong>.
            </returns>
            <param name="messageEncoding">
            The MessageEncodingBindingElement to check if it is present in the
            collection.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Contains``1">
            <summary>
            Determines whether this collection contains a
            <strong>MessageEncodingBindingElement</strong> of the specified type.
            </summary>
            <returns>
            	<strong>true</strong> if a MessageEncodingBindingElement of the specified type is
            found in this collection; otherwise, <strong>false</strong>.
            </returns>
            <typeparam name="T">The type of the <strong>MessageEncodingBindingElement</strong> element.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Contains(System.Type)">
            <returns>
            	<strong>true</strong> if a MessageEncodingBindingElement of the specified type is
            found in this collection; otherwise, <strong>false</strong>.
            </returns>
            <summary>
            Determines whether this collection contains a
            <strong>MessageEncodingBindingElement</strong> of the specified type.
            </summary>
            <param name="type">The type of the <strong>MessageEncodingBindingElement</strong>.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.CopyTo(System.ServiceModel.Channels.MessageEncodingBindingElement[],System.Int32)">
            <summary>
            Copies the elements of this collection into an <b>Array</b>, starting at a
            particular <b>Array</b> index.
            </summary>
            <param name="array">
            	<para>The one-dimensional array <font color="black">that is the destination of the
                elements copied from this collection</font>. The <b>Array</b> must have zero-based
                indexing.</para>
            </param>
            <param name="arrayIndex">
            The zero-based index in <b>array</b> at which copying
            begins.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Remove(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>Removes the first occurrence of a specific object from this collection.</summary>
            <param name="messageEncoding">
            The <strong>MessageEncodingBindingElement</strong> to remove from this
            collection.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.RemoveAt(System.Int32)">
            <summary>Removes the element located at the specified index from this collection.</summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Remove``1">
            <summary>
            Removes the <strong>MessageEncodingBindingElement</strong> of the specified type
            from this collection.
            </summary>
            <returns>The removed element.</returns>
            <typeparam name="T">The type of the <strong>MessageEncodingBindingElement</strong> to remove.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Remove(System.Type)">
            <summary>
            Removes the <strong>MessageEncodingBindingElement</strong> of the specified type
            from this collection.
            </summary>
            <returns>The removed element.</returns>
            <param name="type">The type of the <strong>MessageEncodingBindingElement</strong> to remove.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.IndexOf(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>Determines the index of a specific item in the collection.</summary>
            <param name="item">The item whose index is to be determined.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>The enumerator that iterates through this collection.</returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Clone">
            <summary>
            Creates a new object of
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> initialized from this instance.
            </summary>
            <returns>
            The new
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see> object initialized from this
            instance.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.MessageEncodingSet">
            <summary>Gets and sets the predefined message encoding set used in this collection.</summary>
            <remarks>
            	<para>If the collection was initialized using a predefined set, this property
                returns a <strong>SmartMessageEncodingSet</strong> value specifying the set of
                message encodings used in this collection. If this collection was not initialized
                using a predefined set, this property returns
                <strong>SmartMessageEncodingSet.Custom</strong>.</para>
            	<para>If this property is assigned to a value that is not equal to the current
                value of the property, the collection is cleared and reconfigured according to the
                new value.</para>
            	<para>Regardless of the order in which the message encodings were specified when
                setting the <strong>SmartMessageEncodingSet</strong> value, the predefined message
                encoding preference order is used. See
                <see cref="T:Noemax.WCFX.Channels.SmartMessageEncodingSet">SmartMessageEncodingSet</see>
                for more information.</para>
            </remarks>
            <example>
            	<para>[C#]</para>
            	<para>SmartHttpBinding binding =new SmartHttpBinding();</para>
            	<para>binding.MessageEncodings.MessageEncodingSet = (SmartMessageEncodingSet.FI
                | SmartMessageEncodingSet.Text);</para>
            </example>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Count">
            <summary>Returns an integer containing the number of elements in a collection.</summary>
            <value>The number of elements in a collection.</value>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.IsReadOnly">
            <summary>
            Returns <strong>true</strong> if the collection is read only; otherwise,
            <strong>false</strong>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Default">
            <summary>
            The <strong>MessageEncodingBindingElement</strong> which was assigned as the
            default one.
            </summary>
            <remarks>
            Returns the <strong>MessageEncodingBindingElement</strong> contained in the
            collection which will be used as the default when it is unknown which message encodings
            are supported by the remote side. Typically this should be the most interoperable
            one.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection.Item(System.Int32)">
            <summary>Gets the element at the specified index.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.PluggableMessageEncodingBindingElement">
            <summary>
            Represents the <strong>MessageEncodingBindingElement</strong> that can plug
            itself into an already configured <strong>Binding</strong>.
            </summary>
            <remarks>
            This is the base class for the message encoding binding elements that can be
            plugged into an exiting <strong>Binding</strong>.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.PluggableMessageEncodingBindingElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.PluggableMessageEncodingBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong> object, with this binding element plugged in place of the
            MessageEncodingBindingElement used by the source <strong>Binding</strong>.
            </summary>
            <param name="sourceBinding">
            The binding to be used as source for the new <strong>CustomBinding</strong>,
            which will have this binding element plugged into it.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.PluggableMessageEncodingBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>BindingElementCollection</strong> based on the specified source
            <strong>BindingElementCollection</strong> object, with this binding element plugged in place of the
            MessageEncodingBindingElement used by the source <strong>Binding</strong>.
            </summary>
            <param name="bindingElements">
            The collection to be used as source for the new <strong>BindingElementCollection</strong>,
            which will have this binding element plugged into it.
            </param>
        </member>
        <member name="T:Noemax.WCFX.Channels.EncodingCompressionMethod">
            <summary>
            Defines a set of comrpession algorithms to be used by EnvelopBehavior.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.Deflate">
            <summary>
            DEFLATE compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.GZip">
            <summary>
            GZIP compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.Lzma">
            <summary>
            LZMa compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.BZip2">
            <summary>
            BZip2 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.Lzf">
            <summary>
            LZF compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.Lzf3">
            <summary>
            LZF3 compression algorithm.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.EncodingCompressionMethod.Lzf4">
            <summary>
            LZF4 compression algorithm.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.GzipCompressionFactory.MediaType">
            <summary>Return the MIME type assigned to this compression.</summary>
            <value>Returns the "gzip".</value>
        </member>
        <member name="T:Noemax.WCFX.Channels.SocksVersion">
            <summary>
            Defines the version of the SOCKS proxy that the channel uses in order to reach 
            the server.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SocksVersion.None">
            <summary>Channel does not use proxy.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SocksVersion.Socks4">
            <summary>SOCKS v4</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SocksVersion.Socks5">
            <summary>SOCKS v5</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SocksAuthentication">
            <summary>
            Defines the type of authentication that the channel use in order to connect though the SOCKS proxy.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SocksAuthentication.None">
            <summary>No authentication.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SocksAuthentication.Username">
            <summary>Username/Password</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SocksSettings">
            <summary>Represents the SOCKS proxy settings.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SocksSettings.#ctor">
            <summary>Initialize new instance of <strong>SocksSettings</strong>.</summary>
            <overloads>Initialize new instance of <strong>SocksSettings</strong>.</overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.SocksSettings.#ctor(Noemax.WCFX.Channels.SocksSettings)">
            <summary>
            Initialize new instance of <strong>SocksSettings</strong> from already exiting
            object.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Version">
            <summary>
            Gets or sets the version of the SOCKS protocol to use.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Authentication">
            <summary>
            Gets or sets the authentication scheme to use to connect through the SOCKS
            proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Username">
            <summary>Gets or sets the username to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Address">
            <summary>Gets or sets the address of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Port">
            <summary>Gets or sets the TCP port of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SocksSettings.Password">
            <summary>Sets the password to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">
            <summary>
            Represents a binding element that improves the performance of streaming through the transport connection
            by efficiently chunking the payload. 
            </summary>
            <remarks>
            	<para>This extension can be used only in streaming transfer mode when transport
                produces chunks that are too small, which prevent the network connection to be
                utilized efficienty. You can use it with any transport binding element, whenever
                performance does not appear to be optimal or the network is not getting fully
                utilized by your channels.</para>
            	<para>StreamEnhancerElement plugs itself between TransportBindingElement and
                MessageEncodingBindingElement, ensuring that the message encoding consistently
                produces chunks of optimal size and equal size and also does not flush the buffer
                when it's not necessary.</para>
            	<para>You don't need to use <b>StreamEnhancerBindingElement</b> with binding
                elements and transports provided by WCF-Xtensions.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.#ctor">
            <summary>
                Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">StreamEnhancerBindingElement</see>.
                
                <overloads>Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">StreamEnhancerBindingElement</see>.</overloads>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.#ctor(Noemax.WCFX.Channels.StreamEnhancerBindingElement)">
            <summary>
                Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">StreamEnhancerBindingElement</see>.
                
                <overloads>Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">StreamEnhancerBindingElement</see>.</overloads>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong>, with StreamEnhancerBindingElement plugged into the collection of
            binding elements.
            </summary>
            <returns>
            The <strong>CustomBinding</strong> based on the source <strong>Binding</strong>
            with StreamEnhancerBindingElement binding element plugged into it.
            </returns>
            <param name="targetBinding">
            The target binding to use as source.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>BindingElementCollection</strong> based on the specified source
            <strong>BindingElementCollection</strong>, with StreamEnhancerBindingElement plugged into the collection of
            binding elements.
            </summary>
            <returns>
            The <strong>BindingElementCollection</strong> based on the source <strong>BindingElementCollection</strong>
            with StreamEnhancerBindingElement binding element plugged into it.
            </returns>
            <param name="bindingElementCollection">
            The target BindingElementCollection to use as source.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> 
            for the listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.Clone">
            <summary>
            Creates a new <b>CompressionBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <strong>CompressionBindingElement</strong> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.StreamEnhancerBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context"><para>The <strong>BindingContext</strong> for the binding element.</para></param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnableCompressionAttribute">
            <summary>
            	<para>This attribute allows you to specify which operations may use
                compression.</para>
            </summary>
            <remarks>
            	<para>When the binding works in
                <see cref="T:Noemax.WCFX.Channels.SmartCompressionMode">SmartCompressionMode.Selective</see>
                mode it uses compression for operations marked by
                <see cref="T:Noemax.WCFX.Behaviors.EnableCompressionAttribute">EnableCompressionAttribute</see>.
                This attribute allows you to configure the binding in an efficient manner, enabling
                compression only for operations that require it.</para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
            <example>
            	<para>[C#]</para>
            	<para>[ServiceContract]</para>
            	<para>interfaceIInfoService</para>
            	<para>{</para>
            	<para>[OperationContract][EnableCompression]</para>
            	<para>Data[] GetData();</para>
            	<para>}</para>
            </example>
        </member>
        <member name="T:Noemax.WCFX.Behaviors.EnableCompressionDispatchBehavior">
            <summary>Enables compression of the response from the specified method.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartHttpMessageEncoderFactory">
            <summary>
            Provides flexible message encoder that enables compression
            and decompression of the traffic based on info provided 
            in standard HTTP headers.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartMessageEncoderFactory">
            <summary>
            Creates smart encoder that is capable to pick up encoding according to 
            provided message contenttype and uses one encoding as default for 
            outgoing messages.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartHttpMessageEncoderFactory.HttpMessageEncoder">
            <summary>
            Peforms compression of outgoing messages and instantiates HttpMessage class
            for processing incomming messages. 
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartMessageEncoder">
            <summary>
            Provides smart encoding functionality picking up proper encoding for incomming 
            messages according to their content-type and using default encoding for outgoing 
            messages. 
            </summary>
            <remarks>    
            This class also allows to specify encoding for outgoing message in it's Encoder
            property. If Encoder is specified in outgoing message property, provided encoder will be used 
            for message encoding.
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartMessageEncoder.ContentType">
            <summary>
            Retruns content-type of DefaultEncoder.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartMessageEncoder.MediaType">
            <summary>
            Retruns media-type of DefaultEncoder.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartHttpMessageEncoderFactory.HttpMessage">
            <summary>
            Intercepts incomming message processing by delaying the parsing of the message
            allows to obtain HTTP headers from the transport and select proper algorithm for 
            message processing as well as prefered algorithms for encoding of response
            message using information obtained from HTTP headers.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartHttpBinding">
            <summary>
            Represents a binding that fully utilizes all standard capabilities of the HTTP
            transport to provide support for dynamic content negotiation.
            </summary>
            <remarks>
            	<para>Using the standard dynamic content negotiation capabilities of the HTTP
                protocol, this binding detects the encoding that was used to serialize the incoming
                message and the compression algorithm used (if any) and appropriately decompresses
                and deserializes the incoming message.</para>
            	<para>Information obtained from the HTTP header also allows it to detect which
                message encodings are supported by the remote side and whether it supports
                compression. The <strong>SmartHttpBinding</strong> can be configured to use the
                preferred message encoding and/or compression algorithm to communicate with those
                clients that support these advanced features without breaking interoperability with
                those clients and servers that do not support such features.</para>
            	<para>You can configure the <strong>SmartHttpBinding</strong> behavior using the  
            	<see cref="P:Noemax.WCFX.Channels.SmartHttpBinding.CompressionMode">CompressionMode</see>
                and <see cref="P:Noemax.WCFX.Channels.SmartHttpBinding.MessageEncodingMode">MessageEncodingMode</see>
                which allow you to set different modes of message encoding and compression.</para>
            	<para>By using the <strong>SmartHttpBinding</strong> you can reduce the bandwidth
                used by your service and improve its processing performance without sacrificing
                interoperability.</para>
                
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para> 
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.Init(Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Initializes the instance of %Noemax.WCFX.Channels.SmartHttpBinding% from the %Noemax.WCFX.Channels.MessageEncodingBindingElementCollection%.
            </summary>
            <param name="messageEncodings"></param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>.
            </summary>        
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor(Noemax.WCFX.Channels.SmartMessageEncodingSet)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>
            with a predefined set of message encodings.
            </summary>
            <param name="messageEncodingSet">The set of message encodings to support.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor(Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>
            using the specified collection of message encodings.
            </summary>
            <param name="messageEncodings">The collection of <strong>MessageEncodingBindingElement</strong> to use.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>
            using specified collection of message encodings.
            </summary>
            <param name="securityMode">The security settings for this binding.</param>
            <param name="messageEncodings">The collection of <strong>MessageEncodingBindingElement</strong> to use.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>
            with the specified type of security.
            </summary>
            <param name="securityMode">
            	<para>The value of <c>BasicHttpSecurityMode</c> that specifies the type of security that is used with the
                SOAP messages.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode,Noemax.WCFX.Channels.SmartMessageEncodingSet)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see>
            with the specified type of security and the predefined set of message encodings.
            </summary>
            <param name="securityMode">
            	<para>The value of
                <c>BasicHttpSecurityMode</c> that specifies the type of security that is used with the
                SOAP messages.</para>
            </param>
            <param name="messageEncodingSet">The predefined set of message encodings to support.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpBinding.CreateBindingElements">
            <summary>
            Creates a collection that contains the binding elements that are part of the
            current binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.MessageEncodings">
            <summary>The collection of message encodings used by this binding.</summary>
            <remarks>
            	<para>The <strong>MessageEncodingsBindingElement</strong> items that are added to
                this list will be supported by this binding.</para>
            	<para>Regardless of the
                <see cref="P:Noemax.WCFX.Channels.SmartHttpBinding.MessageEncodingMode">
                MessageEncodingMode</see> settings, this binding will always be able to decode
                messages encoded using any of the message encodings specified in the
                <strong>MessageEncodings</strong> collection.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.MessageEncodingMode">
            <summary>Gets and sets the message encoding mode to be used by this binding.</summary>
            <remarks>        
            	<para>Regardless of the <strong>MessageEncodingMode</strong> settings, this binding
                is always able to decode messages encoded using any of the message encodings
                specified by the
                <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">MessageEncodings</see>
                collection.</para>
            	<para>The default value of this property is
                <strong>SmartMessageEncodingMode.Pessimistic</strong>.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.CompressionMode">
            <summary>Gets and sets the compression mode to be used by this binding.</summary>
            <remarks>
            	<para>The default value of this property is
                <strong>SmartCompressionMode.Pessimistic</strong>.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.CompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.Scheme">
            <summary>
            Gets the URI transport scheme for the channels and listeners that are configured
            with this binding.
            </summary>
            <returns>
            "https" if the security mode in the transport binding element is set to System.ServiceModel.BasicHttpSecurityMode.Transport
            or System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential;
            "http" if the security mode is set to System.ServiceModel.BasicHttpSecurityMode.Transport.TransportCredentialOnly
            or otherwise.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.AllowCookies">
            <summary>
            Gets or sets a value that indicates whether the client accepts cookies and
            propagates them on future requests.
            </summary>
            <returns>
            true if cookies are allowed; otherwise, false. The default is false.
            </returns>
            <remarks>
            	<para>You can use this attribute when you interact with ASMX Web services that use
                cookies. In this way, you can be sure that the cookies returned from the server are
                automatically copied to all future client requests for that service.</para>
            </remarks>
            <value>
            	<strong>true</strong> if the client accepts cookies and propagates them on future
            requests; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.BypassProxyOnLocal">
            <summary>
            Gets or sets a value that indicates whether to bypass the proxy server for
            local addresses.
            </summary>
            <returns>
            true to bypass the proxy server for local addresses; otherwise, false. The
            default value is false.
            </returns>
            <value>
            	<strong>true</strong> if the auto-configured HTTP proxy of the system should be
            used, if available; otherwise, <b>false</b>. The default value is <b>true</b>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.HostNameComparisonMode">
            <summary>
            Gets or sets a value that indicates whether the hostname is used to reach the
            service when matching the URI.
            </summary>
            <returns>
            The System.ServiceModel.HostnameComparisonMode value that indicates whether
            the hostname is used to reach the service when matching on the URI. The default
            value is System.ServiceModel.HostnameComparisonMode.StrongWildcard, which
            ignores the hostname in the match.
            </returns>        
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum amount of memory that is allocated for use by the
            manager of the message buffers that receive messages from the channel.
            </summary>
            <returns>
            The maximum amount of memory, in bytes, available for use by the message
            buffer manager. The default value is 524288 (0x80000) bytes.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.ProxyAddress">
             <summary>
             Gets or sets the URI address of the HTTP proxy.
             </summary>
            
             <returns>
             A System.Uri that serves as the address of the HTTP proxy. The default value
             is null.
             </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>        
            <returns>
            The System.ServiceModel.Channels.TransferMode that indicates whether messages
            are sent buffered or streamed.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.UseDefaultWebProxy">
             <summary>
             Gets or sets a value that indicates whether the auto-configured HTTP proxy
             of the system should be used, if available.
             </summary>
            
             <returns>
             true if the auto-configured HTTP proxy of the system should be used, if available;
             otherwise, false. The default value is true.
             </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.ReaderQuotas">
            <summary>
            Gets or sets constraints on the complexity of SOAP messages that can be processed
            by endpoints configured with this binding.
            </summary>
            <remarks>
            	<para>The complexity constraints provide protection from denial of service (DOS)
                attacks that attempt to use message complexity to tie up endpoint processing
                resources. Other complexity constraints include items such as a maximum element
                depth and a maximum length for string content within the message.</para>
            	<para>This constrains will be applied to all message encodings used by this binding
                if they support ReaderQuotas property.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>        
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.MaxReceivedMessageSize">
            <summary>
            Gets or sets the maximum size for a message that can be received on a channel
            configured with this binding.
            </summary>
            <returns>
            The maximum size, in bytes, for a message that is processed by the binding.
            The default value is 65,536 bytes.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">        
            The value is less than zero.        
            </exception>
            <exception cref="T:System.ServiceModel.QuotaExceededException">        
            A message exceeded the maximum size allocated.
            </exception>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.EnvelopeVersion">
            <summary>
            Gets the version of SOAP that is used for messages that are processed by this
            binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpBinding.Security">
            <summary>Gets the type of security used with this binding.</summary>
            <remarks>
            	<para>By default, the SOAP message is not secured and the client is not
                authenticated. The security used by the binding cannot be changed once the binding
                is created. To use a non-default type of security, use the SmartHttpBinding(BasicHttpSecurityMode)
                constructor.</para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            <summary>
            Represents the binding element that can be used in combination with
            HttpTransportBindingElement in order to provide support of multiple message encodings
            and compression on single endpoint.
            </summary>
            <remarks>
            	<para>Improves interoperability and performance of WS by enabling support of
                multiple message encodings and optional compression on the same endpoint.</para>
            	<para>Using information provided in standard HTTP headers
                SmartHttpMessageEncodingBindingElement detects an encoding used to serialize
                incoming message and compression algorithm if compression was used and
                de-serializes message using appropriate message encoding and decompression.</para>
            	<para>Information obtained from HTTP header also allows it to detect which message
                encodings are supported on remote side and whether remote side allows compression
                of response messages. <strong>SmartHttpMessageEncodingBindingElement</strong> can
                be configured to select preferred message encoding algorithm or use compression for
                responses to those clients that support it without breaking interoperability with
                clients and server that does not support such features.</para>
            	<para>Use
                <see cref="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CompressionMode">
                CompressionMode</see> and
                <see cref="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.MessageEncodingMode">
                MessageEncodingMode</see> properties to configure
                <strong>SmartHttpMessageEncodingBindingElement</strong> behavior.</para>
            	<para>This binding element can be used only in combination with the
                <strong>HttpTransportBindingElement</strong>.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.#ctor">
            <summary>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class.
            </summary>
            <overloads>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
            <summary>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class, and configures it to use provide
            MessageEncodingBindingElement as default.
            </summary>
            <param name="defaultBindingElement">The MessageEncodingBindingElement to use as default message encoding.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.#ctor(Noemax.WCFX.Channels.MessageEncodingBindingElementCollection)">
            <summary>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class, from collection of
            MessageEncodingBindingElement.
            </summary>
            <param name="messageEncodings">
            Collection if MessageEncodingBindingElement that specifies the list of message
            encodings to be supported.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement[])">
            <summary>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class, from collection of
            MessageEncodingBindingElement.
            </summary>
            <param name="messageEncodings">
            Collection if MessageEncodingBindingElement that specifies the list of message
            encodings to be supported.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.#ctor(Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement)">
            <summary>
            Initializes new instance of
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> class from existing one.
            </summary>
            <param name="source">
            The existing instance of <b>SmartHttpMessageEncodingBindingElement</b>.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>
            	<para>Creates a factory for message encoders that employ the message version
                specified by the current encoding binding element.</para>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel factory
            for a specified type of channel and context.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the binding element can build a channel
            factory for a specific type of channel.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.Clone">
            <summary>
            Creates a new
            <see cref="T:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement">
            SmartHttpMessageEncodingBindingElement</see> object initialized from the current
            one.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Retrieves a specified type of object for the binding context provided.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.MessageVersion">
            <summary>
            Gets or sets the SOAP and WS-Addressing versions that are used to format the
            message.
            </summary>
            <remarks>
            Gets and sets the common <strong>MessageVersion</strong> which will be used by all
            underlying MessageEncodingBindingElements.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.MessageEncodingMode">
            <summary>Gets and sets the message encoding mode to be used by this binding element.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CompressionMode">
            <summary>Gets and sets the compression mode to be used by this binding element.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.SmartHttpMessageEncodingBindingElement.MessageEncodings">
            <summary>The collection of message encodings.</summary>
            <remarks>
            	<para>MessageEncodingsBindingElements that are added to this list will be used by
                this class to provide support for various SOAP message encoding algorithms 
                </para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.FastInfosetSessionMode">
            <summary>
            Defines a set of stateful session encoding modes that may be used by the Fast Infoset message encoding. 
            </summary>    
        </member>
        <member name="F:Noemax.WCFX.Channels.FastInfosetSessionMode.PerEncoder">
            <summary>
            The reader and writer maintain a single vocabulary for each message encoder.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.FastInfosetSessionMode.PerThread">
            <summary>
            The reader or writer maintain a single vocabulary for each thread involved in message encoding.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.FiMessageEncodingBindingElement">
            <summary>
            The binding element which specifies that the Fast Infoset binary XML format is
            used to encode messages.
            </summary>
            <remarks>
            	<para>This binding element specifies that the Fast Infoset binary XML format will
                be used as the message encoding. Fast Infoset is an efficient, standard-based
                cross-platform binary XML encoding that generally produces smaller encodings and
                improves parsing performance.</para>
            	<para>This binding element can be used with <strong>CustomBinding</strong>, or can
                be plugged into an already configured standard or custom binding using the
                <see cref="M:Noemax.WCFX.Channels.PluggableMessageEncodingBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
                PlugIn</see> method.</para>
            </remarks>
            <example>
            	<para>Binding binding = new WSHttpBinding();</para>
            	<para>FiMessageEncodingBindingElement fiEncoding = new
                FiMessageEncodingBindingElement();</para>
            	<para>binding = fiEncoding.PlugIn(binding);</para>
            </example>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.#ctor">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.FiMessageEncodingBindingElement">FiMessageEncodingBindingElement</see>.
            </summary>  
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WCFX.Channels.FiMessageEncodingBindingElement">FiMessageEncodingBindingElement</see>.
            </summary>       
            <param name="messageVersion">
            The MessageVersion of new instance of <see cref="T:Noemax.WCFX.Channels.FiMessageEncodingBindingElement">FiMessageEncodingBindingElement</see>.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.#ctor(Noemax.WCFX.Channels.FiMessageEncodingBindingElement)">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement cloning existing one. 
            </summary>
            <param name="source">The instance of FiMessageEncodingBindingElement to clone.</param>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>Creates a factory for Fast Infoset message encoders.</summary>
            <returns>
            The <strong>MessageEncoderFactory</strong> that this binding element
            creates.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.Clone">
            <summary>
            Creates a new <b>FiMessageEncodingBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            An <b>FiMessageEncodingBindingElement</b> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the
            binding element stack.
            </summary>
            <returns>
            The typed object T requested if it is present or a null reference (<b>Nothing</b>
            in Visual Basic) if it is not.
            </returns>
            <param name="context">
            <para>The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for
            the binding element.</para>
            </param>
            <typeparam name="T">The typed object for which the method is querying.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <b>TChannel</b> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <b>TChannel</b> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>         
        </member>
        <member name="M:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.MessageVersion">
            <summary>
            Gets or sets the SOAP and WS-Addressing versions that are used to format the text
            message.
            </summary>
            <remarks>
            	<para>The default <b>MessageVersion</b> for this constructor is the version of
                WS-Addressing that was submitted 10 August 2004 and SOAP 1.2.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.ReaderQuotas">
            <remarks>
            	<para>The complexity constraints protect against a class of denial of service (DOS)
                attacks that attempt to use message complexity to tie up endpoint processing
                resources. The properties that express these constraints and their default values
                are as follows:</para>
            	<ul>
                    <li><p>MaxDepth = 32</p></li>
                    <li><p>MaxStringContentLength = 8192</p></li>
                    <li><p>MaxArrayLength = 16384</p></li>
                    <li><p>MaxBytesPerRead = 4096</p></li>
                    <li><p>MaxNameTableCharCount = 16384</p></li>
                </ul>
            </remarks>
            <summary>
            Gets constraints on the complexity of XML messages that can be processed
            by endpoints configured with this binding element.
            </summary>         
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum number of characters that a string value may contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum string length specifies the maximum number of characters that a string value may contain in order to be added to
            the vocabulary. Longer values are not added to the vocabulary. A higher limit might result in higher compactness but might also 
            result in higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that may be added to the vocabulary. 
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum number of strings specifies up to how many strings may be added to the vocabulary. When this limit is reached, no 
            more values are added to the vocabulary. A higher limit might result in higher compactness but might also result in 
            higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.MaxReadPoolSize">
            <summary>
            Gets or sets the number of readers that are allocated to a pool and ready for use
            to process incoming messages.
            </summary>
            <value>The number of readers in the pool. The default value is 64 readers.</value>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.MaxWritePoolSize">
            <summary>
            Gets or sets the number of writers that are allocated to a pool and ready for use
            to process outgoing messages.
            </summary>
            <value>
            The maximum number of writers to be kept in the pool. The default value is 16 writers.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.WriterProfile">
            <summary>
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see>
            that defines the way how primitive data-type are going to be serialized.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.PermitStateful">
            <summary>
            Gets and sets the stateful session encoding mode that will be used by the Fast Infoset message encoding.
            </summary>
            <remarks>
            <para>The same %Noemax.WCFX.Channels.FastInfosetSessionMode% must be used on both communicating sides.</para>
            <para>
            Note that in order to use the stateful encoding mode it is required that (a) messages are encoded and decoded 
            in the same order on both sides, (b) messages are encoded and decoded one by one and that no message is 
            encoded or decoded in parallel with another, and (c) messages are always fully decoded and that no message 
            is only partially decoded. Satisfying all three requirements is not always possible when using a full
            duplex bidirectional transport in a multi-threaded environment; using the stateful encoding mode in such 
            conditions might lead to channel faults.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.SessionMode">
            <summary>
            Gets and sets the stateful session encoding mode that will be used by the Fast Infoset message encoding.
            </summary>
            <remarks>
            The same %Noemax.WCFX.Channels.FastInfosetSessionMode% must be used on both communicating sides.
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransferModeX">
            <summary>
            Defines the way in which data getting transfered by Noemax transports. This enumeration is used only on .NET CF platform 
            as replacement for System.ServiceModel.Channels.TransferMode enumeration to extend it with additional transfer modes. 
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransferModeX.Buffered">
            <summary>
            The request and response messages are both buffered. 
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransferModeX.Streamed">
            <summary>
            The request and response messages are both streamed.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransferModeX.StreamedRequest">
            <summary>
            The request message is streamed and the response message is buffered.
            </summary> 
        </member>
        <member name="F:Noemax.WCFX.Channels.TransferModeX.StreamedResponse">
            <summary>
            The request message is buffered and the response message is streamed.
            </summary> 
        </member>
        <member name="T:Noemax.WCFX.Channels.CompressionAlgorithms">
            <summary>
            Defines a set of compression algorithms.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.GZip">
            <summary>GZIP.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.Deflate">
            <summary>DEFLATE.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.DeflateGZip">
            <summary>Eiher DEFLATE or GZIP depending on remote side preferences.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.Lzma">
            <summary>LZMA.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.BZip2">
            <summary>
            BZIP2
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.Lzf">
            <summary>LZF.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.Lzf3">
            <summary>LZF3.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.CompressionAlgorithms.Lzf4">
            <summary>LZF4.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartMessageEncodingMode">
            <summary>Defines the mode of smart message encoding.</summary>
            <remarks>
            <para>The message encoding modes only affect the behavior of clients.</para> 
            <para>A server can decode any request provided that it has been encoded using one of the message encodings
            that it supports. To encode its response, the server will use one of the preferred message encodings specified 
            by the client. If the server does not support any of the preferred message encodings then it will encode its
            response using the same message encoding as the one used by the client in its last request.
            </para> 
            </remarks>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingMode.Pessimistic">
            <summary>
            Pessimistic - The client will always encode its requests using the default message encoding; within these request
            it will also provide a list of preferred message encodings that it supports. If the server supports one of the 
            preferred message encodings specified by the client, the server will return its response using a preferred
            message encoding; otherwise the server will use the default message encoding.  	
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingMode.Adaptive">
            <summary>
            The client will encode its request using the default message encoding; within this request it will also 
            provide a list of preferred message encodings that it supports. If the server supports one of the
            preferred message encodings specified by the client, the server will return its response using a
            preferred message encoding; otherwise the server will use the default message encoding. The client
            will encode subsequent requests using the same encoding as the one used by the server in its
            last response.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartCompressionMode">
            <summary>Defines the mode of message compression.</summary>
            <example>
            	<para>Decompression of compressed incoming messages is supported in all modes
                except of <strong>None</strong> which indicates that compression and decompression
                are prohibited.</para>
            </example>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartCompressionMode.None">
            <summary>
            	<para>The channel will not use compression.</para>
            	<para>The channel will refuse incoming compressed messages.</para>
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartCompressionMode.Pessimistic">
            <summary>
            	<para>The channel  should use compression only to reply to compressed requests or to
                requests which indicate that compression is supported.</para>
            	<para>The channel  will decompress incoming compressed messages.</para>
            </summary>       
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartCompressionMode.Adaptive">
            <summary>
            	<para>The channel should not use compression unless the remote side indicates that
                it supports compression. Once compression is enabled all outgoing messages are
                compressed.</para>
            	<para>The channel  will decompress incoming compressed messages.</para>
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartCompressionMode.Optimistic">
            <summary>The channel should always compress and decompress messages.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartCompressionMode.Selective">
            <summary>
            	<para>The channel should use compression only for methods marked with the        
                <see cref="T:Noemax.WCFX.Behaviors.EnableCompressionAttribute">EnableCompression</see>
                attribute and only when the remote side has indicated that it supports
                compression.</para>
            	<para>The channel will decompress incoming compressed messages.</para>
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.SmartMessageEncodingSet">
            <summary>
            Defines the set of message encodings.
            </summary>
            <remarks>
            	<para>The <strong>SmartMessageEncodingSet</strong> enumeration provides a fast way
                to specify the set of message encodings to be used by the binding. Each member of
                the enumeration represents a predefined combination of message encodings.</para>
            	<para>Regardless of the order in which the message encodings are specified during
                the initialization of the <strong>SmartMessageEncodingSet</strong> value, they are
                always used in the following predefined order of preference:</para>
            	<para>1. FastInfoset message encoding (Preferred).</para>
            	<para>2. Text message encoding (Default).</para>
            </remarks>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingSet.Text">
            <summary>Text message encoding</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingSet.Fi">
            <summary>Fast Infoset message encoding</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingSet.FiText">
            <summary>FI (Preferred), Text (Default)</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.SmartMessageEncodingSet.Custom">
            <summary>
            The set of message encodings defined by the <strong>MessageEncodings</strong>
            property of the corresponding binding.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportCompression">
            <summary>Specifies the type of compression to be used by a transport.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompression.Deflate">
            <summary>DEFLATE</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompression.Lzf3">
            <summary>LZF3</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompression.Lzf4">
            <summary>LZF4</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompression.None">
            <summary>No compression to be used.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportCompressionFormat">
            <summary>Specifies the type of compression to be used by transport compression binding element.</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompressionFormat.Lzf3">
            <summary>LZF3 compression</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompressionFormat.Lzf4">
            <summary>LZF4 compression</summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportCompressionFormat.Deflate">
            <summary>DEFLATE compression.</summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportSecurityType">
            <summary>
            Specifies the type of security to be used by a transport.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportSecurityType.None">
            <summary>
            No security.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.TransportSecurityType.Tls">
            <summary>
            TLS transport security.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.TransportSecuritySettings">
            <summary>Provides methods and properties for tranport security configuration.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.#ctor">
            <summary>Initialize a new intrance of %TransportSecuritySettings%.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.#ctor(Noemax.WCFX.Channels.TransportSecuritySettings)">
            <summary>Initialize a new instance of %TransportSecuritySettings%.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.CopyFrom(Noemax.WCFX.Channels.TransportSecuritySettings)">
            <summary/>        
        </member>
        <member name="M:Noemax.WCFX.Channels.TransportSecuritySettings.Clone">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.Type">
            <summary>Gets and set the type of security to be used by a transport.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.RequireClientAuthentication">
            <summary>Gets and sets whether the client authentication must be required.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.TransportSecuritySettings.ProtectionLevel">
            <summary>
            Gets and sets the <c cref="T:System.Net.Security.ProtectionLevel">ProtectionLevel</c> to be applied in cases when 
            Window Security Stream is used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.WcfxPolicyImporter">
            <summary>
            Imports the WSDL policies exported by WCF-Xtensions components.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.WcfxPolicyImporter.#ctor">
            <summary>
            Creates  a new instance of WcfxPolicyImporter.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.WcfXtensionsBinding">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WcfXtensionsBinding.#ctor">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WcfXtensionsBinding.#ctor(System.ServiceModel.Channels.Binding)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WcfXtensionsBinding.CreateBindingElements">
            <summary>
            Creates a collection that contains the binding elements that 
            are part of the current binding. 
            </summary>
            <returns>A BindingElementCollection containing binding elements that are part of current binding.</returns>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.MessageCompressionMode">
            <summary>
            Gets and sets the message compression mode used by the binding.
            </summary>
            <remarks>
            <para>
            When content negotiation is supported by the binding, the use of compression is negotiated between the 
            communication sides. 
            When content negotiation is not supported by the binding, compression is always applied to all
            message sent through the channel.
            </para>
            Compression is not applied when set to <b>None</b>.
            </remarks>         
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.MessageCompressionLevel">
            <summary>Gets and sets the compression level to apply when compression is enabled.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.MessageCompressionThreshold">
            <summary>
            Gets and sets the minimal size in bytes that a message must have in order to be compressed.
            </summary>
            <remark>
            <para> If the size of a message is less than the value of this property, that message will not be compressed. </para> 
            <para>The default value of this property is 0. If left unchanged, all messages will be compressed irrespective of their size.</para>
            <para>This property is supported only when message compression is enabled and either (a) the EnvelopeBehaviorEnabled is set to True,
            or (b) the transport used is LiteHTTP, SOAP/TCP, WebSocket or the system-provided TCP.</para>
            <para>If this property is set to a value greater than 0, a buffer of equivalent size may need to be allocated for 
            each message processed.</para> 
            <para> This property was introduced in version 5 of WCF-Xtensions. If one of the communicating sides has a compression threshold 
            of 0 or does not support a compression threshold at all, the other side must set the compression threshold to 0. </para> 
            </remark>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.MessageEncoding">
            <summary>
            Specifies the message encoding to be injected into the binding during configuration. 
            </summary>
            <remarks>
            Default value for this property is %BindingDefault:WcfxMessageEncoding%, which means that the message 
            encoding of the target binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.FastInfosetSettings">
            <summary> Gets and sets the settings for the Fast Infoset message encoding. 
            This settings are applied only when Fast Infoset message encoding is used.</summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WcfXtensionsBinding.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.IWebSocketChannel">
            <summary>
            Defines the WebSocket channel interface.  
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.Abort">
            <summary>
            Interrupt all ongoing operation and closes the network connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.Close">
            <summary>
            Wait for ongoing operation to be complete and closes the network connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.Close(System.TimeSpan)">
            <summary>
            Wait for ongoing operation to be complete during specified interval of time and closes the network connection.
            </summary>
            <param name="timeout">
            The interval of time to wait for ongoing operations to be completed, prior closing the connection.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
            Sends the batch of outbound messages to the remote side asynchronously.  
            </summary>
            <param name="messages"> The batch of
            A <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> to send.
            </param>
            <param name="timeout"> The interval of time during which the operation have to complete before timing out.</param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Sends a message within specified interval of time.
            </summary>
            <param name="message"> The message being sent.</param>
            <param name="timeout"> The interval of time during which the operation have to complete before timing out.</param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.ArraySegment{System.Byte})">
            <summary>
            Sends a binary message with a specified segment of byte array .
            </summary>
            <param name="message">
            The segment of byte array being sent as a payload.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.Byte[])">
            <summary>
            Sends a binary message with a specified array of bytes as a payload.
            </summary>
            <param name="buffer">
            The byte array being sent as a payload.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a binary message with a specified segment of array as a payload.
            </summary>
            <param name="buffer">
            The array with bytes being sent.
            </param>
            <param name="offset">
            The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
            The number of bytes to send.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends a binary message with a specified segment of array as a payload within specified interval of time.
            </summary>
            <param name="buffer">
            The array containing the bytes being sent.
            </param>
            <param name="offset">
            The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
            The number of bytes to send.
            </param>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.String)">
            <summary>
            Sends a text message with a specified string as a payload.
            </summary>
            <param name="text">
            The string being sent as a payload.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.String,System.TimeSpan)">
            <summary>
            Sends a text message with a specified string as a payload.
            </summary>
            <param name="text">
            The string being sent as a payload.
            </param>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage">
            <summary>
            Streams the binary message to the remote side.
            </summary>
            <returns>
            The stream to write the outbound message payload into.
            </returns>
            <remarks>
            <para>
            This method is part of the streaming API, it allows to stream messages of arbitary size to
            remote side and avoid buffering entire message in the memory.
            </para>
            <para>
            The stream returned by this methods, writes the message payload directly into WebSocket
            connection.
            </para>
            <para>
            Fragmentation and buffering are performed automaticaly. As soon as stream buffer have
            to be flushed, buffered bytes are sent as a message fragment and become available on
            remote side.
            </para>
            <para>
            If amount of bytes being written in single write operation is more than
            the size of stream buffer, then these bytes are getting combined with bytes
            already buffered and sent as a single fragment.
            </para>
            <para>
            You can force stream to send buffered bytes by calling Flush() method.
            </para>
            <para>
            You can stream any amount of data as payload of the message until you decide to close it.
            Closing the stream concludes the outbound message and final framement frame is
            sent to remote side to indicate the end of the message.
            </para>
            <para>
            The flow control is performed by TCP layer. The writing side is getting blocked
            if remote side input buffers are full. As faster remote side reads data, as faster the local
            side can continue sending.
            </para>
            <b>Note: WebSocket connection cannot stream more than one message concurrently.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessage(System.TimeSpan)">
            <summary>
            Streams the binary message to the remote side.
            </summary>
            <returns>
            The stream to write the outbound message payload into.
            </returns>
            <remarks>
            <para>
            This method is part of the streaming API, it allows to stream messages of arbitary size to
            remote side and avoid buffering entire message in the memory.
            </para>
            <para>
            The stream returned by this methods, writes the message payload directly into WebSocket
            connection.
            </para>
            <para>
            Fragmentation and buffering are performed automaticaly. As soon as stream buffer have
            to be flushed, buffered bytes are sent as a message fragment and become available on
            remote side.
            </para>
            <para>
            If amount of bytes being written in single write operation is more than
            the size of stream buffer, then these bytes are getting combined with bytes
            already buffered and sent as a single fragment.
            </para>
            <para>
            You can force stream to send buffered bytes by calling Flush() method.
            </para>
            <para>
            You can stream any amount of data as payload of the message until you decide to close it.
            Closing the stream concludes the outbound message and final framement frame is
            sent to remote side to indicate the end of the message.
            </para>
            <para>
            The flow control is performed by TCP layer. The writing side is getting blocked
            if remote side input buffers are full. As faster remote side reads data, as faster the local
            side can continue sending.
            </para>
            <b>Note: WebSocket connection cannot stream more than one message concurrently.</b>
            </remarks>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessageAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Sends a message within a specified interval of time asynchronously.
            </summary>
            <param name="message">
            The message being sent.
            </param>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessageAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="buffer">
            The array of bytes containing the bytes being sent.
            </param>
            <param name="offset">
            The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
            The number of bytes being sent.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessageAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="buffer">
            The array of bytes containing the bytes being sent.
            </param>
            <param name="offset">
            The offset of bytes being sent in a specified array.
            </param>
            <param name="count">
            The number of bytes being sent.
            </param>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessageAsync(System.String)">
            <summary>
            Sends a text message with a specified stirng a payload.
            </summary>
            <param name="text">
            The text payload of the message being sent.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendMessageAsync(System.String,System.TimeSpan)">
            <summary>
            Sends a text message with a specified stirng a payload.
            </summary>
            <param name="text">
            The text payload of the message being sent.
            </param>
            <param name="timeout">
            The interval of time during which the operation have to complete before timing out.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendPing">
            <summary>
            Sends the ping message.
            </summary>
            <remarks>
            The pong message is sent automatically when ping message is received.
            The <see cref="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> method of associated service will be called, 
            upon receiving the pong reply to the ping message.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.SendPing(System.Byte[])">
            <summary>
            Sends the ping message with a specified binary payload.
            </summary>
            <param name="payload">
            The array of bytes being sent as payload of the ping message.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSocketChannel.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
            Waits for outbound message queue size in bytes decrease below a specified limit within a
            specified interval of time.
            </summary>
            <param name="queueSize"> The number of bytes below which the queue size is expected decrease within
            the specified interval of time.
            </param>
            <param name="timeout">
            The interval of time to wait for the queue size to decrese below the specified limit.
            </param>
            <returns>
            Returns <b>true</b> if the queue size had decreased below specified; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.Context">
            <summary>
            The context object associated to the channel.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.ID">
            <summary>
             Gets and sets the string identifier of the channel.
            </summary>
            <remarks>
            By default this property is set to a GUID assigned by <see cref="T:Noemax.WebSockets.WebSocketService"/>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.Origin">
            <summary>
            Gets origin string negotiated during the WebSocket handshake.
            </summary>
            <remarks>
            The Origin string may be required by WebSocket server to identify the script that
            runs on the client side when WebSocket is used by a browser client. This optional
            header is exchanged during the WebSocket handshake, both the server and the client
            may drop a connection if the value of the Origin string does not match their
            expectation.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.Protocol">
            <summary>
            Gets and sets the instance of <see cref="T:Noemax.WebSockets.IWebSockets"/> to perform dispatching of inbound messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.PayloadMasking">
            <summary> Gets and sets whether the payload of outbound messages is masked.</summary>
        </member>
        <member name="P:Noemax.WebSockets.IWebSocketChannel.ServiceInstance">
            <summary>The instance of the IWebSocket handling inbount messages.</summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketFactory">
            <summary>Creates and manages client WebSocket connections.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketFactory.#ctor">
            <summary>Initialize a new instance of %WebSocketFactory%.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketFactory.Connect(System.String)">
            <summary>Creates a new WebSocket connection to the specified destination URI string.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketFactory.Connect(System.Uri)">
            <summary>Create a new WebSocket connection to the specified destination URI.</summary>
            <param name="uri">The URI to the WebSocket endpoint.</param> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.Protocol">
            <summary>Gets and sets the string identifying the sub-protocol used WebSocket client.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.Origin">
            <summary>Gets and sets the string identifying the origin of WebSocket client.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.Extensions">
            <summary>
            Gets and sets the string specifying extensions supported by the WebSocket client.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.TraceSource">
            <summary>
            Gets and sets the trace source to be used for tracing WebSocket activities.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.BypassProxyOnLocal">
            <summary>Gets and sets whether the factory should bypass local proxies when establishing a client connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.UseDefaultWebProxy">
            <summary>Gets and sets whether the factory should use default web proxy when establishing a client connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.ProxyAddress">
            <summary>Gets and sets the address of the web proxy to be used by the factory when establishing connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.ProxyCredentials">
            <summary>
            Gets and sets a credentials to be used to authenticated with HTTP proxy.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.ClientCredentials">
            <summary>
            Gets and sets a credentials to be used to authenticate with WebSocket server if it requires
            HTTP authentication.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.CompressionScheme">
            <summary>Gets and set whether the transport compression should be applied and what compression method to use 
            for compressing the traffic.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.CompressionLevel">
            <summary>Gets and sets the level of compression to be applied by the transport when transport compression is used.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketFactory.StreamUpgradeProvider">
            <summary>Gets and set the WCF StreamUpgradeProvider to be upgrade the stream of
            established connections.</summary>
            <remarks>
            Using the StreamUpgradeProvider
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMuxFrameWriter">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketListener">
            <summary>Listens on WebSockets endpoints, accepts and manages WebSocket connections.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.#ctor(System.Uri)">
            <summary>Initializes a new WebSocketListener instance with specified endpoint URI.</summary>
            <param name="listenUri">The URI of the endpoint to listen for client connections.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.Open">
            <summary>Opens the WebSocket endpoint and starts waiting for client connection to accept.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.Close">
            <summary>Stops accepting the client connections and closes the associated WebSocket endpoint.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>Begin asynchronous operation to accept client connection.</summary>
            <param name="callback">The AsyncCallback delegate that receives the notification of the asynchronous operation completion.</param>
            <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.EndAccept(System.IAsyncResult)">
            <summary>Concludes asynchronous opertation to accept client connection.</summary>
            <param name="result">The IAsyncResult returned by a call to the BeginAccept method.</param> 
            <returns>An accepted client connection.</returns> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketListener.Accept">
            <summary>Accepts client connection from associated endpoint.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.CompressionScheme">
            <summary>Specifies the compression scheme to be used by WebSocket connections.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.CompressionLevel">
            <summary>Gets and sets the level of compression to be applied by the transport when transport compression is used.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.TraceSource">
            <summary>
            Gets and sets TraceSource used for tracing the WebSocket events.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.Uri">
            <summary>Gets the URI WebSocket endpoint associated to the listener.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.Protocol">
            <summary>Gets and sets the string identifying the sub-protocol used WebSocketListener.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketListener.StreamUpgradeProvider">
            <summary>Gets and set the WCF StreamUpgradeProvider to be upgrade the stream of established connections.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.Close">
            <summary>Perform a graceful shutdown of WebSocket connection and closes the socket.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.Close(System.TimeSpan)">
            <summary>Perform a graceful shutdown of WebSocket connection within specified period of time and closes the socket.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage(System.Int32)">
            <summary>Reads a complete message from the WebSocket connection.</summary>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage(System.Int32,System.TimeSpan)">
            <summary>Reads a complete message from the WebSocket connection.</summary>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage(System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>Reads a complete message from the WebSocket connection.</summary>
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage(System.ServiceModel.Channels.BufferManager,System.Int32,System.TimeSpan)">
            <summary>Reads a complete message from the WebSocket connection.</summary>
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage">
            <summary>Reads the message from the WebSocket connection and represents it as %System.IO.Stream%.</summary>
            <remarks>
            Message is not completely received after call is complete, returned Stream object represents an input stream that 
            can be used to continue reading message frame from the connection in streaming mode. The end of this stream will
            indicate the end of the message.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.ReceiveMessage(System.TimeSpan)">
            <summary>Reads the message from the WebSocket connection and represents it as %System.IO.Stream%.</summary>
            <param name="timeout">The timeout during which the message is expected to be completely received.</param>
            <remarks>
            Message is not completely received after call is complete, returned Stream object represents an input stream that 
            can be used to continue reading message from the connection until end of the mesasge. The end of this stream 
            will indicate the end of the message.        
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage">
            <summary>Initiates a new outgoing message and returns a Stream that write the message into connection.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.TimeSpan)">
            <summary>Initiates the message and returns a Stream that writes message into connection.</summary>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendTextMessage">
            <summary>Initiates a new outgoing message and returns a StreamWriter that write the message into connection.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendTextMessage(System.TimeSpan)">
            <summary>Initiates the message and returns a StreamWriter that writes message into connection.</summary>
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>Sends byte array as binary message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.ArraySegment{System.Byte},System.TimeSpan)">
            <summary>Sends byte array as binary message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>Sends byte array as binary message.</summary>
            <param name="buffer">The array containing the bytes of the message to be sent.</param> 
            <param name="offset">The offset in the array where message to be sent starts.</param> 
            <param name="count">The number of bytes starting from the offset until the end of the message.</param> 
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.String)">
            <summary>Sends string of text as UTF-8 encoded text message.</summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendMessage(System.String,System.TimeSpan)">
            <summary>Sends string of text as UTF-8 encoded text message.</summary>
            <param name="text">The text to send as UTF-8 encoded WebSocket message.</param> 
            <param name="timeout">An TimeSpan that specifies the interval of time to wait for message to be sent.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendPing">
            <summary>
            Sends the PING message to the remote endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendPing(System.Byte[])">
            <summary>
            Sends the PING message to the remote endpoint.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.SendPong(System.ArraySegment{System.Byte})">
            <summary>
            Pong message MUST always be send asynchronously otherwise if reading thread blocks while the sending
            Pong message, connectio might become dead locked.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.BeginReceiveMessage(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to receive a message that has a state object associated with it. 
            </summary>
            <param name="callback">The AsyncCallback delegate that receives the notification of the asynchronous operation completion.</param>
            <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.BeginReceiveMessage(System.AsyncCallback,System.Object,System.TimeSpan)">
            <summary>
            Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. 
            </summary>
            <param name="callback">The AsyncCallback delegate that receives the notification of the asynchronous 
            operation completion.</param>
            <param name="state">An object, specified by the application, that contains state information associated
            with the asynchronous operation.</param>
            <param name="timeout">The Timespan that specifies the interval of time to wait for a message 
            to become available.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.EndReceiveMessage(System.IAsyncResult)">
            <summary>Completes an asynchronous operation to receive a message</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.EndReceiveMessage(System.IAsyncResult,Noemax.WebSockets.WebSocketInboundMessage@)">
            <summary>Completes an asynchronous operation to receive a message</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param>
            <param name="message">The reference to the variable where received message is going to be saved.</param>
            <returns>
            <b>true</b> if message was received succefully, <b>false</b> if WebSocket connection is being closed.
            </returns> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.EndReceiveMessage(System.IAsyncResult,System.ServiceModel.Channels.BufferManager,System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>Completes an asynchronous operation to receive a message and present it as byte array segment.</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param> 
            <param name="bufferManager">The buffer manager to provide buffers while receiving the message.</param>
            <param name="maxMessageSize">The maximum size limit for message being read.</param>
            <param name="message">The segment of array of bytes containing the message bytes.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketBase.EndReceiveMessage(System.IAsyncResult,System.String@)">
            <summary>Completes an asynchronous operation to receive a message and decodes it as UTF-8 string.</summary>
            <param name="result">The IAsyncResult returned by a call to one of the BeginReadMessage methods.</param> 
            <param name="text">The the message decoded as UTF-8 a string.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.DefaultReceiveTimeout">
            <summary>Gets and sets a default timeout to be used when receiving incoming messages.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.DefaultSendTimeout">
            <summary>Gets and sets a default timeout to be used when sending outgoing messages.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.CanSend">
            <summary>
            Gets the value that indicate whether WebSocket is able to send messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.CanReceive">
            <summary>
            Gets the value that indicate whether WebSocket is expected to receive messages.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.Protocol">
            <summary>Gets a string that defines a sub-protocol used by this WebSocket connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.Origin">
            <summary>Gets a string that defines an Origin of this WebSocket connection.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.PayloadMasking">
            <summary>Gets and sets whether the payload sent by the socket should be masked with random data.</summary>
            <remark>WebSocket specification requires random masking of the payload from the client to the server,
            in order to prevent potential cross protocol attacks. This property is <b>true</b> by default on the client side 
            and <b>false</b> by default on the server side.</remark>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketBase.Extensions">
            <summary>
            Gets a Sec-WebSocket-Extensions header string negotiated during the WebSocket handshake. 
            </summary>
            <remarks>
            This string specifies the set of extensions that were agreed to be used during communication by
            both the server and the client side.
            </remarks>       
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMessageInputStream">
            <summary>
            Expose a WebSocket message as a stream and provides methods and properties for streaming 
            WebSocket messages.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketMessageInputStream.ReadToFrameEnd">
            <summary>
            Reads an entire frame or remaining bytes of the frame, depending on current stream position.
            </summary>
            <returns>
            The bytes of the frame payload.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketMessageInputStream.IsFrameFinal">
            <summary>
            Gets whether the current message frame is final.
            </summary>
            <remarks>
            When message is not fragmented its first and only frame is final.
            </remarks>
            <value> Returns <b>true</b> if current frame is final; otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketMessageInputStream.FrameBytesRemaining">
            <summary>
            Gets the number of bytes remaining to be read until the end of the current frame.
            </summary>
            <remark>
            When stream is possitioned on the start of the frame payload, this property returns the
            total number of bytes in the frame. As frame is being consumed this property returns the
            number of bytes remaining to be read until the end of the current frame.
            </remark>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketMessageInputStream.BytesBuffered">
            <summary>
            Gets the number of bytes buffered in the stream buffer.
            </summary>
            <remarks>
            WebSocketMessageInputStream does not buffer entire frame, its internal buffer is fixed, 
            so it may contain a part of the frame or multiple frames depending on the frame size.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketEventArgs">
            <summary>
            Provides the arguments of the event triggered by the <see cref="T:Noemax.WebSockets.WebSocket"/> class.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.TextData">
            <summary>
            The payload of the text message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.BinaryData">
            <summary>
            The payload of the binary message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.Message">
            <summary>
            The <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> object associated to the message. 
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketEventArgs.Exception">
            <summary>
            Exception thrown during WebSocket operation.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocket">
            <summary>
            Provides the simplified WebSocket client.
            </summary>
            <remarks>
            The WebSocket class is the simple client that handles all WebSocket events 
            through the event handlers.
            
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the WebSocket class with specified target URI.
            </summary>
            <param name="uri">The URI of the target service endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.Open">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.Open(System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.Close">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.Close(System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.Abort">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendTextMessage">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.ArraySegment{System.Byte})">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.Byte[])">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.String)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.String,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessage(System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessageAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessageAsync(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessageAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessageAsync(System.String)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendMessageAsync(System.String,System.TimeSpan)">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendPing">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.SendPing(System.Byte[])">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocket.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnOpen">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnClose">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnPing">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnPong">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnError">
            <summary/>
        </member>
        <member name="E:Noemax.WebSockets.WebSocket.OnMessage">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.DispatchSynchronizationContext">
            <summary>
            Used for posting events to UI thread.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.MaxOutboundFrameSize">
            <summary>
            Gets and sets the maximum size of the outbound message queue.
            </summary>
            <remarks>
            If asynchronous send operations would result in outbound queue size exceeding the specified limit, 
            it fails with <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> thrown.
            
            Synchronous send operations does not use outbound message queue.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.Context">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.PayloadMasking">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.ID">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.Protocol">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocket.Origin">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketService">
            <summary>
            Provides the base class implementation for <see cref="T:Noemax.WebSockets.IWebSockets"/> interface. 
            </summary>
            <remarks>
            <para>
            WebSocketService is recommended to use as the base class for the <see cref="T:Noemax.WebSockets.IWebSockets"/> service 
            implementations. It provides methods and properties for managing the list of associated 
            <see cref="T:Noemax.WebSockets.WebSocketChannel"/>, sending and receiving messages through all connected channels
            and message broadcasting. 
            </para>
            <para>
            This class should be extended to provide application specific logic. 
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.IWebSockets">
            <summary>
            Defines the contract that a service must implement in order to receive message and manage connections.
            </summary>
            <remarks>
            <para>
            It preferable to use <see cref="T:Noemax.WebSockets.WebSocketService"/> as the base class for service implementation, rather 
            than implementing the IWebSockets interface, WebSocketService implements most of the methods 
            defined by IWebSockets and provides most of required functionality. You need to implemented IWebSockets 
            interface only if have to provide completelly custom message processing, dispatching and connection 
            management.
            </para>
            <para>
            Methods of IWebSocket are being called by working threads that handle inbound messages and 
            connections. It should be expected that multiple threads can call a same instace of IWebSockets 
            concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnHandshake(Noemax.WebSockets.WebSocketHandshake)">
            <summary>
            This is method is called during the WebSocket handshake, to IWebSocket implementation to accept 
            or to decline it.
            </summary>
            <param name="handshake">The WebSocketHandshake instance.</param>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)">
            <summary>
            This method is called when an inbound message is being received.
            </summary>
            <param name="channel">The channel through which the inbound message is being received.</param>
            <param name="message">The inbound message being received.</param>
            <remarks>
            WebSocket working thread does not buffer entire message prior calling this method,
            <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/> provides the methods to either buffer the message
            prior consuming it or to consume it as a stream.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnPing(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when an inbound PING frame is received.
            </summary>
            <param name="channel">The channel through which the inbound PING frame was received.</param>
            <param name="payload">The payload of the PING frame.</param>
            <remarks>
            PONG reply is sent automatically unless connection is closed during the call 
            to the OnPing method.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when an inbound PONG frame is received.
            </summary>
            <param name="channel">The channel through which the inbound PONG frame was received.</param>
            <param name="payload">The payload of the PONG frame.</param>        
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            This method is called when a new channel being open.
            </summary>
            <param name="channel">The channel being open.</param>
            <remarks>
            Both on the server and on the client side this method is called when connection from the 
            client to the server is established and WebSocket handshake is complete.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)">
            <summary>
            This method is called when a channel encounters an error.
            </summary>
            <param name="channel">The channel that encounters the error.</param>
            <param name="e">The exception related to the error.</param>
            <remarks>
            All errors encountered by the channel during sending/receiving/dispatching messages
            are reported through this method. The channel that encountered the error is not necessary 
            disconnected or closed, use the <see cref="P:Noemax.WebSockets.WebSocketChannel.Connected"/> property to determine
            the status of the channel.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.IWebSockets.OnClose(Noemax.WebSockets.WebSocketChannel,System.Int16,System.String)">
            <summary>
            This method is called when a channel is being closed.
            </summary>
            <param name="channel">The channel being closed.</param>
            <param name="statusCode">The status code provided by the remote side to identify the reason 
            for closing the connection.</param>
            <param name="reason">The text description of the status code.</param>
            <remarks>
            <para>
            If the connection is being closed due to receiving a CLOSE control frame from the remote side, 
            the <i>statusCode</i> and <i>reason</i> parameters may contain information 
            provided by the remote side to identify the reason for closing the connection.
            </para>
            <para>
            When this method is called, messages might still be sent successfully to the remote side 
            for a short period of time. However, no more messages are expected to be received from 
            the remote side.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Noemax.WebSockets.WebSocketService"/>.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnHandshake(Noemax.WebSockets.WebSocketHandshake)">
            <summary>
            Handles the event triggered when WebSocket handshake is being performed.
            </summary>
            <param name="handshake">The WebSocketHandshake object providing handshake parameters.</param>
            <remarks>
            Override this method to evaluated headers that are exchanged during the WebSocket handshake or set
            server HTTP cookies.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnOpen(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Handles the event triggered when a new channel is being open and associated 
            to the service instance.
            </summary>
            <param name="channel">The channel being open and associated to the service instance.</param>
            <remarks>
            <para>
            The base implementation adds the channel to the list of associated channels and
            sets <see cref="P:Noemax.WebSockets.WebSocketChannel.ID"/> to a random literal GUID string.
            </para>
            <para>
            When overriding this method you can provide additional application specific logic.
            For example, you can instantiate a new instance of the service and  pass the channel 
            to this instance by calling its OnOpen method, instead of OnOpen of the base class. 
            This way you can control the number of channels handled by each instance of the 
            service or group channels and service instances by any other criteria.
            </para>
            <para>
            Adding the channel to more than one service instances is also possible, if channel is associated 
            to more than one instance of WebSocketService, all service instances will be broadcasting 
            messages to the channel. But only one instance specified by <see cref="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance"/> 
            will be handling inbound messages.
            </para>
            <para>
            Channel can be removed from the list of associated channels 
            using the <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,Noemax.WebSockets.WebSocketInboundMessage)">
            <summary>
            Handles the inbound message based on the payload type.
            Override this method if you need to provide alternative functionality or use the streaming API.
            </summary>
            <param name="channel">The channel through which the message is being received.</param>
            <param name="message">The message being received.</param>
            <remarks>
            <para>
            The base implementation of this method evaluates the type of the data being received 
            in the message payload by reading the opcode in the first frame. If message is fragmented
            it's getting buffered and interpreted as text or the binary byte array depending 
            on whether this message is text or binary.
            Then the message is dispateched to <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)"/> or 
            <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> depending on the type of the message.
            </para>
            <para>
            Overriding this method allows the use of alternative message processing using
            the streaming API exposed by the <see cref="T:Noemax.WebSockets.WebSocketInboundMessage"/>
            class.
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)">
            <summary>
            Handles a text message received from a specified channel.
            </summary>
            <param name="channel">The channel through which the message was received.</param>
            <param name="text">The text payload of the message.</param>
            <remarks>This method does nothing and should to be overriden to provide application
            specific functionality.</remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            Handles a binary message received from a specified channel.
            </summary>
            <param name="channel">The channel through which the message was received.</param>
            <param name="buffer">The binary payload of the message.</param>
            <remarks>This method does nothing and should to be overriden to provide application
            specific functionality.</remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnPing(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when a PING frame received from a specified channel.
            </summary>
            <param name="channel">The channel through which the PING frame was received.</param>
            <param name="payload">The payload of the PING frame.</param>
            <remarks>
            <para>
            The PONG response to the PING message is sent automatically, unless the channel is 
            closed within OnPing method implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})">
            <summary>
            This method is called when  a PONG frame received from a specified channel.
            </summary>
            <param name="channel">The channel through which PONG frame was received.</param>
            <param name="payload">The payload of the PONG frame.</param>
            <remarks>
            This method can be overrided if alternative functionality is needed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)">
            <summary>
            Handles a error occured in a specified channel.
            </summary>
            <param name="channel">The channel that encounters the error..</param>
            <param name="e">The exception related to the error. </param>
            <remarks>
            <para>
            All errors encountered by the channel during sending/receiving/dispatching messages
            are reported through this method. The channel that encountered the error is not necessary 
            disconnected or closed, use the <see cref="P:Noemax.WebSockets.WebSocketChannel.Connected"/> property to determine
            the status of the channel.
            </para>
            <para>
            The base implementation calls <see cref="M:Noemax.WebSockets.WebSocketChannel.Abort"/> which
            drops the channel connection and then removes the channel from
            the list of associated channels using 
            <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/>. 
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.OnClose(Noemax.WebSockets.WebSocketChannel,System.Int16,System.String)">
            <summary>
            This method is called when a channel is being closed.
            </summary>
            <param name="channel">The channel being closed.</param>
            <param name="statusCode">The status code provided by the remote side to identify the reason 
            for closing the connection.</param>
            <param name="reason">The text description of the status code.</param>
            <remarks>
            <para>
            If the connection is being closed due to receiving a CLOSE control frame from the remote side, 
            the <i>statusCode</i> and <i>reason</i> parameters may contain information 
            provided by the remote side to identify the reason for closing the connection.
            </para>
            <para>
            When this method is called, messages might still be sent successfully to the remote side 
            for a short period of time. However, no more messages are expected to be received from 
            the remote side.
            </para>
            <para>
            When this method is called the base implementation is removes the channel from the list of 
            associated channels. 
            </para>
            <para>
            You can override this method to provide alternative functionallity.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.GetChannels">
            <summary>
            Returns the list of the channels associated to the service instance.
            </summary>
            <returns>An array of WebSocketChannel objects.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendPing">
            <summary>
            Sends the PING message to all channels associated to the service instance.
            </summary>
            <remarks>
             Once PING messages are sent, OnPong method will be called for each PONG reply received.
             
             This method does not block while PING frame is sent, all PING frames are sent asynchronously.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendPing(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel})">
            <summary>
            Sends the PING message to the specified list of channels.
            </summary>
            <remarks>
            Once PING messages are sent, OnPong method will be called for each PONG reply received.
             
            This method does not block while PING frame is sent, all PING frames are sent asynchronously.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(System.String)">
            <summary>
            Sends the text message to all channels associated to the service instance.
            </summary>
            <param name="text">The text message to send.</param>
            <remarks>
            The message is sent synchronously by iterating the list of associated channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, where slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(System.ArraySegment{System.Byte})">
            <summary>
            Sends the binary message to all channels associated to the service instance.
            </summary>
            <param name="message">The segment of array of bytes referencing the bytes to be sent.</param>
            <remarks>
            The message is sent synchronously by iterating the list of associated channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, where slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the binary message to all channels associated to the service instance.
            </summary>
            <param name="buffer">The array containing message to be sent.</param>
            <param name="offset">The offset in the array where ther binary message starts.</param>
            <param name="count">The number of bytes in the binary message.</param>
            <remarks>
            The message is sent synchronously by iterating the list of associated channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, where slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends the message to all channels associated to the service instance.
            </summary>
            <param name="message">The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage">WebSocketOutboundMessage</see> object representing the message.</param>
            <remarks>
            The message is sent synchronously by iterating the list of associated channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, where slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(System.Collections.Generic.IEnumerable{Noemax.WebSockets.WebSocketChannel},Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends the message to the list of specified channels associated to the service instance.
            </summary>
            <param name="channels">The list of channels to send message too.</param>
            <param name="message">The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage">WebSocketOutboundMessage</see> object representing the message.</param>
            <remarks>
            The message is sent synchronously by iterating the list of channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, since slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendMessage(Noemax.WebSockets.WebSocketChannel[],Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends the message to the list of specified channels associated to the service instance.
            </summary>
            <param name="channels">The list of channels to send message too.</param>
            <param name="message">The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage">WebSocketOutboundMessage</see> object representing the message.</param>
            <remarks>
            The message is sent synchronously by iterating the list of channels sequentially.
            
            This method is not effective for broadcasting messages to large number of channels, since slow channels
            will delay the broadcasting.
            
            Use this method in order to send message synchronously in cases when service instance handles a single 
            channel or very few channels.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketChannel[],Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
            Sends the batch of messages to the list of channels asynchronously. 
            </summary>
            <param name="channels">The list of channels to send messages too.</param>
            <param name="messages">The batch of messages to be send.</param>
            <remarks>
            Broadcasting the batch of messages to the list of channels asynchronously is more effient than using SendMessage.
            
            The batch of messages is getting enqueued into each channel outbound message queue and does not block the 
            calling thread until the batch is sent. Once channel is ready to send next batch of messages entire 
            outbound queue is treated as single batch and sent asynchronously.
            
            Application can control the size of outbound queues by reading the WebSocketChannel.OutboundQueueSize 
            property or setting the WebSocketChannel.MaxOutboundQueueSize property.
            
            This method is thread safe and can be called by multiple threads concurrently. 
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
            Sends the batch of messages to all associated channels asynchronously. 
            </summary>
            <param name="messages">The batch of messages to be send.</param>
            <remarks>
            Broadcasting the batch of messages to the list of channels asynchronously is more effient than using SendMessage.
            
            The batch of messages is getting enqueued into each channel outbound message queue and does not block the 
            calling thread until the batch is sent. Once channel is ready to send next batch of messages entire 
            outbound queue is treated as single batch and sent asynchronously.
            
            Application can control the size of outbound queues by reading the WebSocketChannel.OutboundQueueSize 
            property or setting the WebSocketChannel.MaxOutboundQueueSize property.
            
            This method is thread safe and can be called by multiple threads concurrently. 
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.Broadcast(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Broadcasts the message to all channels associated to the service instance.
            </summary>
            <param name="message">The message to broadcast.</param>
            <remarks>
            Broadcast() performs message broadcasting to all connected channels in most efficient manner.
            
            Instead of sending message into each channel sequencially as SendMessage(), Broadcast() broadcasts
            messages asynchronously to all channels and also preforms grouping of messages into batches 
            whenever possible.
            
            This method is thread safe and can be called by multiple working threads concurrently. Calling this method
            from multiple threads concurrently does not block those threads until current batch is sent, but helps to 
            group messages into batches and improves the throughput.
            
            No aritificial delay is used to group messages into batches, in high throughput environment 
            they are formed while previous batch is being broadcasted without delaying transmition.
            
            Read <see cref="M:Noemax.WebSockets.WebSocketService.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">SendBatchAsync</see> for more details.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.AddChannel(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Adds the channel to the list of channels associated to the service instance.
            </summary>
            <param name="channel">The channel to associate with the service instance.</param>
            <remarks>
            All channels accepted by the service instance through are transparently added to the list 
            of associated channels . 
            
            AddChannel can be used to associated the channel to a different service instances. For example chat
            client channel can be moved from one chat root into another. In order to implement this you can call 
            RemoveChannel on the instance representing the current chat room and call AddChannel of 
            another instance.
            
            The same applies to the client side, you can add multiple client channels to the already exiting
            service instance and use it for broadcasting messages to multiple servers.
            
            <para>
            Note if channel is added to more than one instance of WebSocketService, all instances will be 
            broadcasting messages to the channel. But only the instance specified by 
            <see cref="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance"/> will be handling inbound messages. Channel can be removed
            from the list by using <see cref="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)"/>.
            </para>
            </remarks>  
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.RemoveChannel(Noemax.WebSockets.WebSocketChannel)">
            <summary>
            Removes the channel from the list of channels associated to the service instance.
            </summary>
            <param name="channel">The channel to associate with the service instance.</param>
            <remarks>
            All channels accepted by the service instance through the call to OnOpen method are getting added to the
            list of associated channels automatically. 
            
            RemoveChannel can be used to tranfer accepted channels between different service instances. 
            
            For example:
            
            Chat client channel can be moved from one chat root into another. In order to implement this you can call 
            RemoveChannel on the instance representing one chat room and call AddChannel of the instance representing
            another chat room.
            
            The same applies to the client side, you can add established client channels to the already exiting
            service instance, in order to use it for broadcasting messages to multiple servers.
            </remarks>  
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CreateClient(System.Uri)">
            <summary>
            Creates a client channel associated to the service.
            </summary>
            <param name="uri">The URI of the target server endpoint.</param>
            <returns>Returns a channel connecting the service instance to remote endpoint.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CreateClient(System.Uri,System.String,System.String)">
            <summary>
            Creates a client channel associated to the service.
            </summary>
            <param name="uri">The URI of the target server endpoint.</param>
            <param name="origin">The origin header to be used during WebSocket handshake.</param>
            <param name="protocol">The protocol header to be used during WebSockt handshake</param>
            <returns></returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CloseChannels">
            <summary>
            Closes all channels associated to the service instance.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CloseChannels(System.TimeSpan)">
            <summary>
            Closes all channels associated to the service instance within specificate interval of time.
            </summary>
            <param name="timeout">The maximum amount of time to wait for gracful disconnection.</param>
            <remarks>
            If service fails to disconnect all channels gracfully in specified interval of time, it will
            close remaining channels without performing final close handshake, or waiting for 
            ongoing operations to compelte.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.CalcTotalOutboundQueueSize">
            <summary>
            Gets the total sizes of all outbound message queues associated to the service instance.
            </summary>
            <remarks>
            Calling this method calculate the sum of all outbound queue sizes, this involves thread synchronization
            and can be processing intensive.
            
            The size of outbound message queue does not indicate the size of memory being used by message in the queue, 
            but amount of data to be sent.
            
            The outbound queue size equal 0, doesn't indicate all messages have been delivered to remote side, 
            last asynchronous send operation can still be in progress and last batch of messages being sent.
            
            This method is intended to be used for reporting the status of the service instance rather
            than flow control.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.WaitForOutboundQueue(System.TimeSpan)">
            <summary>
            Blocks the current thread until outbound queues of all associated channels are empty, 
            or timeout expires.
            </summary>
            <param name="timeout">The amount of time to wait for outbound queues to decrease.</param>
            <returns>
            True if outbound queues met the specified size limit within specified period of time.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketService.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
            Blocks the current thread until outbound queues of each associated channel to decrease 
            bellow specified size limit, or timeout expires.
            </summary>
            <param name="queueSize">The size the queue is expected to have at the end of the wait operation.</param>
            <param name="timeout">The amount of time to way for outbound queues to decrease.</param>
            <returns>
            True if outbound queues met the specified size limit within specified period of time.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.ChannelCount">
            <summary>
            Gets the number of channels associated to the service instance.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.MaxReceivedMessageSize">
            <summary>
            Gets and sets the maximum message size limit for inbound messages.
            </summary>
            <remarks>
            <para>
            This value applies to inbound messages when <see cref="T:Noemax.WebSockets.WebSocketService"/>
            has to buffer message prior processing it, e.g. when messages is
            dispatched to <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.String)"/>
            or <see cref="M:Noemax.WebSockets.WebSocketService.OnMessage(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> methods.
            </para>
            <para>
            If message size exceeds the specified limit the error is reported through
            <see cref="M:Noemax.WebSockets.WebSocketService.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)"/> while connection is closed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.Encoding">
            <summary>
            Gets and sets the Encoding instance that is used for decoding text messages.
            </summary>
            <remarks>
            You can set this property your own Encoding if you want to change default UTF-8 decoding 
            settings. By default this property is set to the static Encoding.UTF8 property value.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketService.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Channels.IWebSocketContract">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.IWebSocketContract.OnMessage(Noemax.WCFX.Channels.WebSocketChannelEvent)">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Channels.WebSocketBehaviorAttribute">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketChannel">
            <summary>
            Provides methods and properties for exchanging messages over WebSocket connection.
            </summary>
            <remarks>
            <para>
            WebSocketChannel provides methods and properties for sending messages through
            the WebSocket connection. The messages received through the channel are dispatched by 
            the <see cref="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance"/> instance associated to the channel.
            </para>
            <para>
            This class is used on both ends of WebSocket connection and provides trully duplex 
            communication betwen client and server.
            </para>    
            </remarks>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.#ctor">
            <summary>
            Initializes a new instance of WebSocketChannel.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Abort">
            <summary>
            Interrupt all ongoing operation and closes the network connection.
            </summary>
            <remarks>
            Works the same way as <see cref="M:Noemax.WebSockets.WebSocketChannel.Close"/> method but does not wait for
            ongoing operations to be completed.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Close">
            <summary>
            Wait for ongoing operation to be complete and closes the network connection.
            </summary>
            <remarks>
            Prior connection is closed, WebSocketChannel initates sends the CLOSE message to remote side
            and waits for ongoing inbound and outbound transfer operations to be completed.
            
            The default timeout for this delay is 5 seconds. 
            
            Once all ongoing operations are complete or 5 seconds passed, connection is getting 
            closed and all incomplete transfers are aborted.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.Close(System.TimeSpan)">
            <summary>
            Wait for ongoing operation to be complete during specified interval of time and closes the network connection.
            </summary>
            <param name="timeout">
            The interval of time to wait for ongoing operations to be completed, prior closing the connection.
            </param>
            <remarks>
            Prior connection is closed, WebSocketChannel waits for ongoing inbound and outbound transfers
            to be completed for specified period of time. Once timeout expire or all ongoing transfers are complete,
            connection is getting closed and all associated resource are released.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.ArraySegment{System.Byte})">
            <summary>
            Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="message">The segment of array being sent as a payload.</param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.ArraySegment{System.Byte},System.TimeSpan)">
            <summary>
            Sends a binary message with a specified array segment as a payload.
            </summary>
            <param name="message">The segment of array being sent as a payload.</param>
            <param name="timeout"> The interval of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Sends a binary message with a specified array segment as a payload.
             </summary>
             <param name="buffer">The buffer containing the bytes of message payload.</param>
             <param name="offset">The index in the buffer where the message payload starts.</param>
             <param name="count">The length of the message payload in bytes.</param>
            <remarks>
             Using this methods does not always guaranty that the message is going to be sent as a single fragment.
             For example, when compression extensions are used, message may have to be fragmented due to
             extension requirements.
             </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.Byte[])">
            <summary>
            Sends a binary message with a specified array of bytes as a payload.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends a binary message with a specified array segment as a payload within a specified interval of time.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer when message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <param name="timeout"> The interval of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.String)">
            <summary>
            Sends a text message with a specified string as a payload.
            </summary>
            <param name="text">The text payload of the message.</param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.String,System.TimeSpan)">
            <summary>
            Sends a text message with a specified string as a payload within a specified interval of time.
            </summary>
            <param name="text">The text payload of the message.</param>
            <param name="timeout"> The interval of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of the time.
            </param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Sends a message within a specified interval of time.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout"> The interval of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of time.
            </param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(Noemax.WebSockets.WebSocketOutboundMessage)">
            <summary>
            Sends a message within a specified interval of time.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout"> The interval of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of time.
            </param>
            <remarks>
            Using this methods does not always guaranty that the message is going to be sent as a single fragment.
            For example, when compression extensions are used, message may have to be fragmented due to
            extension requirements.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage">
            <summary>
            Streams the binary message to the remote side.
            </summary>
            <returns>
            The stream to write the outbound message payload into.
            </returns>
            <remarks>
            <para>
            This method is part of the streaming API, it allows to stream messages of arbitary size to
            remote side and avoid buffering entire message in the memory.
            </para>
            <para>
            The stream returned by this methods, writes the message payload directly into WebSocket
            connection.
            </para>
            <para>
            Fragmentation and buffering are performed automaticaly. As soon as stream buffer have
            to be flushed, buffered bytes are sent as a message fragment and become available on
            remote side.
            </para>
            <para>
            If amount of bytes being written in single write operation is more than
            the size of stream buffer, then these bytes are getting combined with bytes
            already buffered and sent as a single fragment.
            </para>
            <para>
            You can force stream to send buffered bytes by calling Flush() method.
            </para>
            <para>
            You can stream any amount of data as payload of the message until you decide to close it.
            Closing the stream concludes the outbound message and final framement frame is
            sent to remote side to indicate the end of the message.
            </para>
            <para>
            The flow control is performed by TCP layer. The writing side is getting blocked
            if remote side input buffers are full. As faster remote side reads data, as faster the local
            side can continue sending.
            </para>
            <b>Note: WebSocket connection cannot stream more than one message concurrently.</b>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessage(System.TimeSpan)">
            <summary>
            Streams the binary message to the remote side.
            </summary>
            <returns>
            The stream to write the outbound message payload into.
            </returns>
            <remarks>
            <para>
            This method is part of the streaming API, it allows to stream messages of arbitary size to
            remote side and avoid buffering entire message in the memory.
            </para>
            <para>
            The stream returned by this methods, writes the message payload directly into WebSocket
            connection.
            </para>
            <para>
            Fragmentation and buffering are performed automaticaly. As soon as stream buffer have
            to be flushed, buffered bytes are sent as a message fragment and become available on
            remote side.
            </para>
            <para>
            If amount of bytes being written in single write operation is more than
            the size of stream buffer, then these bytes are getting combined with bytes
            already buffered and sent as a single fragment.
            </para>
            <para>
            You can force stream to send buffered bytes by calling Flush() method.
            </para>
            <para>
            You can stream any amount of data as payload of the message until you decide to close it.
            Closing the stream concludes the outbound message and final framement frame is
            sent to remote side to indicate the end of the message.
            </para>
            <para>
            The flow control is performed by TCP layer. The writing side is getting blocked
            if remote side input buffers are full. As faster remote side reads data, as faster the local
            side can continue sending.
            </para>
            <b>Note: WebSocket connection cannot stream more than one message concurrently.</b>
            </remarks>
            <param name="timeout"> The interval of time during which the message is expected to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of time.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendTextMessage">
            <summary>
            Streams the text message to the remote side.
            </summary>
            <returns>
            The text writer to write the outbound message payload into.
            </returns>
            <remarks>
            Streams fragmented text message to remote side using the stream provided by
            <see cref="M:Noemax.WebSockets.WebSocketChannel.SendMessage"/>.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendTextMessage(System.TimeSpan)">
            <summary>
            Streams the text message to the remote side.
            </summary>
            <returns>
            The text writer to write the outbound message payload into.
            </returns>
            <remarks>
            Streams fragmented text message to remote side using the stream provided by
            <see cref="M:Noemax.WebSockets.WebSocketChannel.SendMessage"/>.
            </remarks>
            <param name="timeout"> The interval of time during which the message is expected to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified interval of time.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendPing">
            <summary>
            Sends the ping message.
            </summary>
            <remarks>
            The pong message is sent automatically when ping message is received. The <see cref="M:Noemax.WebSockets.IWebSockets.OnPong(Noemax.WebSockets.WebSocketChannel,System.ArraySegment{System.Byte})"/> method of associated
            service will be called, upon receiving the pong reply to the ping message.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendPing(System.Byte[])">
            <summary>
            Sends the ping message with a specified binary payload.
            </summary>
            <param name="payload">
            The array of bytes being sent as payload of the ping message.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessageAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the message asynchronously.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer where message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <remarks>
            <para>
            When message is sent asynchronously it is first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages 
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para> 
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize, 
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessageAsync(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Sends the message asynchronously.
            </summary>
            <param name="buffer">The buffer containing the message payload.</param>
            <param name="offset">The index in the buffer where message payload starts.</param>
            <param name="count">The length of the message payload in bytes.</param>
            <param name="timeout"> The amount of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
            <para>
            When message is sent asynchronously it is first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages 
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para> 
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize, 
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessageAsync(System.String)">
            <summary>
            Sends the message asynchronously.
            </summary>
            <param name="text">The text payload of the message.</param>
            <remarks>
            <para>
            When message is sent asynchronously it is first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages 
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para> 
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize, 
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessageAsync(System.String,System.TimeSpan)">
             <summary>
             Sends the message asynchronously.
             </summary>
             <param name="text">The text payload of the message.</param>
             <param name="timeout"> The amount of time during which to wait for message to be sent. TimeoutException
             will be thrown if message is not completely sent within the specified period of the time.
             </param>
            <remarks>
             <para>
             When message is sent asynchronously it is first getting added into the outbound message queue.
             If another asynchronous send operation is currently in progress, then the messages
             in the outbound queue are sent once ongoing send operation is complete.
             </para>
             <para>
             This method is threadsafe and can be called by multiple working threads concurently.
             </para>
             <para>
             You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
             and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
             </para>
             <para>
             If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
             <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
             limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
             </para>
             <para>
             Warning: Application must not use synchronous and asynchrnous send methods concurrently.
             </para>
             </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendMessageAsync(Noemax.WebSockets.WebSocketOutboundMessage,System.TimeSpan)">
            <summary>
            Sends the message asynchronously.
            </summary>
            <param name="message">WebSocketOutboundMessage value containing the message.</param>
            <param name="timeout"> The amount of time during which to wait for message to be sent. TimeoutException
            will be thrown if message is not completely sent within the specified period of the time.
            </param>
            <remarks>
            <para>
            When message is sent asynchronously it is first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para>
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize,
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[],System.TimeSpan)">
            <summary>
            Sends the batch of the messages asynchronously.
            </summary>
            <param name="messages">The batch of messages to be sent.</param>
            <param name="timeout"> The amount of time during which to wait for messages to be sent. TimeoutException
            will be thrown if messages is not completely sent within the specified period of the time.
            </param>
            <remarks>
            <para>
            When message is sent asynchronously it's first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages 
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para> 
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize, 
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendBatchAsync(Noemax.WebSockets.WebSocketOutboundMessage[])">
            <summary>
            Sends the batch of the messages asynchronously.
            </summary>
            <param name="messages">The batch of messages to be sent.</param>
            <remarks>
            <para>
            When message is sent asynchronously it's first getting added into the outbound message queue.
            If another asynchronous send operation is currently in progress, then the messages 
            in the outbound queue are sent once ongoing send operation is complete.
            </para>
            <para>
            This method is threadsafe and can be called by multiple working threads concurently.
            </para> 
            <para>
            You can control the size of the outbound message queue by using the <see cref="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize"/>
            and <see cref="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize"/> peroperties.
            </para>
            <para>
            If outbound queue size exceed the limit specified by MaxOutboundQueueSize, 
            <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> is thrown. Messages bigger than the MaxOutboundQueueSize
            limit, cannot be sent asynchronously, unless MaxOutboundQueueSize value is increased to required size.
            </para>
            <para>
            Warning: Application must not use synchronous and asynchrnous send methods concurrently. 
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.SendClose(System.Int16,System.String,System.TimeSpan)">
            <summary>
            Sends the CLOSE control frame with specified statusCode and reason string.
            </summary>
            <param name="statusCode">The status code in range of 1000-4999 that specifies the reason why connection is being closed.</param>
            <param name="reason">The string description of the status. Not required to be human readable but UTF-8 repesentation 
            of the string should not exceed 125 bytes.</param>
            <param name="timeout">The amount of time to wait for CLOSE frame to be sent, prior TimeoutException is thrown.</param>
            <remarks>
            When CLOSE frame is sent to remote side, no more messages or fragments can be sent though the conenction.
            Local side can continue receiving pending messages until connection is closed by remote side.
            
            SendClose() does not close the connection,  <see cref="M:Noemax.WebSockets.WebSocketChannel.Close"/> method need to be called to close 
            connection and release all associated resources.
            </remarks> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketChannel.WaitForOutboundQueue(System.Int64,System.TimeSpan)">
            <summary>
            Waits until oubound queue decrease below specified limit.
            </summary>
            <param name="queueSize">The limit below which the queue size is expected to decrease.</param>
            <param name="timeout">The amount fo time to wait for queue to decrease below specified limit.</param>
            <returns><b>true</b> if the queue decreased below specified limit; <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Context">
            <summary>
            The context object associated to the channel. 
            </summary>
            <remarks>
            This property allows to associate any application specific object to the channel.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.ID">
            <summary>
            Gets and sets the string identifier of the channel.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Origin">
            <summary>
            Gets origin string negotiated during the WebSocket handshake.
            </summary>
            <remarks>
            The Origin string may be required by WebSocket server to identify the script that
            runs on the client side when WebSocket is used by a browser client. This optional
            header is exchanged during the WebSocket handshake, both the server and the client
            may drop a connection if the value of the Origin string does not match their
            expectation.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Protocol">
            <summary>
            Gets the protocol negotiated during the WebSocket handshake.
            </summary>
            <remarks>
            Protocol string value is getting exchanged during the WebSocket handshake.
            Applications can use this value to negotiate the type of the protocol that is going to be used
            during communication e.g. 'chat', 'echo', 'atom' e.t.c.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.PayloadMasking">
            <summary>
            Gets and sets whether the payload of outbound messages is masked.
            </summary>>
            <remarks>
            <para>
            By default all messages from the client to the server are masked, while all messages from the server to
            the client are not masked, as required by the WebSocket protocol specification.
            </para>
            <para>
            You can disable or enable masking my setting this property, but strict WebSocket implementations 
            may drop the connection if masking requirements are not followed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.ServiceInstance">
            <summary>
            Gets and sets the instance of <see cref="T:Noemax.WebSockets.IWebSockets"/> to perform dispatching of inbound messages.
            </summary>
            <remarks>        
            <para>
            By default this property is assigened by <see cref="T:Noemax.WebSockets.WebSocketClient"/> and <see cref="T:Noemax.WebSockets.WebSocketServer"/> 
            when new connection is established. Using this property a you can change the instace that dispatches 
            inbound message at any point during communication.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundQueueSize">
            <summary>
            Gets and sets the maximum size of the outbound message queue.
            </summary>
            <remarks>
            <para>
            If asynchronous send operations would result in outbound queue size exceeding the specified limit, 
            it fails with <see cref="T:Noemax.WebSockets.WebSocketQueueSizeException"/> thrown.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.MaxOutboundFrameSize">
            <summary>
            Gets and sets the maximum size limit for outbound data frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.OutboundQueueSize">
            <summary>
            Gets the current size of the outbound message queue in bytes.
            </summary>
            <remarks>
            <para>
            The size of outbound queue does not indicate an amount of memory used by the queue, but it 
            represents the number of bytes that is peinding to be sent.
            </para>
            <para>
            When message is added to the queue, it's payload is not getting copied, but referenced
            until the message is sent, so corresponding buffers should not be modified during asynchronous 
            send operation.
            </para>
            <para>
            Only messages that are being sent asynchronously getting stored in the outbound queue. 
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.Connected">
            <summary>
            Gets whether the channel connection is considered being alive.
            </summary>
            <remarks>
            <para>
            This property reports the last operation state of the channel rather than performs the actuall
            TCP connectivity checks.
            </para>
            <para>
            When this property value is <b>true</b>, it indicates that channel is not being closed and 
            last send/recieve operations where completed succesfully.
            </para>
            <para>
            When this property value is <b>false</b>, it indecates that channel is either being closed 
            or closed. This does not exclude the possiblity that channel is in transition state and 
            may still be able to send or receive messages.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketChannel.DefaultSendTimeout">
            <summary>
            Gets and sets the default timeout interval, to be used when sending messages.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.AssemblyInitializer">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClient`1">
            <summary>
            Provides the WebSocket protocol client connection.
            </summary>
            <typeparam name="TService">
            The  <see cref="T:Noemax.WebSockets.IWebSockets">IWebSockets</see> implementation
            providing the application logic for handling connections and messages.
            </typeparam>
            <remarks>
            <para>
            The instance of TService class must implement IWebSockets interface to handle messages received from the server side.
            </para>
            <para>
            The TService instance will be created and initiallized automatically unless already existing instance is 
            provided to WebSocketClient constructor. When already existing instance is shared between multiple 
            WebSocketClient objects, it can be used for broadcasting messages through multiple client connections.
            </para>
            </remarks>    
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClient">
            <summary>
            Provides the WebSocket protocol client connection.
            </summary>    
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.Uri)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.Uri,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the subprotocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create``1(System.String,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the subprotocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.Uri,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the subprotocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Create(System.String,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the subprotocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The JRI of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.#ctor(System.Uri,System.String,System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">The uri of the target WebSocket server.</param>
            <param name="origin">The string identifying the origin of the client.</param>
            <param name="protocol">The string specifying the subprotocol used by the client.</param>
            <param name="instance">The instance of the IWebSockets implementation.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Open">
            <summary>
            Opens the client connection to the server endpoint.
            </summary>
            <remarks>
            Once client connection to the server endoint is established, <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated
            TService instance is called and client is ready to receive messages from server side.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.OnGetInstance">
            <summary>
            Create an IWebSockets instance to handle messages received by the channel.
            </summary>
            <returns>
            When overriden returns an instance of IWebSocket service to handle message received by the channel. 
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Open(System.TimeSpan)">
            <summary>
            Opens the client connection to the server endpoint.
            </summary>
            <param name="timeout">The period of time during which client is expected to connect to the server.</param>
            <remarks>
            <para>
            If connection cannot be established within specified <b>timeout</b>, TimeoutException is thrown.
            </para>
            <para>
            Once client connection to the server endoint is established, <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated
            TService instance is called and client is ready to receive messages from server side.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.OpenAsync">
            <summary>
            Opens the client connection to the server asynchronously.
            </summary>
            <remarks>
            <para>
            <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated service instance will be called when connection is open, 
            or OnError if connection attempt failed.
            </para>
            <para>
            Once client connection to the server endoint is established, <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> of associated
            TService instance is called and client is ready to receive messages from server side.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.OpenAsync(System.TimeSpan)">
            <summary>
            Opens the client connection to the server asynchronously.
            </summary>
            <param name="timeout">The period of time during which client is expected to connect to the server.</param>
            <remarks>
            The <see cref="M:Noemax.WebSockets.IWebSockets.OnOpen(Noemax.WebSockets.WebSocketChannel)"/> method of TService instance, will be called when connection is open.
            The <see cref="M:Noemax.WebSockets.IWebSockets.OnError(Noemax.WebSockets.WebSocketChannel,System.Exception)"/> method of TService instance, if connection could not be established.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient.Close(System.TimeSpan)">
            <summary>
            Closes the to the client connection and releases associated resources.
            </summary>
            <param name="timeout">
            The timeout to wait for ongoing transfer to be complete prior connection is terminated.
            </param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.CompressionScheme">
            <summary>
            Gets and sets the transport compression scheme to be used by the client.
            </summary>
            <remarks>
            The transport compression scheme will apply only in case if the server supports specified compression
            extension, otherwise the value of this property will not have any impact on communication.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Protocol">
            <summary>
            Gets and sets the string specifying the sub-protocol used by the client.
            </summary>
            <remarks>
            The Protocol header might be required by WebSocket servers that accepts only clients using the specific
            sub-protocol.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Origin">
            <summary>
            Gets and sets the Origin string that identifies the origin of the script
            running on the client side. 
            </summary>
            <remarks>
            The Origin string might be required by the WebSocket server that also handle connections from
            the scripts running on the brower clients.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Extensions">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.CookieContainer">
            <summary>
            Gets and sets the CookieContainer to manage cookies set by the server side. By default
            this property is set to Nothing and WebSocket client ignores all cookies.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Cookies">
            <summary>
            Gets the collection of cookies associated to the URI of the client in the CookieContainer. 
            If CookieContainer property is not set, the this property returns nothing.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.PayloadMasking">
            <summary>
            Gets and sets whether the payload of outbound messages is masked.
            </summary>>
            <remarks>
            <para>
            By default all messages from the client to the server are masked, while all messages from the server to
            the client are not masked, as required by the WebSocket protocol specification.
            </para>
            <para>
            You can disable or enable masking by setting this property, but strict WebSocket implementations
            will drop the connection if masking requirements are not followed.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.Security">
            <summary>
            Provides properties that apply when the SSL/TLS transport secuirty is enabled.
            </summary>
            <remarks>
            <para>
            SSL/TLS transport security is getting enabled automatically when the target server URI
            has the "wss" schema e.g "wss://myservice.com".
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClient.MaxLogicalChannels">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.Uri)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes the new instance of the class.
            </summary>
            <param name="uri">
            The uri of the target WebSocket server.
            </param>
            <param name="origin">
            The string identifying the origin of the client.
            </param>
            <param name="protocol">
            The string specifying the subprotocol used by the client.
            </param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClient`1.OnGetInstance">
            <summary>
            Returns an new instance of IWebSocket to handle messages received by the channel.
            </summary>
            <returns>An instance of IWebSocket.</returns>
        </member>
        <member name="T:Noemax.WebSockets.X509CertificateValidationCallback">
            <summary>
            The callback delegate providing the remote X509 certificate validation.
            </summary>
            <param name="certificate"></param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketClientSecurity">
            <summary>
            Provides properties that apply when SSL/TLS transport secuirty is enabled.
            </summary>
            <remarks>
            <para>
            If the URI of the target WebSocket server includes 'wss' or 'https' schema, SSL/TLS transport
            security is enabled automatically and server is expected to perform SSL/TLS handshake
            and provide server certificate. Communication would fail with AuthenticationException in
            cases when the target server does not support SSL/TLS transport security.
            </para>
            <para>
            Note this class and all associated properties are not included into cryptography free
            versions of assemblies.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClientSecurity.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClientSecurity.SetClientCertificate(System.Byte[],System.Char[])">
            <summary/>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketClientSecurity.SetClientCertificate(System.Byte[],System.String)">
            <summary/>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClientSecurity.ServerCertificate">
            <summary>
            Gets and sets the certificate that the target server is expected to provide during server authentication. 
            </summary>
            <remarks>
            <para>
            Default value is Null. If this property is not Null, the certificate specified by this property is getting 
            compared to the server certificate provided by remote side during the SSL/TLS authentication. If they do 
            not match each other, than server authentication fails and AuthenticationException is thrown by the 
            <see cref="M:Noemax.WebSockets.WebSocketClient.Open"/> method.
            </para>
            <para>
            If <value>ServerCertificate</value> does match the certificate provided by remote side, then the remote
            side certificate is accepted as valid. This type of authentication is useful when remote side is using self
            signed certificate and cannot be validated by certification authority.
            </para>
            </remarks>
        </member>
        <member name="E:Noemax.WebSockets.WebSocketClientSecurity.OnValidateCertificate">
            <summary>
            Occures  during server certificate validation. Provide an event handler to perform an
            additional custom certificate validation.
            </summary>
            <remarks>
            <para>
            The event handler is expected to throw an exception if a remote certificate is not valid; otherwise
            the it is considered being valid.
            </para>
            <para>
            Note prior this event occures, WebSocketClient performs internal certificate validation according to
            its security settings. Please check the <see cref="P:Noemax.WebSockets.WebSocketClientSecurity.TargetHost">TargetHost</see>
            and <see cref="P:Noemax.WebSockets.WebSocketClientSecurity.CheckCertificateRevocation">CheckCertificateRevocation</see> properties 
            for more details.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClientSecurity.TargetHost">
            <summary>
            Gets and sets the string identifying the host the remote server certificate expected to specify in the
            the Subject field of certificate e.g. 'CN=www.myhost.com'.
            </summary>
            <remarks>
            If host name specified by the server certificate does not match neither the host name specified by the
            target URI used to connect to the server nor the value of this property, then the server authentication 
            fails.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClientSecurity.CheckCertificateRevocation">
            <summary>
            Gets and sets whether the client should check the server certificate chain for revocation.
            </summary>
            <remarks>
            Note: the self-signed certificates will fail the revocation check, so set this property to <b>false</b>. 
            When using self-signed certificate.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketClientSecurity.ClientCertificate">
            <summary>
            Gets and sets the client certificate to be used when client authentication is required by remote side.
            </summary>
            <remarks>
            Client certificate is used for client authentication and presented to the server side during SSL/TLS handshake.
            In order to use client certificate for client authentication, application should have
            an access the private key associted to the client certificate.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMessageType">
            <summary>
            Specifies the type of the WebSocket message content.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageType.Text">
            <summary>
            The content of the message is UTF-8 encoded text.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageType.Binary">
            <summary>
            The content of the message is binary octets.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageType.Custom">
            <summary>
            The OP code of the message is within the 'data frame' range but meaning of the OP cpde is unknown.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketMessageState">
            <summary>
            Specifies the state of the WebSocket message.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Created">
            <summary>
            Message was created but not yet sent.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Read">
            <summary>
            Message was read but not yet closed.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.WebSocketMessageState.Closed">
            <summary>
            Message is closed and should not be used anymore.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketInboundMessage">
            <summary>
            Provides the methods and properties for processing WebSocket message.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsString(System.Int32)">
            <summary>
            Buffers entire message in memory and decode it as UTF-8 encoded string.
            </summary>
            <param name="maxReceivedMessageSize">The maximum number to buffer while receiving the message.</param>
            <returns>The string decoded from the message content.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsString(System.Text.Encoding,System.Int32)">
            <summary>
            Buffers entire message in memory and decode it as a string using specified encoding.
            </summary>
            <param name="maxReceivedMessageSize">The maximum number to buffer while receiving the message.</param>
            <param name="encoding">The encoding to be used to decode the payload as a string.</param> 
            <returns>The string decoded from the message content.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsText">
            <summary>
            Returns the text reader for reading message as text without ever buffering entire message 
            in memory.
            </summary>
            <returns>Returns the TextReader for decoding the content of the message.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the reader returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            
            <para>
            As the application consumes data using the stream the underlying channel will continue 
            reading directly from TCP connection employing native flowcontrol provided by TCP. This means that
            remote side blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the stream as
            faster remote side will be able to send more data.
            </para>
            
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the stream, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsText(System.Text.Encoding)">
            <summary>
            Returns the text reader for reading message as text without ever buffering entire message 
            in memory.
            </summary>
            <returns>Returns the TextReader for decoding the content of the message.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the reader returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            <para>
            As the application consumes data using the stream the underlying channel will continue 
            reading directly from TCP connection employing native flowcontrol provided by TCP. This means that
            remote side blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the stream as
            faster remote side will be able to send more data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the stream, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
            <param name="encoding">The instance of Encoding to be used for converting the payload to the text.</param> 
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsStream">
            <summary>
            Returns the content of the message as stream of bytes, which allows to read the message
            as it's getting received without buffering entire content in the memory.
            </summary>
            <returns>The stream to read the message content.</returns>
            <remarks>
            <para>
            This method is part of the streaming API. Using the stream returned by this method you can consume
            large messages without ever loading entire message into memory. Only the part of the message is 
            initially buffered. 
            </para>
            <para>
            As the application consumes data using the stream the underlying channel will continue 
            reading directly from TCP connection employing native flowcontrol provided by TCP. This means that
            remote side  blocks when local side input buffer is full and it resumes as soon as 
            local side reads the data from the input buffers. As faster you read  from the stream as
            faster remote side is allowed to send data.
            </para>
            <para>
            In case if message is fragmented, subsequent frames will be received and handled automatically as
            application reads from the stream, until the final frame consumed. Once end of the message is
            reached the read operation will return 0 bytes.
            </para>
            <para>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsBytes(System.Int32)">
            <summary>
            Buffers the entire message and returns it as an array of bytes.
            </summary>
            <param name="maxSize">The maximum size of the buffer to allocated.</param>
            <returns>Returns the array of bytes representing the content of entire message.</returns>
            <remarks>
            Since forward only streaming API is used to read the message, this method can be called only once.
            Subsequent calls to this method would result in InvalidOperationException thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.Close">
            <summary>
            Closes the message and releases all associated resources. 
            </summary>
            <remarks>
            If message is fragmented and  there are more frames of the same message to be read from 
            the WebSocket connection, the call to this method would block reading all remaining frames 
            from the channel until they are read or channel is closed.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.ReadAsOutbound(System.Int32)">
            <summary>
            Buffers entire message payload in the buffer and represents it as outbound message that can be sent
            through the same or another connection."/&gt;.
            </summary>
            <param name="maxSize">The maximum number of bytes to buffer.</param>
            <returns>The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> value.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.op_Implicit(Noemax.WebSockets.WebSocketInboundMessage)~System.IO.Stream">
            <summary>
            Provides implicit convertion that represents an inbound message as Stream object.
            </summary>
            <param name="message">The message to represent as the stream.</param>
            <returns>The stream object to read the message.</returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketInboundMessage.op_Implicit(Noemax.WebSockets.WebSocketInboundMessage)~System.IO.TextReader">
            <summary>
            Provides implicit convertion that represents an inbound message as TextReader.
            </summary>
            <param name="message">The message to represent as TextReader.</param>
            <returns>The TextReader to read the message.</returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.Type">
            <summary>
            Gets the WebSocketMessageType associated to the message content.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.State">
            <summary>
            Gets the state of the WebSocketMessage object.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.OpCode">
            <summary>
            Gets the OpCode associated to the message.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketInboundMessage.Fragmented">
            <summary>
            Gets the value which indicates whether the message was received fragmented.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Represents the buffered message to be sent though WebSocket connection.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struct.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.String)~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="text">The text to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with text payload.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.Byte[])~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from array of bytes to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="binary">The binary data to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with binary payload.
            </returns>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketOutboundMessage.op_Implicit(System.ArraySegment{System.Byte})~Noemax.WebSockets.WebSocketOutboundMessage">
            <summary>
            Performs an implicit conversion from array of bytes to <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/>.
            </summary>
            <param name="segment">The binary data to use as the payload of the message.</param>
            <returns>
            The <see cref="T:Noemax.WebSockets.WebSocketOutboundMessage"/> with binary payload.
            </returns>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Buffer">
            <summary>
            Gets the buffer representing the payload of the message.
            </summary>
            <value>
            The array of bytes containing the payload of the message.
            </value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Offset">
            <summary>
             Gets the index on the first byte of the message payload in the buffer.
            </summary>
            <value>
            The index of the first byte of the message payload in the buffer.
            </value>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketOutboundMessage.Count">
            <summary>
            Gets or sets the size of the message payload in bytes.
            </summary>
            <value>
            The size of the message payload in bytes.
            </value>
        </member>
        <member name="M:Noemax.WebSockets.ControlFrameEventArgs.SendPong">
            <summary>
            Sends the Pong frame as reply to Ping frame to remote side.
            </summary>
            <remarks>
            Pong frame is sent asynchronously and not guarantied to be delivered to remote side when call
            to the method is complete.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.ControlFrameEventArgs.Socket">
            <summary>
            Gets WebSocket object associated to the control frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.ControlFrameEventArgs.OpCode">
            <summary>
            Gets the OpCode associated to the control frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.ControlFrameEventArgs.Payload">
            <summary>
            Get the payload associated to the control frame.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.ControlFrameEventArgs.Handled">
            <summary>
            Gets and sets whether the control frame is already handled.
            </summary>
            <remark>
            This property is initially set to <b>false</b>. Application should set this property to true if control frame
            was handled. Otherwise, control frame will be handled automatically once OnControlFrame event returns control
            back to WebSocket.
            </remark>
        </member>
        <member name="T:Noemax.WCFX.Channels.WebSocketEventType">
            <summary>
            Defines the type of the WebSocket message captured by WCF-Xtensions.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnOpen">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnClose">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnError">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnMessage">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnPing">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketEventType.OnPong">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Channels.WebSocketChannelEvent">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketChannelEvent.#ctor">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketChannelEvent.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
            <summary/>
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSocketChannelEvent.Channel">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.Headers">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.Properties">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.Version">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.EventType">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.Error">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.CloseCode">
            <summary>
            Gets and sets the numerical status code provided by remote side when closing the connection. 
            Applicable only when when the <see cref="P:Noemax.WCFX.Channels.WebSocketChannelEvent.EventType"/> is equal to OnClose.
            </summary>
            <remarks>OnClose event may have associated status code specified by this property and text description 
            which can be get from the <see cref="P:Noemax.WCFX.Channels.WebSocketChannelEvent.TextPayload"/> property.</remarks> 
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.BinaryPayload">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.TextPayload">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketChannelEvent.InboundMessage">
            <summary/>
        </member>
        <member name="T:Noemax.WebSockets.MessageEndCallback">
            <summary> Delegate defining a callback that is called when WebSocket had processed message to the end.</summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketException">
            <summary>
            Provides the expection raised during WebSocket communications.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.String)">
            <summary>
            Initializes a new instance of WebSocketException.
            </summary>
            <param name="message">The text message of exception.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of WebSocketException. 
            </summary>
            <param name="message">The text message of exception.</param>
            <param name="inner">The inner exception related to this exception.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketException.StatusCode">
            <summary>
            Gets and sets the corresponding close frame status code, if any.
            </summary>
            <remarks>
            Is sent to remote side prior connection is closed and provides description
            of the problem that resulted in connection being closed.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketProtocol">
            <summary>
            Provides the exception thrown when connection is being closed due to violation
            of WebSocket protocol by remote side.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketProtocol.#ctor">
            <summary>
            Initializes a new instance of WebSocketProtocol.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketProtocol.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of WebSocketProtocol.
            </summary>
            <param name="inner">The inner exception that caused this exception to be raised.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketQueueSizeException">
            <summary>
            Provides the exception thrown when the size of outbound message queue, exceeds 
            the specified limit.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketQueueSizeException.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of WebSocketQueueSizeException.
            </summary>
            <param name="maxOutboundQueueSize">The queue size limit in bytes that was exceeded and caused exception.</param>
            <param name="outboundQueueSizeWouldHave">The size of message queue that would be reached if exception would not be thrown.</param>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketQueueSizeException.MaxOutboundQueueSize">
            <summary>
            The queue size limit in bytes that was exceeded and caused exception.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketQueueSizeException.OutboundQueueSizeWouldHave">
            <summary>
            Gets the size of message queue that would be reached if exception would not be thrown.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketBasicImpl">
            <summary>Provides methods and properties for communicating using WebSocket transport protocol.</summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketUsernamePasswordCredentials">
            <summary>
            Credentials used for basic client authentication using username and password.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketUsernamePasswordCredentials.Username">
            <summary>The username.</summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketUsernamePasswordCredentials.Password">
            <summary>The password associated to the username.</summary>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketHandshake">
            <summary>
            Provides method and properties for evaluating the WebSocket handshake prior it is accepted
            by the local side.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshake.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the WebSocketHandshake class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketHandshake.SetCookie(System.Net.Cookie)">
            <summary>
            Sets the HTTP cookie to be sent to the client during WebSocket handshake. 
            </summary>
            <param name="cookie">
            The HTTP cookie to be sent to the client.
            </param>
            <remarks>
            This method can be used only the server side during WebSocket handshake to send client a cookie. 
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Via">
            <summary>
            The Uri of the WebSocket endpoint which performs the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Protocol">
            <summary>
            Gets and sets the sub-protocol header exchanged during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Origin">
            <summary>
            Gets and sets the Origin value exchanged during WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Extensions">
            <summary>
            Gets and sets extensions exchanged during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Context">
            <summary>
            Gets and sets the context object that should be assigned to the channel at the end 
            of the handshake. This value will be saved into the WebSocketChannel.Context property
            when channel is created.
            </summary>
            <remarks>
            Context property can be used to store any information associated to the channel during the
            handshake or later on in channel lifetime, e.g. it can store the reference on client credentials 
            or session ids assigned to the channel by the application e.c.t.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Cookies">
            <summary>
            Gets the list of cookies exchnaged between client and server during the WebSocket handshake.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketHandshake.Accept">
            <summary>
            Gets and sets whether the WebSocket handshake is accepted by the local side.
            </summary>
            <remarks>
            If this property is set to <b>false</b> then handshake will be aborted and WebSocket connection
            will not be established. By default this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.CompressionScheme">
            <summary>
            Specifies the compression scheme to be used by WebSocket.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.NxLzf3">
            <summary>
            LZF3 compression method is applied only on the frame payload leaving frame headers uncompressed. 
            This compression scheme is getting applied prior payload is masked and does not suffer from client to
            server payload masking, but benefit from the reusing compression state between frames.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.NxLzf4">
            <summary>
            LZF4 compression method is applied only on the frame payload leaving frame headers uncompressed. 
            This compression scheme is getting applied prior payload is masked and does not suffer from client to
            server payload masking, but benefit from the reusing compression state between frames.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.Deflate">
            <summary>
            DEFLATE compression method is applied only on the frame payload leaving frame headers uncompressed. 
            This compression scheme is getting applied prior payload is masked and does not suffer from client to
            server payload masking, but benefit from the reusing compression state between frames.
            </summary>
        </member>
        <member name="F:Noemax.WebSockets.CompressionScheme.Auto">
            <summary>
            This compression scheme specifies that compression is to be negotiated with remote side automatically. 
            Compression schemes that actually applied during communication will depend on local and remote side
            preferences. If remote side does not support any of available compression schemes, compression not will 
            be used.
            </summary>
        </member>
        <member name="T:Noemax.WebSockets.UserNamePasswordValidationCallback">
            <summary>
            Callback delegate used for basic client authentication.
            </summary>
            <param name="username">The username associated to the client connection.</param>
            <param name="password">The password associated to the username.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServer`1">
            <summary>
            Provides the WebSocket protocol server.
            </summary>
            <typeparam name="TService">
            The  <see cref="T:Noemax.WebSockets.IWebSockets">IWebSockets</see> implementation
            providing the logic for handling connections and incomming mesages.
            </typeparam>
            <remarks>
            <para>
            The WebSocketServer class provides methods and properties for hosting on one or more WebSocket 
            service endpoints. TService class must implement the <see cref="T:Noemax.WebSockets.IWebSockets"/> interface to provide 
            the application specific functionality.
            </para>
            <para>
            AddEndpoint(Uri) method can be used to create the endpoint with a specified URI. If TService instance 
            is not provided, it is created automatically once the first client connection is accepted. You can use 
            AddEndpoint(Uri,TService) overload to create a endpoint for already created instance of TService.
            </para>
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Open"/> starts listening on all endpoints.
            </para> 
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Close"/> closes all endpoints and release all associated resources.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServer">
            <summary>
            Provides the WebSocket protocol server.
            </summary>   
            <remarks>
            <para>
            The WebSocketServer class provides methods and properties for hosting on one or more WebSocket 
            service endpoints. 
            </para>
            <para>
            Use <see cref="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.Uri)"/> and <see cref="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.Uri,Noemax.WebSockets.IWebSockets)"/>  to add
            endpoints to the server.
            </para>
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Open"/> starts listening on all endpoints.
            </para> 
            <para>
            <see cref="M:Noemax.WebSockets.WebSocketServer.Close"/> closes all endpoints and release all associated resources.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.Uri)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets implementation. 
            </summary>
            <typeparam name="TService">The type that must implement the IWebSockets interface.</typeparam> 
            <param name="uri">The URI of the new endpoint.</param>    
            <remarks>
            An new instance of TService is initialized automatically once the first client connection is  accepted. 
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint``1(System.String)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets implementation. 
            </summary>
            <typeparam name="TService">The type that must implement the IWebSockets interface.</typeparam> 
            <param name="uri">The URI of the new endpoint.</param>    
            <remarks>
            An new instance of TService is initialized automatically once the first client connection is  accepted. 
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.Uri,Noemax.WebSockets.IWebSockets)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
            <param name="instance">The instance of IWebSockets for the endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.AddEndpoint(System.String,Noemax.WebSockets.IWebSockets)">
            <summary>
            Adds a new endpoint with specified URI and specified IWebSockets instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
            <param name="instance">The instance of IWebSockets for the endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.Open">
            <summary>
            Opens the server and start listening for client connections on all endpoints.
            </summary>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer.Close">
            <summary>
            Closes all the server endpoints and releases all associated resources.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.MaxLogicalChannels">
            <summary>
            Gets and sets the maximum number of logical channels per network connection.
            </summary>
            <remarks>
            <para>
            If the value of this property is set to the number larger than 1, then mux extension will
            be enabled on all endpoints of this WebSocketListener. This will enable mux extension
            capable client to establish logical subschannels and multilex message of multiple logical channels
            over single network connection.
            </para>
            <value>
            This property cannot be set to value lower than 1.
            </value>
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.TraceSource">
            <summary>
            Gets and sets TraceSource for tracing events generated by the server and underlying components.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServer.Security">
            <summary>
            Gets the server security settings that are applied when SSL/TLS security is enabled.
            </summary>
            <remarks>
            SSL/TLS security is enabled <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.Required"/> property is set to <b>true</b> or when the service endpoint
            URI includes 'wss' or 'https' schema. It's recommended to use <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.Required"/> property rather than relly on the URI, to make sure that security
            is forced on all endpoints.
            If SSL/TLS security is enabled the <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.ServerCertificate"/> must be set to the valid X509 certificate, 
            otherwise server with fail to start and <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer`1.AddEndpoint(System.Uri)">
            <summary>
            Adds a new endpoint with specified URI and specified TService instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServer`1.AddEndpoint(System.String)">
            <summary>
            Adds a new endpoint with specified URI and specified TService instance. 
            </summary>
            <param name="uri">The URI of the new endpoint.</param>
        </member>
        <member name="T:Noemax.WebSockets.WebSocketServerSecurity">
            <summary>
            Provides the WebSocket server security settings that are applied when SSL/TLS transport security is enabled.
            </summary>
            <remarks>
            SSL/TLS security is enabled <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.Required"/> property is set to <b>true</b> or when the service endpoint
            URI includes 'wss' or 'https' schema. It's recommended to use <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.Required"/> property rather than relly on the URI, to make sure that security
            is forced on all endpoints.
            If SSL/TLS security is enabled the <see cref="P:Noemax.WebSockets.WebSocketServerSecurity.ServerCertificate"/> must be set to the valid X509 certificate, 
            otherwise server with fail to start and <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:Noemax.WebSockets.WebSocketServerSecurity.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.Required">
            <summary>
            Gets and sets whether the SSL/TLS security is enabled for all endpoints.
            </summary>
            <remarks>
            Setting this property to true ensures that security is getting enabled for all 
            endpoints defined for the server.
            
            If this property is set to false then only endpoints that have "wss" schema e.g.
            'wss://www.myserver.com' will have transport security enabled.
            </remarks> 
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.ServerCertificate">
            <summary>
            Gets and sets the certificate to be used by the server.
            </summary>
            <remarks>
            This property MUST be set to the valid X509Certificate when SSL/TLS security is enabled, 
            otherwise InvalidOperationException exception will be thrown by the
            <see cref="M:Noemax.WebSockets.WebSocketServer.Open">Open</see> method.
            </remarks>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.RequireClientCertificate">
            <summary>
            Gets and sets whether the server should require clients to provide the their certificate
            for authentication.
            </summary>
        </member>
        <member name="P:Noemax.WebSockets.WebSocketServerSecurity.CheckCertificateRevocation">
            <summary>
            Gets and sets whether the server should check the client certificate chain for revocation.
            </summary>
            <remarks>
            Note: the self-signed certificates will fail the revocation check. 
            When using self-signed certificates, set this property to <b>false</b>, 
            </remarks> 
        </member>
        <member name="E:Noemax.WebSockets.WebSocketServerSecurity.OnValidateCertificate">
            <summary>
            Occures when a client certificate validation is being validated by the server. Provide an the event
            handler to perform an additional custom certificate validation.
            </summary>
            <remarks>
            <para>
            The event handler is expected to throw an exception if client certificate is not valid; otherwise
            the it is considered being valid.
            </para>
            <para>
            Note prior this event occures, WebSocketServer validates certificate according to
            its security settings. Please check the <see cref="P:Noemax.WebSockets.WebSocketClientSecurity.CheckCertificateRevocation">
            CheckCertificateRevocation</see> properties for more details.
            </para>
            </remarks> 
        </member>
        <member name="F:Noemax.WCFX.Channels.WebSockets.WebSocketStreamedInput._waitHandle">
            ***************************************************************************************
        </member>
        <member name="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">
            <summary>
            Represents the binding element used to specify the WebSocket transport protocol for transmitting messages. 
            </summary>    
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.#ctor">
            <summary>
                Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>.
                <overloads>Initializes a new instance of
                <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>.</overloads>
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.#ctor(Noemax.WCFX.Channels.WebSocketTransportBindingElement)">
            <summary>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>.
            </summary>
            <overloads>
            Initializes a new instance of
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>.
            </overloads>        
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a listener
            for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel listener stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a value that indicates whether the current binding can build a channel
            factory for a specified type of channel and context.
            </summary>
            <returns>
            	<strong>true</strong> if the specified channel factory stack can be built on the
            service; otherwise, <b>false</b>
            </returns>
            <param name="context">
            The <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            factory.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory creates.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelListener">IChannelListener</see> of
            type <span class="parameter">TChannel</span> for the specified context
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            listener.
            </param>
            <typeparam name="TChannel">The type of channel the channel listener accepts</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of
            channel for a specified context.
            </summary>
            <returns>
            An
            <see cref="T:System.ServiceModel.Channels.IChannelFactory">IChannelFactory</see> of
            type <span class="parameter">TChannel</span> for the specified context.
            </returns>
            <param name="context">
            The
            <see cref="T:System.ServiceModel.Channels.BindingContext">BindingContext</see> for the
            channel.
            </param>
            <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.Clone">
            <summary>
            Creates a new <b>WebSocketTransportBindingElement</b> object initialized from the
            current one.
            </summary>
            <returns>
            A <b>WebSocketTransportBindingElement</b> object with property values equal to
            those of the current element.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>Intended for use only by the underlying framework.</summary>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.PlugIn(System.ServiceModel.Channels.Binding)">
            <summary>
            Creates a new <strong>CustomBinding</strong> based on the specified source
            <strong>Binding</strong>, with <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">
            WebSocketTransportBindingElement</see> plugged into the collection of binding elements.
            </summary>
            <returns>
            The <strong>CustomBinding</strong> based on the source <strong>Binding</strong> with
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>
            binding element plugged into it.
            </returns>
            <param name="binding">
            The <b>Bindin</b> to use as source.
            </param>
        </member>
        <member name="M:Noemax.WCFX.Channels.WebSocketTransportBindingElement.PlugIn(System.ServiceModel.Channels.BindingElementCollection)">
            <summary>
            Creates a new <strong>BindingElementCollection</strong> based on the specified
            source, with
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>
            plugged into the collection of binding elements.
            </summary>
            <returns>
            The <strong>BindingElementCollection</strong> based on the source
            <strong>BindingElementCollection</strong> with
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement">WebSocketTransportBindingElement</see>
            binding element plugged into it.
            </returns>
            <param name="bindingElementCollection">
            	<b>BindingElementCollection</b> to use as source.
            </param>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.Scheme">
            <summary>
            Gets the URI scheme for the transport. 
            </summary>
            <remarks>
            This property is used to validate bindings against base addresses.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size of the buffer to use. For buffered messages this value is the 
            same as <b>MaxReceivedMessageSize</b>. For streamed messages, this value is the maximum size 
            of the SOAP headers, which must be read in buffered mode. 
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.CompressionScheme">
            <summary>
            Specifies the whether the transport level compression should be applied and the type of compression to be used.
            </summary>
            <remarks>
            Currently only LZF3 and DEFLATE compression algorithms aresuitable for "statefull transport stream compression.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.CompressionLevel">
            <summary>
            Speicifies a compression level to be applied by the transport compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.MaxLogicalChannels">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.Security">
            <summary>
            Gets and sets the security settings to be used by a transport channel.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or streamed.
            </summary>        
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.DuplexOnly">
            <summary>
            Gets and sets whether the transport should provide only duplex channels for the binding.
            </summary>
            <remarks>
            <see cref="T:Noemax.WCFX.Channels.WebSocketTransportBindingElement"/> does support both duplex and request response 
            communication, but this may cause confussion with some binding elements that require specific 
            type of channel. Using this property you can lock transport to provide only duplex channels
            and resolve such conflicts.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Channels.WebSocketTransportBindingElement.AuthenticationScheme">
            <summary>
            Gets and sets the authentication scheme to be the WebSocket server to authenticate clients.
            </summary>     
        </member>
        <member name="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Channels.BasicSoapTcpBinding">BasicSoapTcpBinding</see> 
            will be used and exposes its settings through configuration.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            BasicSoapTcpBindingElement</see> class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            SmartHttpBindnigElement</see> class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            BasicSoapTcpBindingElement</see> class with the specified configuration name.
            </summary>
            <param name="configurationName">The configuration name.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
            <summary>
            Implements StandardBindingElement abstract class.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.BindingElementType">
            <summary>
            Implements StandardBindingElement abstract class.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.Properties">
            <summary>
            Implements StandardBindingElement abstract class.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.Compression">
            <summary>
            Gets and sets whether the messages sent through the will be compressed.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.CompressionMethod">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.MaxReceivedMessageSize">
            <summary>
            Gets and sets the maximum size limit for incomming messages.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.MaxBufferSize">
            <summary>
            Gets and sets the size limit for the buffers used by the channel.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.MaxBufferPoolSize">
            <summary>
            Gets and sets the size total size of the buffers used by the channel.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.MaxVocabularyStringLength">
            <commentsfrom cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.MaxVocabularyStringLength" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.PermitStateful">
            <commentsfrom cref="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.PermitStateful" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.TransferMode">
            <commentsfrom cref="P:Noemax.WCFX.Channels.SoapTcpTransportBindingElement.TransferMode" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.WriterProfile">
            <commentsfrom cref="P:Noemax.FastInfoset.XmlFastInfosetWriter.Profile" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement.WriterProfileDetails">
            <summary>
            Provides the customization of XmlFastInfosetWriterProfile through WCF configuration.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1">
            <summary>
            Represents a configuration section that contains a collection of binding element
            extensions, each of which describes an aspect of how an endpoint communicates with
            other endpoints, that is built, consistently, into a channel factory on the client and
            a channel listener on the service.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.GenericConfigurationElementCollection`1">
            <summary>
            Represents a configuration element containing a collection of child elements. 
            </summary>
            <typeparam name="TConfigurationElement">The type of the configuration elements contained in the collection</typeparam>
        </member>
        <member name="M:Noemax.WCFX.Configuration.GenericConfigurationElementCollection`1.#ctor">
            <summary>
            Creates a new collection of GenericConfigurationElementCollection.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.GenericConfigurationElementCollection`1.#ctor(System.Collections.IComparer)">
            <summary>
            Creates a new collection of GenericConfigurationElementCollection.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.GenericConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Implements ConfigurationElementCollection abstract method.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.GenericConfigurationElementCollection`1.ContainsKey(System.Object)">
            <summary>
            Returns true if collection contains element with specified key.
            </summary>
            <param name="key">A key</param>
            <returns>true if collection contains element with specified key; false otherwise.</returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.#ctor">
            <summary>
            Initializes new instance of BindingElementExtensionElementCollection.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
            <summary>
            Adds the configuration element into the possition specified by index in the collection.
            </summary>
            <param name="index">The index specifying the possition in collection.</param>
            <param name="element">The configuration element to add into collection.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.IsElementName(System.String)">
            <summary>
            Checks if the element with specified name is already present in the collection.
            </summary>
            <param name="elementName">The specified name of the element.</param>
            <returns><strong>true</strong> if element with the specified name is already present in the collection; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key corresponding to the specified configuration element.
            </summary>
            <param name="element">The configuration element.</param>
            <returns>The key corresponding to the specified configuration element</returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new configruation element based on the configuration element name.
            </summary>
            <param name="elementName">The name of configuration element to create.</param>
            <returns>A created configuration element.</returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Add(System.ServiceModel.Configuration.BindingElementExtensionElement)">
            <summary>Adds <strong>BindingElementExtensionElement</strong> to the collection.</summary>
            <param name="item">A BindingElementExtensionElement to add to the collection.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Clear">
            <summary>Removes all items from the collection.</summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Contains(System.ServiceModel.Configuration.BindingElementExtensionElement)">
            <summary>Determines whether this collection contains a specific item.</summary>
            <param name="item">The object to locate in the collection.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.CopyTo(System.ServiceModel.Configuration.BindingElementExtensionElement[],System.Int32)">
            <summary>
            Copies the BindingElementExtensionElement of this collection to an <b>Array</b>,
            starting at a particular <b>Array</b> index.
            </summary>
            <param name="array">
            The one-dimensional array <font color="black">that is the destination of the
            elements copied from this collection</font>.
            </param>
            <param name="arrayIndex">
            	<para>The zero-based index in <span class="parameter">array</span> at which copying
                begins.</para>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Remove(System.ServiceModel.Configuration.BindingElementExtensionElement)">
            <returns>
            	<strong>true</strong> if <span class="parameter">item</span> was successfully
            removed from the collection; otherwise, <b>false</b>. This method also returns
            <b>false</b> if <span class="parameter">item</span> is not found in the original
            collection.
            </returns>
            <summary>Removes the first occurrence of a specific object from the collection.</summary>
            <param name="item">
            	<dl>
            		<dd>
            			<para>The object to remove from the collection.</para>
            		</dd>
            	</dl>
            </param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
            A <strong>IEnumerator&lt;BindingElementExtensionElement&gt;</strong> that can be
            used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.CollectionType">
            <summary>
            Gets the type of the collection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Count">
            <summary>
            Gets the number of BindingElementExtensionElement contained in the
            collection.
            </summary>
            <value>The number of BindingElementExtensionElement contained in the collection.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.IsReadOnly">
            <value>
            	<strong>true</strong> if the collection is read-only; otherwise,
            <b>false</b>.
            </value>
            <summary>Gets a value indicating whether the collection is read-only.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.BindingElementExtensionElementCollection`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:Noemax.WCFX.Configuration.CompressionElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Channels.CompressionBindingElement">CompressionBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>
            <remarks>
            	<para>When this element is added to a custom binding, the resulting channel
                supports message compression.</para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.CompressionElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.CompressionElement.CreateBindingElement">
            <summary>
            Initializes a new instance of CompressionBindingElement represented by this
            configuration element.
            </summary>
            <returns>A CompressionBindingElement instance.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
            <value>
            The type of <strong>BindingElement</strong> represented by this configuration
            element.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionElement.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the message to be compressed.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionElement.CompressionMethod">
            <summary>
            Gets and sets the algorithm used for compressing the message payload.
            </summary> 
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Configuration.CompressionStreamElement">
            <summary>
            Respresents a stream upgrade that provides the transport level compression.
            </summary>
            <remarks>
            <para>This binding element should be used only with transports which support stream upgardes.</para>
            <para>
            The CompressionStreamBindingElement supports the use of an underlying stream upgrade. For example, a security
            stream upgrade can be used as an underlying stream upgrade. In such cases the CompressionStreamBindingElement 
            first upgrades the stream using the underlying stream upgrade and then applies its own upgrade.
            </para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.CompressionStreamElement.CreateBindingElement">
            <summary>Initializes a new instance of %
            CompressionStreamBindingElement:Noemax.WCFX.Channels.CompressionStreamBindingElement%
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.CompressionStreamElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionStreamElement.BindingElementType">
            <summary>Gets the typeof(CompressionStreamBindingElement).</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionStreamElement.CompressionFormat">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.CompressionStreamElement.CompressionLevel">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Configuration.ContentNegotiationElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Channels.ContentNegotiationBindingElement">ContentNegotiationBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary> 
        </member>
        <member name="M:Noemax.WCFX.Configuration.ContentNegotiationElement.CreateBindingElement">
            <summary>Creates a binding element object represented by the configuration element.</summary>
            <returns>A custom <strong>BindingElement</strong> object.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.Properties">
            <summary>
            Gets a collectoin of configuration properties.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.MessageEncodings">
            <summary>
            A collection of <strong>MessageEncodingBindingElement</strong> used for dynamic
            content negotiation as set of alternative message encodings.
            </summary>
            <remarks>
            Collection should be populated with
            <strong>MessageEncodingBindingElement</strong> according to the rules specified in
            <see cref="T:Noemax.WCFX.Channels.MessageEncodingBindingElementCollection">
            MessageEncodingBindingElementCollection</see>. 
            This is a default collection for this configuration element.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.BindingElementType">
            <summary>
            When overridden in a derived class, gets the <b>Type</b> object that represents the custom binding element. 
            </summary>
            <value>
            Returns the type of the binding element this configuration element associates with the configuration system.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.MessageEncodingMode">
            <summary>Gets and sets the message encoding mode to be used by this binding.</summary>
            <remarks>      
            	<para>Regardless of the <strong>MessageEncodingMode</strong> settings, this binding
                is always able to decode messages encoded using any of the message encodings
                specified by the
                <see cref="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MessageEncodings">
                MessageEncodings</see> collection.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.CompressionMode">
            <summary>Gets and sets the message compression mode to be used by this binding.</summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed, if compression is
            enabled.
            </summary>
            <remarks>
            	<para>Specifies the minimal size of the payload that channel will compress. If the
                size of the payload is lower than specified value, compression will not be applied
                to it.</para>
            	<para>The default value of this property is 0, all payload will be compressed
                irrespective of it's size.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.CompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the compression algorithm
            for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression algorithm to produce 
            the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.ZlibFormat">
            <summary>Specified whether the RFC 1950 Zlib format is used for DEFLATE compression.</summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.ContentNegotiationElement.ForceStreamedCompression">
            <summary>Enables the streamed compression in the buffered transfer mode.</summary>        
        </member>
        <member name="T:Noemax.WCFX.Configuration.DuplexSoapTcpBindingElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Channels.DuplexSoapTcpBinding">DuplexSoapTcpBinding</see> 
            will be used and exposes its settings through configuration.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.DuplexSoapTcpBindingElement.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            BasicSoapTcpBindingElement</see> class.
            </summary>
            <overloads>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            SmartHttpBindnigElement</see> class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Configuration.DuplexSoapTcpBindingElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">
            BasicSoapTcpBindingElement</see> class with the specified configuration name.
            </summary>
            <param name="configurationName">The configuration name.</param>
        </member>
        <member name="P:Noemax.WCFX.Configuration.DuplexSoapTcpBindingElement.BindingElementType">
            <summary>
            Gets the type of associated %System.ServiceModel.Channels.BindingElement%.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingCollectionElement">
            <summary>
            Represents a configuration section that holds a collection of
            <see cref="T:Noemax.WCFX.Configuration.BasicSoapTcpBindingElement">BasicSoapTcpBindingElement</see>
            elements.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.DuplexSoapTcpBindingCollectionElement">
            <summary>
            Represents a configuration section that holds a collection of
            <see cref="T:Noemax.WCFX.Configuration.DuplexSoapTcpBindingElement">DuplexSoapTcpBindingElement</see>
            elements.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.FastInfosetSettingsElement">
            <summary>The configuration element representing the settings of Fast Infoset message encoding.</summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.FastInfosetSettingsElement.#ctor">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum length of the string for which the writer will try to find a match in 
            its vocabulary.
            </summary>
            <remarks>
            <para>If the length of the character string that is written into the writer is smaller than the specified 
            length, the writer will try to find a match for this string within the strings that have been already placed
            in the vocabulary and replace it with the reference to the already written string. If no match is found,
            the writer adds this character string to the vocabulary and all future occurrences of  the same string 
            will be replaced by references to it.</para>
            <para>The writer does not try to find a match for strings that are longer than the specified length and so 
            does not add them to the vocabulary. Setting this property to a higher value might improve compactness, but 
            it might decrease the writing speed and\or consume more memory.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that can be added to the Fast Infoset vocabulary table.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.WriterProfile">
            <summary>
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see> that defines the way 
            how primitive data-type are going to be serialized.
            </summary>      
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.WriterProfileDetails">
            <summary>
            Sets and gets the %Noemax.WCFX.Configuration.WriterProfileDetailsElement% settings for 
            %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.PermitStateful">
            <summary>
            Permits FastInfoset message encoding to work in stateful mode whenever transport can maintain state.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FastInfosetSettingsElement.SessionMode">
            <summary>
            Permits FastInfoset message encoding to work in stateful mode whenever transport can maintain state.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.TransportSecurityElement">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Configuration.TransportSecurityElement.#ctor">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Configuration.TransportSecurityElement.ApplyConfiguration(Noemax.WCFX.Channels.TransportSecuritySettings)">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.TransportSecurityElement.Type">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.TransportSecurityElement.RequireClientAuthentication">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement">
            <summary>
            Represents a configuration section that contains a collection of
            bindings, each of which describes an aspect of how an endpoint communicates with other endpoints, 
            that is built, consistently, into a channel factory on the client and a channel listener on the service.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.ContainsKey(System.String)">
            <summary>
            Checks for the presence of the element with specified name in the collection.        
            </summary>
            <param name="name">The name of the element to search for.</param>
            <returns>
            Returns <strong>true</strong> if collection contains an element with specified name.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.GetDefault">
            <summary>
            Returns the binding with default configuration.
            </summary>
            <returns>
            The binding with default configuration.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.TryAdd(System.String,System.ServiceModel.Channels.Binding,System.Configuration.Configuration)">
            <summary>
            Tries to add the binding with specified name into collection.
            </summary>
            <param name="name"></param>
            <param name="binding"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.Bindings">
            <summary>
            Gets the collection of %Noemax.WCFX.Configuration.ExtensionBindingElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.BindingType">
            <summary>
            Returns the type of the binding contained in this collection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.ConfiguredBindings">
            <summary>
            Returns the read only collection of %System.ServiceModel.Configuration.IBindnigConfigurationElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingCollectionElement.Properties">
            <summary>
            Gets the collection of configuration properties.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Configuration.ExtensionBindingElementCollection">
            <summary>
            Represents a configuration section that holds a collection of
            <see cref="T:Noemax.WCFX.Configuration.ExtensionBindingElement">ExtenstionBindingElement</see>
            elements.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingElementCollection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.ExtensionBindingElementCollection">ExtensionBindingElementCollection</see>
            class.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns they key that corresponds to the specified configuration element.
            </summary>
            <param name="element">The configuration element.</param>
            <returns>The key that corresponds to the speicified configuration element.</returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingElementCollection.CreateNewElement">
            <summary>
            Creates a new configuration element.
            </summary>
            <returns>The new configuration element.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElementCollection.CollectionType">
            <summary>Gets the type of the <b>ConfigurationElementCollection</b>.</summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElementCollection.ElementName">
            <summary>
            The name of the node prepresenting the configuration element.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.#ctor">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.CreateNewElement">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.Configuration.ExtensionBindingElement">
            <summary>
            Represents a configuration section which contains a collection of binding element extensions 
            that modify the behavior of an already defined binding.
            </summary>
            <remarks>
            The <extensionBinding/> is used to extend an already configured binding by cloning its configuration 
            and replacing or adding binding elements to it. It is used to plug extensions into a predefined standard 
            binding through the configuration file. It is also used to avoid copying the same configuration section 
            multiple times in order to create slightly different bindings.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingElement.ApplyConfiguration(System.ServiceModel.Channels.Binding)">
            <summary>
            Applies the content of the specified binding to this binding configuration
            element.
            </summary>
            <param name="binding"><para>A binding.</para></param>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.Extensions">
            <summary>
            The collection of <strong>BindingElement</strong> object to be added to source
            binding configuration.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.SourceBinding">
            <summary>Gets or sets the type of binding to extend.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.SourceBindingConfiguration">
            <summary>Gets or sets the name of the binding to extend.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.CloseTimeout">
            <summary>
            Gets or sets the interval of time provided for a close operation to
            complete.
            </summary>
            <value>The</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.OpenTimeout">
            <summary>
            Gets or sets the interval of time provided for an open operation to
            complete.
            </summary>
            <value>The</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.ReceiveTimeout">
            <summary>
            Gets or sets the interval of time provided for a receive operation to
            complete.
            </summary>
            <value>The</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a send operation to
            complete.
            </summary>
            <requirements>The</requirements>
            <value>The</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingElement.Name">
            <summary>The name of the binding.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.MessageCompressionMode">
            <summary>
            Gets and sets the message compression mode used by the binding.
            </summary>
            <remarks>
            <para>
            When content negotiation is supported by the binding, the use of compression is negotiated between
            the communication sides. 
            When content negotiation is not supported by the binding, compression is always applied to all
            message sent through the channel.
            </para>
            Compression is not applied when set to <b>None</b>.
            </remarks>         
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.MessageCompressionLevel">
            <summary>Gets and sets the compression level to apply when compression is enabled.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.MessageEncoding">
            <summary>
            Specifies the message encoding to be injected into the binding during configuration. 
            </summary>
            <remarks>
            Default value for this property is %BindingDefault:WcfxMessageEncoding%, which means that the message 
            encoding of the target binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.FastInfosetSettings">
            <summary>
            Gets and sets the settings to be applied on the Fast Infoset message encoding, when used.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.CloseTimeout">
            <summary>
            Gets or sets the interval of time provided for a connection to close before the transport raises an exception.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.OpenTimeout">
            <summary>
            Gets or sets the interval of time provided for a connection to open before the transport raises an exception.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.ReceiveTimeout">
            <summary>
            Gets or sets the interval of time that a connection can remain inactive, during which no application 
            messages are received, before it is dropped.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXtensionsBindingElementCollection.WcfXtensionsBindingElement.SendTimeout">
            <summary>
            Gets or sets the interval of time that a connection can remain inactive, during which no application 
            messages are received, before it is dropped.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.WcfXTransportSettingsElement">
            <summary>    
            Provides properties for configuration of the transport used by the binding.    
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.#ctor">
            <summary>
            Initializes a new instance of %WcfXTransportSettingsElement%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.op_Implicit(Noemax.WCFX.Configuration.WcfXTransportSettingsElement)~Noemax.WCFX.WcfXTransportSettings">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.TransferMode">
            <summary>
            Gets and sets whether a channel uses streamed or buffered modes for the transfer of request and response messages.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.MaxReceivedMessageSize">
            <summary>
            Gets or sets the maximum size for a message that can be received on a channel configured with this binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.MaxBufferSize">
            <summary>
            Gets or sets a value that specifies the maximum size, in bytes, of the buffer used to store messages in memory.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum number of bytes that are used to buffer incoming messages in memory.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.TransportCompression">
            <summary>
            Gets and set the transport compression format used for compressing the transport stream.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.TransportCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer
            configures the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. 
            It is possible that minimum consumption of resources will be provided by a compression level other 
            than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most 
            suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different 
            compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed, if compression is
            enabled.
            </summary>
            <remarks>
            <para>Specifies the minimal size of the payload that channel will compress. If the
            size of the payload is lower than specified value, compression will not be applied
            to it.</para>
            <para>The default value of this property is 0, all payload will be compressed
            irrespective of it's size.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.KeepAliveEnabled">
            <summary>
            Gets or sets a value indicating whether to make a persistent connection to a service endpoint. 
            </summary>
            <remarks>
            Set this property to true to send a Connection HTTP header with the value Keep-alive. A client 
            uses this property to indicate a preference for persistent connections. When this property is 
            true, the connection that the client makes to a service endpoint is persistent if the service 
            endpoint supports that.
            <para><b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact 
            Framework 3.5.</b></para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.ConnectionPooling">
            <summary>Enables and disables connection pooling.</summary>
            <value>If <strong>true</strong> outgoing connections are going to be pooled in
            connection pool and reused when client reconnects back to the same endpoint.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.InactivityTimeoutMinutes">
            <summary>
            Gets and sets a number of minutes that the server should wait prior discarding an inactive client connection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.Security">
            <summary>
            Gets <c cref="T:Noemax.WCFX.Channels.TransportSecuritySettings">TransportSecuritySettings</c> that provides transport 
            security settings for the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.AuthenticationScheme">
            <summary>
            Gets and sets the authentication scheme to be used by the transport.
            </summary>
            <remarks>
            This property applies only to the cases when %Transport% is set to LiteHttp.
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.ProxyAuthenticationScheme">
            <summary>
            Gets and set the authentication schemed to be used for authenticating with HTTP proxy.
            </summary>   
            <remarks>
            Proxy authentication is currently supported only by LiteHTTP transport. When proxy authentication is used, 
            a client credentials specified in a <c cref="T:System.ServiceModel.Description.ClientCredentials">ClientCredentials</c>
            object, will be used to authenticate with a proxy, rather than target endpoint.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.ProxyAddress">
            <summary>
            Gets and sets the address of the proxy server to connect to remote endpoint. 
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WcfXTransportSettingsElement.UseDefaultWebProxy">
            <summary>
            Gets and sets whether default proxy can be used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.WebSocketTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement">SoapTcpDuplexTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>     
        </member>
        <member name="M:Noemax.WCFX.Configuration.WebSocketTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WebSocketTransportElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum size of the buffer pool. 
            </summary>
            <value>
            The maximum size of the buffer pool. The default is 524,288 bytes (512 * 1024).
            </value>
            <remarks>
            	<para>Many parts of WCF use buffers. Creating and destroying buffers each time they
                are used is expensive, and garbage collection for buffers is also expensive. With
                buffer pools, you can take a buffer from the pool, use it, and return it to the
                pool once you are done. Thus the overhead in creating and destroying buffers is
                avoided.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum allowed message size that can be received.</summary>
            <value>The maximum allowed message size that can be received.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>
            <returns>
            The %Noemax.WCFX.TransferModeX% that indicates whether messages are sent buffered 
            or streamed.
            </returns>
            <value>
            A valid <strong>TransferModeX</strong> <font color="black">value that specifies
            whether messages are buffered or streamed or a request or response.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.CompressionScheme">
            <summary>
            Specifies the whether the transport level compression should be applied and the type of compression to be used.
            </summary>
            <remarks>
            Currently only LZF3 and DEFLATE compression algorithms aresuitable for "statefull transport stream compression.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.CompressionLevel">
            <summary>
            Speicifies a compression level to be applied by the transport compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.AuthentationScheme">
            <summary>
            Specifies an authentication scheme to use by the WebSocket transport to authenticate clients.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.Security">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WebSocketTransportElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior">EnvelopeEndpointBehavior</see> 
            will be used and exposes its settings through configuration.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.CreateBehavior">
            <summary/>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.BehaviorType">
            <summary/>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.CompressionThreshold">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.CompressionThreshold" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.CompressionMethod">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionMethod" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.CompressionLevel">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.MessageBodyEnvelope.CompressionLevel" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.ProcessIncomming">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessIncomming" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.EnvelopeEndpointBehaviorElement.ProcessOutgoing">
            <commentsfrom cref="P:Noemax.WCFX.Behaviors.EnvelopeBehavior.ProcessOutgoing" filter=""/>
        </member>
        <member name="T:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement">
            <summary>
            Represents a configuration section that contains a collection of
            bindings, each of which describes an aspect of how an endpoint communicates with other endpoints, 
            that is built, consistently, into a channel factory on the client and a channel listener on the service.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.ContainsKey(System.String)">
            <summary>
            Checks for the presence of the element with specified name in the collection.        
            </summary>
            <param name="name">The name of the element to search for.</param>
            <returns>
            Returns <strong>true</strong> if collection contains an element with specified name.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.GetDefault">
            <summary>
            Returns the binding with default configuration.
            </summary>
            <returns>
            The binding with default configuration.
            </returns>
        </member>
        <member name="M:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.TryAdd(System.String,System.ServiceModel.Channels.Binding,System.Configuration.Configuration)">
            <summary>
            Tries to add the binding with specified name into collection.
            </summary>
            <param name="name"></param>
            <param name="binding"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.Bindings">
            <summary>
            Gets the collection of %Noemax.WCFX.Configuration.ExtensionBindingElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.BindingType">
            <summary>
            Returns the type of the binding contained in this collection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.ConfiguredBindings">
            <summary>
            Returns the read only collection of %System.ServiceModel.Configuration.IBindnigConfigurationElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.Item(System.String)">
            <summary>
            Returns an underlying binding configuration with the specified name.
            </summary>
            <param name="name">The name of the binding configuration to return.</param>
            <returns>The specified binding configuration.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.ExtensionBindingCollectionElement.Properties">
            <summary>
            Gets the collection of configuration properties.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.FiMessageEncodingElement">
            <summary>
            Represents a WCF configuration element which specifies the <see cref="T:Noemax.WCFX.Channels.FiMessageEncodingBindingElement">FiMessageEncodingBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>
            <example>
            	<para>&lt;system.serviceModel&gt;</para>
            	<para>&lt;extensions&gt;</para>
            	<para>&lt;bindingElementExtensions&gt;</para>
            	<para><strong>&lt;add name="fiMessageEncoding"</strong></para>
            	<para><strong>type="Noemax.WCFX.Configuration.FiMessageEncodingElement,
                Noemax.WCFX" /&gt;</strong></para>
            	<para>&lt;/bindingElementExtensions&gt;</para>
            	<para>&lt;/extensions&gt;</para>
            	<para>&lt;bindings&gt;</para>
            	<para>&lt;customBinding&gt;</para>
            	<para>&lt;binding name ="clientBinding"&gt;</para>
            	<para><strong>&lt;fiMessageEncoding/&gt;</strong></para>
            	<para>&lt;httpTransport/&gt;</para>
            	<para>&lt;/binding&gt;</para>
            	<para>&lt;/customBinding&gt;</para>
            	<para>&lt;/bindings&gt;</para>
            	<para>&lt;/system.serviceModel&gt;</para>
            </example>
        </member>
        <member name="M:Noemax.WCFX.Configuration.FiMessageEncodingElement.#ctor">
            <summary>
            Initializes a new instance of %Noemax.WCFX.Configuration.FiMessageEncodingElement% class.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.FiMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.FiMessageEncodingElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Initializes the binding element by copying the settings of specified binding element.
            </summary>
            <param name="bindingElement">The binding element copy settings from.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.FiMessageEncodingElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MessageVersion">
            <summary>
            Gets or sets the SOAP and WS-Addressing versions that are used to format the text
            message.
            </summary>
            <remarks>
            	<para>The default <b>MessageVersion</b> for this constructor is the version of
                WS-Addressing that was submitted 10 August 2004 and SOAP 1.2.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.ReaderQuotas">
            <remarks>
            	<para>The complexity constraints protect against a class of denial of service (DOS)
                attacks that attempt to use message complexity to tie up endpoint processing
                resources. The properties that express these constraints and their default values
                are as follows:</para>
            	<ul>
                    <li><p>MaxDepth = 32</p></li>
                    <li><p>MaxStringContentLength = 8192</p></li>
                    <li><p>MaxArrayLength = 16384</p></li>
                    <li><p>MaxBytesPerRead = 4096</p></li>
                    <li><p>MaxNameTableCharCount = 16384</p></li>
                </ul>
            </remarks>
            <summary>
            Gets or sets constraints on the complexity of XML messages that can be processed
            by endpoints configured with this binding element.
            </summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxArrayLength">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxBytesPerRead">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxDepth">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxNameTableCharCount">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxStringContentLength">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.WriterProfile">
            <summary />        
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum length of the string for which the writer will try to
            find a match in its vocabulary.
            </summary>
            <remarks>
            	<para>If the length of the character string that is written into the writer is
                smaller than the specified length, the writer will try to find a match for this
                string within the strings that have been already placed in the vocabulary and
                replace it with the reference to the already written string. If no match is found,
                the writer adds this character string to the vocabulary and all future occurrences of
                the same string will be replaced by references to it.</para>
            	<para>The writer does not try to find a match for strings that are longer than the
                specified length and so does not add them to the vocabulary. Setting this property
                to a higher value might improve compactness, but it might decrease the writing
                speed and\or consume more memory.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that can be added to the Fast Infoset vocabulary table.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxReadPoolSize">
            <summary>
            Gets or sets the number of readers that are allocated to a pool and ready for use
            to process incoming messages.
            </summary>
            <value>The number of readers in the pool. The default value is 64 readers.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.MaxWritePoolSize">
            <summary>
            Gets or sets the number of writers that are allocated to a pool and ready for use
            to process outgoing messages.
            </summary>
            <value>
            The maximum number of writers to be kept in the pool. The default value is 16
            writers.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.PermitStateful">
            <commentsfrom cref="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.PermitStateful" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.SessionMode">
            <commentsfrom cref="P:Noemax.WCFX.Channels.FiMessageEncodingBindingElement.SessionMode" filter=""/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.WriterProfileDetails">
            <summary>
            Sets and gets the %Noemax.WCFX.Configuration.WriterProfileDetailsElement% settings for 
            %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.FiMessageEncodingElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.HttpsViaProxyTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement">HttpsViaProxyTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>
            <remarks>
            	<para>When the BasicHttpBinding security mode is set to TransportWithMessageCredential, BasicHttpBinding
            enforces the use of transport security which introduces a lot of exrta overhead if the servers are proxied by 
            and SSL/TLS accelerator proxy. 
                </para>
                <para>When this binding element is plugged into the BasicHttpBinding, it enables the server to avoiding extra 
            overhead and receive client messages and credentials from the SSL/TLS accelerator proxy over an unsecured connection.
                </para>
                <para>It should be used <b>only on the server side</b>, when transport security is provided by an SSL/TLS 
            accelerator proxy.
                </para>
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.HttpsViaProxyTransportElement.#ctor">
            <summary>
            Initializes a new instance of %Noemax.WCFX.Configuration.HttpsVisProxyTransportElement%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.HttpsViaProxyTransportElement.CreateBindingElement">
            <summary>
            Creates the %Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement%.
            </summary>
            <returns>The new instance of HttpsViaProxyTransportBindingElement.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.HttpsViaProxyTransportElement.BindingElementType">
            <summary>
            Returns the type of %Noemax.WCFX.Channels.HttpsViaProxyTransportBindingElement%.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.LiteHttpsTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.LiteHttpsTransportBindingElement">LiteHttpsTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>   
        </member>
        <member name="T:Noemax.WCFX.Configuration.LiteHttpTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.LiteHttpTransportBindingElement">LiteHttpsTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LiteHttpTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LiteHttpTransportElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.ManualAddressing">
            <summary>
            Gets or sets a Boolean value that specifies whether the user takes control of message addressing. 
            </summary>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
            <remarks>
            	<para>This property is usually used in router scenarios, where the application
                determines which one of several destinations to send a message to.</para>
            	<para>If this property is set to <b>true</b>, the channel assumes the message has
                already been addressed and does not add any additional information to it.</para>
            	<para>If this property is set to <b>false</b>, the channel adds SOAP addressing
                information to the message.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum size of the buffer pool. 
            </summary>
            <value>
            The maximum size of the buffer pool. The default is 524,288 bytes (512 *
            1024).
            </value>
            <remarks>
            	<para>Many parts of WCF use buffers. Creating and destroying buffers each time they
                are used is expensive, and garbage collection for buffers is also expensive. With
                buffer pools, you can take a buffer from the pool, use it, and return it to the
                pool once you are done. Thus the overhead in creating and destroying buffers is
                avoided.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum allowed message size that can be received.</summary>
            <value>The maximum allowed message size that can be received.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.UseDefaultWebProxy">
            <summary>
             Gets or sets a value that indicates whether the auto-configured HTTP proxy
             of the system should be used, if available.
             </summary>
            <returns>
             <b>true</b> if the auto-configured HTTP proxy of the system should be used, if available;
             otherwise, false. The default value is true.
             </returns>
            <value><strong>true</strong> if the</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.ProxyAddress">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>
            <returns>
            The System.ServiceModel.Channels.TransferMode that indicates whether messages
            are sent buffered or streamed.
            </returns>
            <value>
            A valid <strong>TransferMode</strong>
            	<font color="black">value that specifies
            whether messages are buffered or streamed or a request or response.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.AuthenticationScheme">
            <summary>
            Gets and sets the scheme to be used for authenticating with an endpont.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.ProxyAuthenticationScheme">
            <summary>
            Gets and sets the scheme to be used for authenticating with a proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.KeepAliveEnabled">
            <summary>
            Gets or sets a value indicating whether to make a persistent connection to a service endpoint. 
            </summary>
            <remarks>
            Set this property to true to send a Connection HTTP header with the value Keep-alive. A client 
            uses this property to indicate a preference for persistent connections. When this property is 
            true, the connection that the client makes to a service endpoint is persistent if the service 
            endpoint supports that.
            </remarks>
            <value>
            	<strong>true</strong> if a persistent connection to the internet resource is
            maintained; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.EnableGetWSDL">
            <summary>Gets and sets if transport should support WSDL export through HTTP GET requests.</summary>        
            <remarks> If set to <b>true</b>, the transport will return web service metadata on HTTP GET request to 
            base address + "?wsdl" e.g. http://somehost/someservice?wsdl </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.AllowCookies">
            <summary>
            Gets or sets a value that indicates whether the client accepts cookies 
            and propagates them on future requests.
            </summary>
            <remarks>
            This property is provided as a convenience for interacting with ASMX Web services that use cookies to make sure that the cookies returned from the server are automatically copied to all future client requests for that service.
            </remarks>
            <value>
            <b>true</b> if cookies are allowed; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.InactivityTimeoutMinutes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpTransportElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LiteHttpsTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LiteHttpsTransportElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpsTransportElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
            <value>Returns typeof(LiteHttpsTransportBindingElement).</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LiteHttpsTransportElement.RequireClientCertificate">
            <summary>
            Gets or sets a value that indicates whether SSL client authentication is required.
            </summary>
            <value>
            <b>true</b> if SSL client authentication is required; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
        </member>
        <member name="T:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement">
            <summary>
            When used within &lt;extensionBinding/&gt; element, updates the target binding
            client security settings by overwriting them with properties of this class.
            </summary>
            <remarks>
            This configuration element is intended for updating the security settings
            of predefined WCF binding whenever it's not possible to do directly. Currently it
            updates only the
            <see cref="P:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement.MaxClockSkew">
            MaxClockSkew</see> property.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement.CreateBindingElement">
            <summary>
            Initializes a new instance of a binding element represented by this configuration
            element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement.MaxClockSkew">
            <summary>
            Gets or sets the maximum allowable time difference between the system clocks of
            the two parties that are communicating.
            </summary>
            <value>A <b>TimeSpan</b> that represents the maximum allowable time difference between the system 
            clocks of the two parties that are communicating. The default is 5 minutes</value>
            <remarks>
            	<para>Messages between systems whose clocks' difference exceeds the value specified
                in this property are rejected.</para>
            	<para>This property is used in conjunction with the message time stamp verification
                and the
                <see cref="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
                ReplayWindow</see> property.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LocalClientSecurityUpdateElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement">
            <summary>
            When used within &lt;extensionBinding/&gt; element, updates the target binding
            service security settings by overwriting them with properties of this class.
            </summary>
            <remarks>
            This configuration element is intended for updating the security settings
            of predefined WCF binding whenever it's not possible to do directly. Currently it
            updates only the
            <see cref="P:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement.MaxClockSkew">
            MaxClockSkew</see> property.
            </remarks>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement.MaxClockSkew">
            <summary>
            Gets or sets the maximum allowable time difference between the system clocks of
            the two parties that are communicating.
            </summary>
            <value>A <b>TimeSpan</b> that represents the maximum allowable time difference between the system 
            clocks of the two parties that are communicating. The default is 5 minutes</value>
            <remarks>
            	<para>Messages between systems whose clocks' difference exceeds the value specified
                in this property are rejected.</para>
            	<para>This property is used in conjunction with the message time stamp verification
                and the
                <see cref="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
                ReplayWindow</see> property.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.LocalServiceSecurityUpdateElement.BindingElementType">
            <summary> Gets the type of this binding element. </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.MessageStatisticsElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.MessageStatisticsBindingElement">MessageStatisticsBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>    
        </member>
        <member name="M:Noemax.WCFX.Configuration.MessageStatisticsElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.MessageStatisticsElement.CreateBindingElement">
            <summary>
            Initializes a new instance of CompressionBindingElement represented by this
            configuration element.
            </summary>
            <returns>A CompressionBindingElement instance.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.MessageStatisticsElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
            <value>
            The type of <strong>BindingElement</strong> represented by this configuration
            element.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.MessageStatisticsElement.LogFilename">
            <summary>
            Gets and sets the path to the message statistics log file.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.MessageStatisticsElement.Verbose">
            <summary>
            If set to <strong>true</strong> the message statistics log will be written in verbose format.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.SmartHttpBindingCollectionElement">
            <summary>
            Represents a configuration section that holds a collection of
            <see cref="T:Noemax.WCFX.Configuration.SmartHttpBindingElement">SmartHttpBindingElement</see>
            elements.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.SmartHttpBindingElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.SmartHttpBinding">SmartHttpBinding</see> 
            will be used and exposes its settings through configuration.
            </summary>    
        </member>
        <member name="M:Noemax.WCFX.Configuration.SmartHttpBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Noemax.WCFX.Configuration.SmartHttpBindingElement">
            SmartHttpBindnigElement</see> class.
            </summary>
            <overloads>
            Initializes a new instance of the <see cref="T:Noemax.WCFX.Configuration.SmartHttpBindingElement">
            SmartHttpBindnigElement</see> class.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SmartHttpBindingElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Noemax.WCFX.Configuration.SmartHttpBindingElement">
            SmartHttpBindnigElement</see> class with the specified configuration name.
            </summary>
            <param name="configurationName">The configuration name.</param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SmartHttpBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
            <summary>
            Initializes this binding configuration element with the content of the specified
            binding collection.
            </summary>
            <param name="binding"><para>A collection of binding elements.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SmartHttpBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
            <summary>
            Applies the content of the specified binding to this binding configuration
            element.
            </summary>
            <param name="binding"><para>A binding.</para></param>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.BindingElementType">
            <summary>
            Gets a type of associated binding element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.Properties">
            <summary>
            Gets a collection of configuration properties.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MessageEncodingMode">
            <summary>Gets and sets the message encoding mode to be used by this binding.</summary>
            <remarks>
            	<para>Regardless of the <strong>MessageEncodingMode</strong> settings, this binding
                is always able to decode messages encoded using any of the message encodings
                specified by the
                <see cref="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MessageEncodings">MessageEncodings</see>
                collection.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.CompressionMode">
            <summary>Gets and set the compression mode used by the binding.</summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.CompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.CompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MessageEncodings">
            <summary>
            Gets and sets the string that specifies the list of message encoding algorithms
            that are supported by this binding.
            </summary>
            <remarks>
            	<para>This string must be delimiter-separated list of message encoding binding
                names specifying the list of message encodings that are supported by this binding.
                The following delimiters are supported: '|', ',' and space.</para>
            	<para>The names used to specify the message binding elements are the same as the
                element names used to specify the message encoding in the
                <strong>customBinding</strong> configuration element. For example,
                "textMessageEncoding, mtomMessageEncoding".</para>
            	<para>The <strong>smartHttpBinding</strong> element also supports shortcut strings
                for this property:</para>
            	<list type="bullet">
            		<item>fi - for Fast Infoset.</item>        
            		<item>text - for Text.</item>
            	</list>
            	<para>The following example specifies that Fast Infoset and Text encodings
                should be supported and provides a readerQuotas element that will apply to all
                three types of message encodings:</para>
            	<para><em>&lt;smartHttpBinding&gt;</em></para>
            	<para><em>&lt;bindingname="clientBinding"messageEncodings="fi | text"&gt;</em></para>
            	<para><em>&lt;readerQuotasmaxBytesPerRead="32000"/&gt;</em></para>
            	<para><em>&lt;/binding&gt;</em></para>
            	<para><em>&lt;/smartHttpBinding&gt;</em></para>
            	<para>The full name of the message encoding can also be provided, for
                example:</para>
            	<para><em>&lt;smartHttpBinding&gt;</em></para>
            	<para><em>&lt;bindingname="clientBinding"messageEncodings="textMessageEncoding"&gt;</em></para>
            	<para><em>&lt;readerQuotasmaxBytesPerRead="32000"/&gt;</em></para>
            	<para><em>&lt;/binding&gt;</em></para>
            	<para><em>&lt;/smartHttpBinding&gt;</em></para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.DefaultMessageEncoding">
            <summary>Gets and sets the name of the default message encoding.</summary>
            <remarks>
            	<para>The default message encoding should be one of the message encodings specified
                in <see cref="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MessageEncodings">
                MessageEncodings</see>. The value of this property should be the string identifying
                the message encoding to be used as default.</para>
            	<para>If the default message encoding is not specified, the message encoding
                specified last in the <strong>MessageEncodings</strong> list will be used as
                default.</para>
            	<para>In the following example <strong>smartHttpBinding</strong> is getting
                configured to support the Fast Infoset and Text message encodings and to use
                the Text message encoding as default.</para>
            	<para><em>&lt;smartHttpBinding&gt;</em></para>
            	<para><em>&lt;binding</em></para>
            	<para><em>name=" clientBinding"</em></para>
            	<para><em>messageEncodings="fi | text"</em></para>
            	<para><em>defaultMessageEncodings="text" &gt;</em></para>
            	<para><em>&lt;readerQuotasmaxBytesPerRead="32000"/&gt;</em></para>
            	<para><em>&lt;/binding&gt;</em></para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.ReaderQuotas">
            <summary>
            Gets or sets constraints on the complexity of SOAP messages that can be processed
            by endpoints configured with this binding.
            </summary>
            <remarks>
            	<para>The complexity constraints include items such as a maximum element depth, a
                maximum length for string content within the message. The constraints protect
                against a class of denial of service (DOS) attacks that attempt to use message
                complexity to tie up endpoint processing resources.</para>
            	<para>The constrain specified by this element will be applied to all
                <strong>MessageEncodingBindingElements</strong> used by binding with condition that
                they support <strong>ReaderQuotas</strong> property.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxArrayLength">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxBytesPerRead">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxDepth">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxNameTableCharCount">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxStringContentLength">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.AllowCookies">
            <summary>
            Gets or sets a boolean value that specifies whether the client accepts cookies
            and propagates them on future requests.
            </summary>
            <value>
            	<strong>true</strong> if the client accepts cookies and propagates them on future
            requests; otherwise, <b>false</b>. The default is <b>false</b>.
            </value>
            <remarks>
            	<para>You can use this attribute when you interact with ASMX Web services that use
                cookies. In this way, you can be sure that the cookies returned from the server are
                automatically copied to all future client requests for that service.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.BypassProxyOnLocal">
            <summary>
            Gets or sets the attribute that indicates whether to bypass the proxy server for
            local addresses.
            </summary>
            <value>
            A Boolean value that indicates whether to bypass the proxy server for local
            addresses.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.HostNameComparisonMode">
            <summary>
            Gets or sets a value that indicates whether the hostname is used to reach the
            service when matching the URI.
            </summary>
            <value>
            The <font color="black"><strong>HostnameComparisionMode</strong> value that
            indicates whether the hostname is used to reach the service when matching on the URI.
            The default value is <strong>StrongWildcard</strong>, which ignores the hostname in the
            match.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum size for a buffer pool that stores messages processed by
            the binding.
            </summary>
            <value>An Int64 value that specifies the maximum size (in bytes) for a buffer pool 
            that is processed by the binding. The default value is 65,536 bytes.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum size for a message that can be received.</summary>
            <value>
            The maximum size, in bytes, for a message that can be received by the binding.
            The default value is 65,536 bytes.
            </value>
            <remarks>
            	<para>This limit defines the maximum message size, in bytes, including headers. The
                sender of a message too large for the receiver receives a SOAP fault. The receiver
                drops the message and creates an entry of the event in the trace log.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.MaxBufferSize">
            <summary>
            Gets and sets the maximum message size limit for messages being received the remote side.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.ProxyAddress">
            <summary>Gets or sets the URI address of the HTTP proxy.</summary>
            <value>A URI that contains the address of the HTTP proxy.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.TransferMode">
            <summary>
            Gets or sets a value that specifies whether messages are buffered or streamed or
            a request or response.
            </summary>
            <value>
            A valid <strong>TransferMode</strong>
            	<font color="black">value that specifies
            whether messages are buffered or streamed or a request or response.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.UseDefaultWebProxy">
            <summary>
            Gets or sets a value that indicates whether the auto-configured HTTP proxy of the
            system should be used, if available.
            </summary>
            <value>
            	<strong>true</strong> if the auto-configured HTTP proxy of the system should be
            used, if available; otherwise, <b>false</b>. The default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SmartHttpBindingElement.Security">
            <summary>Gets or sets the type of security to be used with this binding.</summary>
            <value>
            The <strong>BasicHttpSecurityElement</strong> that specifies the type of security
            to be used with this binding.
            </value>
        </member>
        <member name="T:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.SoapTcpDuplexTransportBindingElement">SoapTcpDuplexTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary>     
        </member>
        <member name="M:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.ManualAddressing">
            <summary>
            Gets or sets a Boolean value that specifies whether the user takes control of message addressing. 
            </summary>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
            <remarks>
            	<para>This property is usually used in router scenarios, where the application
                determines which one of several destinations to send a message to.</para>
            	<para>If this property is set to <b>true</b>, the channel assumes the message has
                already been addressed and does not add any additional information to it.</para>
            	<para>If this property is set to <b>false</b>, the channel adds SOAP addressing
                information to the message.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum size of the buffer pool. 
            </summary>
            <value>
            The maximum size of the buffer pool. The default is 524,288 bytes (512 * 1024).
            </value>
            <remarks>
            	<para>Many parts of WCF use buffers. Creating and destroying buffers each time they
                are used is expensive, and garbage collection for buffers is also expensive. With
                buffer pools, you can take a buffer from the pool, use it, and return it to the
                pool once you are done. Thus the overhead in creating and destroying buffers is
                avoided.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum allowed message size that can be received.</summary>
            <value>The maximum allowed message size that can be received.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>
            <returns>
            The %Noemax.WCFX.TransferModeX% that indicates whether messages are sent buffered 
            or streamed.
            </returns>
            <value>
            A valid <strong>TransferModeX</strong> <font color="black">value that specifies
            whether messages are buffered or streamed or a request or response.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Socks">
            <summary>
            Represents the settings of the SOCKS proxy to use to connect to the service
            endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Version">
            <summary>
            Gets or sets the version of the protocol to use to communicate with the SOCKS
            proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Authentication">
            <summary>
            Gets or sets the authentication scheme to use to connect through the SOCKS
            proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Username">
            <summary>Gets or sets the username to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Address">
            <summary>Gets or sets the address of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Port">
            <summary>Gets or sets the TCP port of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Password">
            <summary>Sets the password to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.Security">
            <summary>
            Represents the settings of the SOCKS proxy to use to connect to the service
            endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.ConnectionPooling">
            <summary>
            Enables and disables the connection pooling on the client side.
            </summary>        
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.InactivityTimeoutMinutes">
            <summary>
            Gets and sets an amount of time server will wait before terminating idle connections.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.TransportCompression">
            <summary>
            Specifies the whether the transport level compression should be applied and the type of compression to be used.
            </summary>
            <remarks>
            Currently only LZF3 and DEFLATE compression algorithms aresuitable for "statefull transport stream compression.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.TransportCompressionLevel">
            <summary>
            Speicifies a compression level to be applied by the transport compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpDuplexTransportElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.SoapTcpTransportElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.SoapTcpTransportBindingElement">SoapTcpTransportBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary> 
        </member>
        <member name="M:Noemax.WCFX.Configuration.SoapTcpTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SoapTcpTransportElement.CreateBindingElement">
            <summary>
            Initializes a new instance of FiMessageEncodingBindingElement represented by this
            configuration element.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.ManualAddressing">
            <summary>
            Gets or sets a Boolean value that specifies whether the user takes control of message addressing. 
            </summary>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
            <remarks>
            	<para>This property is usually used in router scenarios, where the application
                determines which one of several destinations to send a message to.</para>
            	<para>If this property is set to <b>true</b>, the channel assumes the message has
                already been addressed and does not add any additional information to it.</para>
            	<para>If this property is set to <b>false</b>, the channel adds SOAP addressing
                information to the message.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum size of the buffer pool. 
            </summary>
            <value>
            The maximum size of the buffer pool. The default is 524,288 bytes (512 *
            1024).
            </value>
            <remarks>
            	<para>Many parts of WCF use buffers. Creating and destroying buffers each time they
                are used is expensive, and garbage collection for buffers is also expensive. With
                buffer pools, you can take a buffer from the pool, use it, and return it to the
                pool once you are done. Thus the overhead in creating and destroying buffers is
                avoided.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum allowed message size that can be received.</summary>
            <value>The maximum allowed message size that can be received.</value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.MaxBufferSize">
            <summary>
            Gets or sets the maximum size for a buffer that receives messages from the
            channel.
            </summary>
            <returns>
            The maximum size, in bytes, of a buffer that stores messages while they are
            processed for an endpoint configured with this binding. The default value
            is 65,536 bytes.
            </returns>
            <value>
            	<strong>true</strong> if the user can address every message individually;
            <b>false</b> if the default WCF addressing mechanism automatically creates addresses
            for all messages. The default is <b>false</b>.
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.TransferMode">
            <summary>
            Gets or sets a value that indicates whether messages are sent buffered or
            streamed.
            </summary>
            <returns>
            The System.ServiceModel.Channels.TransferMode that indicates whether messages
            are sent buffered or streamed.
            </returns>
            <value>
            A valid <strong>TransferMode</strong>
            	<font color="black">value that specifies
            whether messages are buffered or streamed or a request or response.</font>
            </value>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Socks">
            <summary>
            Represents the settings of the SOCKS proxy to use to connect to the service
            endpoint.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Version">
            <summary>
            Gets or sets the version of the protocol to use to communicate with the SOCKS
            proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Authentication">
            <summary>
            Gets or sets the authentication scheme to use to connect through the SOCKS
            proxy.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Username">
            <summary>Gets or sets the username to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Address">
            <summary>Gets or sets the address of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Port">
            <summary>Gets or sets the TCP port of the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Password">
            <summary>Sets the password to authenticate with the SOCKS proxy.</summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.TransportCompression">
            <summary>
            Specifies the whether the transport level compression should be applied and the type of compression to be used.
            </summary>
            <remarks>
            Currently only LZF3 and DEFLATE compression algorithms aresuitable for "statefull transport stream compression.
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.TransportCompressionLevel">
            <summary>
            Speicifies a compression level to be applied by the transport compression.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.Security">
            <summary>
            Gets and sets the transport security settings.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.ConnectionPooling">
            <summary>
            Enables and disables the connection pooling on the client side.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.InactivityTimeoutMinutes">
            <summary>
            Gets and sets an amount of time server will wait before terminating idle connections.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SoapTcpTransportElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.SocksSettingsElement">
            <summary>Represents the SOCKS proxy settings.</summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SocksSettingsElement.#ctor">
            <summary>
            Initializes a new instance of SocksSettingsElement.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.SocksSettingsElement.ApplyConfiguration(Noemax.WCFX.Channels.SocksSettings)">
            <summary>
            Configures the SocksSettings with properties of this object.
            </summary>
            <param name="target">SocksSettings to configure.</param>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Version">
            <summary>
            The version of SOCKS protocol to use.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Authentication">
            <summary>
            The method of SOCKS authentication to use.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Username">
            <summary>
            The username to provide to the SOCKS server for authentication.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Address">
            <summary>
            The address of the SOCKS server.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Port">
            <summary>
            The port of the SOCKS server.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.SocksSettingsElement.Password">
            <summary>
            The password to provide to the SOCKS server for authentication.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.Configuration.StreamEnhancerElement">
            <summary>
            Represents a WCF configuration element which specifies the
            <see cref="T:Noemax.WCFX.Channels.StreamEnhancerBindingElement">StreamEnhancerBindingElement</see> 
            will be used and exposes its settings through configuration.
            </summary> 
        </member>
        <member name="M:Noemax.WCFX.Configuration.StreamEnhancerElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Applies the content of a specified binding element to this binding configuration
            section.
            </summary>
            <param name="bindingElement"><para>A binding element.</para></param>
        </member>
        <member name="M:Noemax.WCFX.Configuration.StreamEnhancerElement.CreateBindingElement">
            <summary>
            Initializes a new instance of CompressionBindingElement represented by this
            configuration element.
            </summary>
            <returns>A CompressionBindingElement instance.</returns>
        </member>
        <member name="P:Noemax.WCFX.Configuration.StreamEnhancerElement.BindingElementType">
            <summary>Gets the type of this binding element.</summary>
            <value>
            The type of <strong>BindingElement</strong> represented by this configuration
            element.
            </value>
        </member>
        <member name="T:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting">
            <summary>Represents the <see cref="T:Noemax.FastInfoset.XmlFastInfosetFormat">XmlFastInfosetFormat</see> enumeration in WCF configuration."</summary>         
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.NotSet">
            <summary>
            Reserved for cases when detailed profile configuration is omitted.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>        
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.LiteralNoIndex">
            <summary>Encodes values in a UTF-8 text string format. Provides maximum interoperability with other Fast Infoset implementations.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.RestrictedAlphabet">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.RestrictedAlphabetNoIndex">
            <summary>Encodes values in a 4 bits per character format. Provides higher compactness than Literal.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.Binary">
            <summary>Encodes values in a binary format. Provides higher processing performance than Literal and Restricted Alphabet.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetFormatSetting.DotNet">
            <summary> This format is obsolete.</summary>        
        </member>
        <member name="T:Noemax.WCFX.Configuration.WriterProfileDetailsElement">
            <summary>
            Provides customization of <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see> through WCF configuration.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.Configuration.WriterProfileDetailsElement.#ctor">
            <summary>
            Inititalizes new instance of WriterProfileDetailsElement. 
            </summary>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.DateTimeFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.TimeSpanFormat">
            <summary>Gets and sets the format used to encode TimeSpan values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>        
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.DecimalFormat">
            <summary>Gets and sets the format used to serialize DateTime values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.LongFormat">
            <summary>Gets and sets the format used to encode long integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.IntFormat">
            <summary>Gets and sets the format used to encode integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.ShortFormat">
            <summary>Gets and sets the format used to serialize short integer values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.DoubleFormat">
            <summary>Gets and sets the format used to serialize double precision floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.FloatFormat">
            <summary>Gets and sets the format used to serialize floating point values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabet:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            - %RestrictedAlphabetNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.GuidFormat">
            <summary>Gets and sets the format used to serialize guild values.</summary>
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary in order to reduce redundancy and increase compactness. 
            If there are few repeating values of the same data type then it might be preferable not to use indexing.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.Configuration.WriterProfileDetailsElement.BooleanFormat">
            <summary>Gets and sets the format used to serialize boolean values.</summary>      
            <remarks>
            <para>
            Values of this data type can be encoded using any of the following representations: 
            <para>    
            - %Binary:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %Literal:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>
            - %LiteralNoIndex:Noemax.FastInfoset.XmlFastInfosetFormat% <br/>        
            </para>
            </para>
            <para>
            When values are indexed, they are added to the Fast Infoset vocabulary.
            </para>
            </remarks>
        </member>
        <member name="T:Noemax.WCFX.Configuration.XmlFastInfosetWriterProfile">
            <summary>Represents the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see> enumeration in WCF configuration."</summary>         
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetWriterProfile.Basic">
            <summary>The Basic profile usually provides the highest processing performance. It is set to use the Binary representation whenever available.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetWriterProfile.DotNet">
            <summary> This profile is obsolete. If selected, the Basic profile will be used instead.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetWriterProfile.Literal">
            <summary>Encodes values in a UTF-8 text string format. Provides interoperability with Fast Infoset 
            implementations that only support the Literal representation.</summary>
        </member>
        <member name="F:Noemax.WCFX.Configuration.XmlFastInfosetWriterProfile.Compact">
            <summary>The Compact profile usually provides the highest compactness.It is set to use the Restricted Alphabet representation whenever available.</summary>
        </member>
        <member name="T:Noemax.ServiceModel.Web.NoemaxWebRelayHttpBehavior">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.NoemaxWebRelayHttpBehavior.GetRequestDispatchFormatter(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.NoemaxWebRelayHttpBehavior.GetReplyDispatchFormatter(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary/>
        </member>
        <member name="T:Noemax.ServiceModel.Web.NoemaxWebServiceHost">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.NoemaxWebServiceHost.#ctor(System.Object,System.Uri[])">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.NoemaxWebServiceHost.#ctor(System.Type,System.Uri[])">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.NoemaxWebServiceHost.OnOpening">
            <summary/>
        </member>
        <member name="T:Noemax.ServiceModel.Web.IContentContract">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.IContentContract.Post(System.IO.Stream)">
            <summary/>
        </member>
        <member name="M:Noemax.ServiceModel.Web.IContentContract.Get">
            <summary/>
        </member>
        <member name="T:Noemax.ServiceModel.Web.NoemaxWebRelayFormatter">
            <summary/>
        </member>
        <member name="T:Noemax.WCFX.WcfXMessageEncoding">
            <summary>Defines the message encoding to be used by the binding.</summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXMessageEncoding.BindingSpecified">
            <summary>
            The message encoding default for the binding.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXMessageEncoding.FastInfoset">
            <summary>
            Fast Infoset message encoding.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXMessageEncoding.Adaptive">
            <summary>
            To be determined by Adaptive content negotiation.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXMessageEncoding.Pessimistic">
            <summary>
            To be determined by Pessimistic content negotiation.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.WcfXTransport">
            <summary>
            Defines a WCF-Xtension transport to be used by the binding. 
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXTransport.BindingSpecified">
            <summary>
            The transport specified by the binding. In case if transport is not specified by the binding, system provided HTTP transoirt is used by default.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXTransport.LiteHttp">
            <summary>
            WCF-Xtension lightweight HTTP implementation.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXTransport.SoapTcp">
            <summary>
            Java Metro stack interoperable SOAP/TCP transport.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXTransport.SoapTcpDuplex">
            <summary>
            Duplex SOAP/TCP transport.
            </summary>
        </member>
        <member name="F:Noemax.WCFX.WcfXTransport.WebSocket">
            <summary>
            WebSocket transport.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.WcfXTransportSettings">
            <summary>
            Provides the properties for configuration of the transport used by the
            <c cref="T:Noemax.WCFX.Channels.WcfXtensionsBinding">WcfXtensionBinding</c> and 
            <c cref="T:Noemax.WCFX.XBindingConfigurator">XBindingConfigurator</c> and 
            </summary>
        </member>
        <member name="M:Noemax.WCFX.WcfXTransportSettings.#ctor">
            <summary>
            Initialize a new instance of 
            <c cref="T:Noemax.WCFX.WcfXTransportSettings">WcfXTransportSettings</c>.
            </summary>
            <overloads>
            Initialize a new instance of %WcfXTransportSettings%
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.WcfXTransportSettings.#ctor(Noemax.WCFX.WcfXTransportSettings)">
            <summary>
            Initialize a new instance of 
            <c cref="T:Noemax.WCFX.WcfXTransportSettings">WcfXTransportSettings</c> 
            from an existing instance.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.WcfXTransportSettings.CopyFrom(Noemax.WCFX.WcfXTransportSettings)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.WcfXTransportSettings.Clone">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.TransferMode">
            <summary>
            Gets and sets whether a channel uses streamed or buffered modes for the transfer of request and response messages.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.MaxReceivedMessageSize">
            <summary>
            Gets or sets the maximum size for a message that can be received on a channel configured with this binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.MaxBufferSize">
            <summary>
            Gets or sets a value that specifies the maximum size, in bytes, of the buffer used to store messages in memory.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.MaxBufferPoolSize">
            <summary>
            Gets or sets the maximum number of bytes that are used to buffer incoming messages in memory.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.TransportCompression">
            <summary>
            Gets and set the transport compression format used for compressing the transport stream.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.TransportCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer
            configures the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. 
            It is possible that minimum consumption of resources will be provided by a compression level other 
            than 1, and maximum compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most 
            suitable for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different 
            compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.CompressionThreshold">
            <summary>
            Gets and sets the minimal size of the payload to be compressed, if compression is
            enabled.
            </summary>
            <remarks>
            	<para>Specifies the minimal size of the payload that channel will compress. If the
                size of the payload is lower than specified value, compression will not be applied
                to it.</para>
            	<para>The default value of this property is 0, all payload will be compressed
                irrespective of it's size.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.KeepAliveEnabled">
            <summary>
            Gets or sets a value indicating whether to make a persistent connection to a service endpoint. 
            </summary>
            <remarks>
            Set this property to true to send a Connection HTTP header with the value Keep-alive. A client 
            uses this property to indicate a preference for persistent connections. When this property is 
            true, the connection that the client makes to a service endpoint is persistent if the service 
            endpoint supports that.
            <para>
            <b>This member is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b> 
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.ConnectionPooling">
            <summary>Enables and disables connection pooling.</summary>
            <value>
            If <strong>true</strong> outgoing connections are going to be pooled in
            connection pool and reused when client reconnects back to the same endpoint.
            </value>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.InactivityTimeoutMinutes">
            <summary>
            Gets and sets a number of minutes that the server should wait prior discarding an inactive client connection.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.Security">
            <summary>
            Gets <c cref="T:Noemax.WCFX.Channels.TransportSecuritySettings">TransportSecuritySettings</c> that provides transport 
            security settings for the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.AuthenticationScheme">
            <summary>
            Gets and sets the authentication scheme to be used by the transport.
            </summary>
            <remarks>
            This property applies only to the cases when %Transport% is set to LiteHttp.
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.ProxyAuthenticationScheme">
            <summary>
            Gets and set the authentication schemed to be used for authenticating with HTTP proxy.
            </summary>   
            <remarks>
            Proxy authentication is currently supported only by LiteHTTP transport. When proxy authentication is used, 
            a client credentials specified in a <c cref="T:System.ServiceModel.Description.ClientCredentials">ClientCredentials</c>
            will be used to authenticate with a proxy, rather than target endpoint.
            <para>The default is Anonymous.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.ProxyAddress">
            <summary>
            Gets and sets the address of the proxy server to connect to remote endpoint. 
            </summary>
        </member>
        <member name="P:Noemax.WCFX.WcfXTransportSettings.UseDefaultWebProxy">
            <summary>
            Gets and sets whether default proxy can be used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.FastInfosetSettings">
            <summary>
            The class representing the settings of Fast Infoset message encoding.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.FastInfosetSettings.#ctor">
            <summary>
            Initializes a new instance of %FastInfosetSettings%.
            </summary>
            <overloads>
            Initializes a new instance of %FastInfosetSettings%.
            </overloads>
        </member>
        <member name="M:Noemax.WCFX.FastInfosetSettings.#ctor(Noemax.WCFX.FastInfosetSettings)">
            <summary>
            Initializes a new instance of %FastInfosetSettings% 
            from an existing instance of a %FastInfosetSettings% class
            </summary>
        </member>
        <member name="M:Noemax.WCFX.FastInfosetSettings.CopyFrom(Noemax.WCFX.FastInfosetSettings)">
            <summary/>
        </member>
        <member name="M:Noemax.WCFX.FastInfosetSettings.Clone">
            <summary/>
        </member>
        <member name="P:Noemax.WCFX.FastInfosetSettings.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum length of the string for which the writer will try to find a match in 
            its vocabulary.
            </summary>
            <remarks>
            <para>If the length of the character string that is written into the writer is smaller than the specified 
            length, the writer will try to find a match for this string within the strings that have been already placed
            in the vocabulary and replace it with the reference to the already written string. If no match is found,
            the writer adds this character string to the vocabulary and all future occurrences of  the same string 
            will be replaced by references to it.</para>
            <para>The writer does not try to find a match for strings that are longer than the specified length and so 
            does not add them to the vocabulary. Setting this property to a higher value might improve compactness, but 
            it might decrease the writing speed and\or consume more memory.</para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.FastInfosetSettings.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that can be added to the Fast Infoset vocabulary table.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.FastInfosetSettings.WriterProfile">
            <summary>
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see> that defines the way 
            how primitive data-type are going to be serialized.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.FastInfosetSettings.PermitStateful">
            <summary>
            Permits FastInfoset message encoding to work in stateful mode whenever transport can maintain state.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.FastInfosetSettings.SessionMode">
            <summary>
            Gets and sets the stateful session encoding modes to be used by Fast Infoset message encoding. 
            </summary>
        </member>
        <member name="T:Noemax.WCFX.XBindingConfigurator">
            <summary> XBindingConfigurator simplifies configuration of the binding by transparently 
            extending it with WCF-Xtensions components.
            </summary>  
        </member>
        <member name="M:Noemax.WCFX.XBindingConfigurator.#ctor">
            <summary>Initializes a new instance of XBindingConfigurator.</summary>
        </member>
        <member name="M:Noemax.WCFX.XBindingConfigurator.Configure(System.ServiceModel.Channels.Binding)">
            <summary> Extends the binding with  WCF-Xtensions components according to the settings 
            specified by properties of the XBindingConfigurator instance.</summary>        
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.MessageCompressionMode">
            <summary>
            Gets and sets the message compression mode used by the binding.
            </summary>
            <remarks>
            <para> 
            When content negotiation is supported by the binding, the use of compression is negotiated
            between the communication sides. 
            </para>
            <para>
            When content negotiation is not supported by the binding, compression is always applied 
            to all message sent through the channel.
            </para>
            Compression is not applied when set to <b>None</b>.
            </remarks>         
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.MessageCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures the
            compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the compression 
            algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible 
            that minimum consumption of resources will be provided by a compression level other than 1, and maximum 
            compression by a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable 
            for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.MessageCompressionThreshold">
            <summary>
            Gets and sets the minimal size in bytes that a message must have in order to be compressed.
            </summary>
            <remark>
            <para>If the size of a message is less than the value of this property, that message will not be compressed. </para> 
            <para>The default value of this property is 0. If left unchanged, all messages will be compressed irrespective of their size.</para>
            <para>This property is supported only when message compression is enabled and the transport used is LiteHTTP, SOAP/TCP, 
            WebSocket or the system-provided TCP.</para>
            <para>If this property is set to a value greater than 0, a buffer of equivalent size may need to be allocated for 
            each message processed.</para> 
            <para>This property was introduced in version 5 of WCF-Xtensions. If one of the communicating sides has a compression threshold 
            of 0 or does not support a compression threshold at all, the other side must set the compression threshold to 0. </para> 
            </remark>
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.MessageEncoding">
            <summary>
            Specifies the message encoding to be used by the binding.
            </summary>
            <remarks>
            Default value for this property is %Default:WcfxMessageEncoding%, which means that the message 
            encoding of the binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.FastInfosetSettings">
            <summary> Gets and sets the settings for the Fast Infoset message encoding. 
            This settings are applied only when Fast Infoset message encoding is used.</summary>
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XBindingConfigurator.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.XChannelFactory`1">
            <summary>
            A ChannelFactory derived class that transparently complements the Windows Communication Foundation with WCF-Xtensions functionality.
            </summary>
            <remarks>
            Upon opening XChannelFactory automaticaly modify the configuration of the binding used by a factory 
            to use %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%. It also optionally provides compression
            or injects the %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior% to the endpoint used by the factory.        
            
            The XChannelFactory should be configured prior to its use for creating a channel. Any settings configured after 
            the factory is already open will not be applied to channels created by the factory.
            
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
            <typeparam name="TChannel"></typeparam>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding)">
             <summary>
             Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
             </summary>
            <param name="binding">The binding to be used by the factory.</param> 
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="endpoint">The ServiceEndpoint object to configure the factory</param>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="endpointConfigurationName">
            The name of the endpoint section in configuration to configure the factory.
            </param>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="endpointConfigurationName">The name of the endpoint section in configuration to configure the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XChannelFactory`1.OnOpening">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.MessageCompressionMode">
            <summary>
            Gets and sets the compression mode used by the binding.
            </summary>
            <remarks>
            <para>
            When content negotiation is supported by the binding, the use of compression is negotiated between the communication sides. When content negotiation is not supported by the binding, compression is 
            always applied to all message sent through the channel.
            </para>
            Compression is never applied when set to <b>None</b>.
            </remarks>  
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.MessageCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures 
            the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the 
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by 
            a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable 
            for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.MessageCompressionThreshold">
            <summary>
            Gets and sets the minimal size in bytes that a message must have in order to be compressed.
            </summary>
            <remark>
            <para> If the size of a message is less than the value of this property, that message will not be compressed. </para> 
            <para>The default value of this property is 0. If left unchanged, all messages will be compressed irrespective of their size.</para>
            <para>This property is supported only when message compression is enabled and either (a) the EnvelopeBehaviorEnabled is set to True,
            or (b) the transport used is LiteHTTP, SOAP/TCP, WebSocket or the system-provided TCP.</para>
            <para>If this property is set to a value greater than 0, a buffer of equivalent size may need to be allocated for 
            each message processed.</para> 
            <para> This property was introduced in version 5 of WCF-Xtensions. If one of the communicating sides has a compression threshold 
            of 0 or does not support a compression threshold at all, the other side must set the compression threshold to 0. </para> 
            </remark>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.EnableEnvelopeBehavior">
            <summary>
            Enables the use of %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior%. Default value <storng>false</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.MessageEncoding">
            <summary>
            Specifies the message encoding to be used by the binding.
            </summary>
            <remarks>
            Default value for this property is %Default:WcfxMessageEncoding%, which means that the message 
            encoding of the binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.FastInfosetSettings">
            <summary>
            Gets and sets the Fast Infoset message encoding writer profile.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XChannelFactory`1.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.XServiceHost">
            <summary>
            A ServiceHost derived class that transparently complements the Windows Communication Foundation with additional functionality.
            </summary>
            <remarks>
            <para>
            Upon opening XServiceHost modifies the configuration of the bindings used by the service endpoints
            to use %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%. It also optionally provides compression 
            or injects the %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior% to each endpoint exposed by the service. 
            </para>
            <para>
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </para>
            </remarks> 
        </member>
        <member name="M:Noemax.WCFX.XServiceHost.#ctor">
            <summary>
            Create new instance of %Noemax.WCFX.XServiceHost%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.XServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            Create new instance of %Noemax.WCFX.XServiceHost% for specified singleton instance.
            </summary>
            <param name="singletonInstance">The singleton instance providing the serivce.</param>
            <param name="baseAddresses">The list of base addresses.</param>
        </member>
        <member name="M:Noemax.WCFX.XServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XServiceHost% for specified service implementation.
            </summary>
            <param name="implementation">The type of a class providing service implementation.</param>
            <param name="baseAddresses">The list of base addresses.</param>
        </member>
        <member name="M:Noemax.WCFX.XServiceHost.OnOpening">
            <summary>
            Overrides virtual method of %System.ServiceMode.ServiceHost%.
            </summary>
            <remarks>
            Upon opening XServiceHost modifies the configuration of the bindings used by the service endpoints
            to use %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%. It also optionally provides compression 
            or injects the %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior% to each endpoint exposed by the service.        
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.MessageEncoding">
            <summary>
            Specifies the message encoding to be used by the binding.
            </summary>
            <remarks>
            Default value for this property is %Default:WcfxMessageEncoding%, which means that the message 
            encoding of the binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.MessageCompressionMode">
            <summary>
            Gets and sets the compression mode used by the binding.
            </summary>
            <remarks>
            <para>
            When content negotiation is supported by the binding, the use of compression is negotiated between the 
            communication sides. When content negotiation is not supported by the binding, compression is always applied 
            to all message sent through the channel.
            </para>
            Compression is never applied when set to <b>None</b>.
            </remarks>  
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.MessageCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures 
            the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the 
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by 
            a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable 
            for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.MessageCompressionThreshold">
            <summary>
            Gets and sets the minimal size in bytes that a message must have in order to be compressed.
            </summary>
            <remark>
            <para> If the size of a message is less than the value of this property, that message will not be compressed. </para> 
            <para>The default value of this property is 0. If left unchanged, all messages will be compressed irrespective of their size.</para>
            <para>This property is supported only when message compression is enabled and either (a) the EnvelopeBehaviorEnabled is set to True,
            or (b) the transport used is LiteHTTP, SOAP/TCP, WebSocket or the system-provided TCP.</para>
            <para>If this property is set to a value greater than 0, a buffer of equivalent size may need to be allocated for 
            each message processed.</para> 
            <para> This property was introduced in version 5 of WCF-Xtensions. If one of the communicating sides has a compression threshold 
            of 0 or does not support a compression threshold at all, the other side must set the compression threshold to 0. </para> 
            </remark>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.EnableEnvelopeBehavior">
            <summary>
            Enables the use of %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior% for each service endpoint. 
            Default value <storng>false</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.FastInfosetSettings">
            <summary> Gets and sets the settings for the Fast Infoset message encoding. 
            This settings are applied only when Fast Infoset message encoding is used.</summary>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XServiceHost.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="T:Noemax.WCFX.XDuplexChannelFactory`1">
            <summary>
            A ChannelFactory derived class that transparently complements the Windows Communication Foundation with WCF-Xtensions functionality.
            </summary>
            <remarks>
            Upon opening XChannelFactory automaticaly modify the configuration of the binding used by a factory 
            to use %Noemax.WCFX.Channels.FiMessageEncodingBindingElement%. It also optionally provides compression
            or injects the %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior% to the endpoint used by the factory.        
            
            The XChannelFactory should be configured prior to its use for creating a channel. Any settings configured after 
            the factory is already open will not be applied to channels created by the factory.
            
            <b>This class is not available in Silverlight 4, Silverlight 3, .NET Compact Framework 3.5.</b>
            </remarks>
            <typeparam name="TChannel"></typeparam>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service         /// 
            </param> 
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param> 
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpoint">The ServiceEndpoint object to configure the factory</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">
            The name of the endpoint section in configuration to configure the factory.
            </param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The InstanceContext that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">The name of the endpoint section in configuration to configure the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param> 
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpoint">The ServiceEndpoint object to configure the factory</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">
            The name of the endpoint section in configuration to configure the factory.
            </param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Type,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackType">
            The Type that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">The name of the endpoint section in configuration to configure the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param> 
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpoint">The ServiceEndpoint callbackInstanceect to configure the factory</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">
            The name of the endpoint section in configuration to configure the factory.
            </param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="binding">The binding to be used by the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.#ctor(System.Object,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of %Noemax.WCFX.XChannelFactory%.
            </summary>
            <param name="callbackInstance">
            The object that the client uses to listen for messages from the connected service.
            </param> 
            <param name="endpointConfigurationName">The name of the endpoint section in configuration to configure the factory.</param>
            <param name="address">The address of remote endpoint.</param>
        </member>
        <member name="M:Noemax.WCFX.XDuplexChannelFactory`1.OnOpening">
            <summary />
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.MessageCompressionMode">
            <summary>
            Gets and sets the compression mode used by the binding.
            </summary>
            <remarks>
            <para>
            When content negotiation is supported by the binding, the use of compression is negotiated between the communication sides. When content negotiation is not supported by the binding, compression is 
            always applied to all message sent through the channel.
            </para>
            Compression is never applied when set to <b>None</b>.
            </remarks>  
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.MessageCompressionAlgorithms">
            <summary>
            Gets and sets the compression algorithms to be used for message compression. Default value is <storng>GZip</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.MessageCompressionLevel">
            <summary>
            Gets and sets the compression level to be applied when compression is used, were 1 is for fastest compression 
            and 9 for maximum compression.
            </summary>
            <remarks>
            <para>
            At compression level 1 the emphasis is on minimum consumption of resources, so the writer configures 
            the compression algorithm for fast processing performance and low memory use.
            </para>
            <para>
            At compression level 9 the emphasis is on maximum compression, so the writer configures the 
            compression algorithm to produce the smallest compressed data size.
            </para>
            <para>
            At intermediate compression levels the writer configures the compression algorithm to a provide 
            a progressive transition between levels 1 and 9.
            </para>
            <para> The efficiency of compression algorithms varies depending on the data to be compressed. It is possible that minimum 
            consumption of resources will be provided by a compression level other than 1, and maximum compression by 
            a compression level other than 9.
            It is suggested that you try specifying different compression levels to find out which one is most suitable 
            for your use case and requirements.
            </para>
            <para>
            Some compression algorithms cannot be configured. In such cases, specifying different compression levels has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.MessageCompressionThreshold">
            <summary>
            Gets and sets the minimal size in bytes that a message must have in order to be compressed.
            </summary>
            <remark>
            <para> If the size of a message is less than the value of this property, that message will not be compressed. </para> 
            <para>The default value of this property is 0. If left unchanged, all messages will be compressed irrespective of their size.</para>
            <para>This property is supported only when message compression is enabled and either (a) the EnvelopeBehaviorEnabled is set to True,
            or (b) the transport used is LiteHTTP, SOAP/TCP, WebSocket or the system-provided TCP.</para>
            <para>If this property is set to a value greater than 0, a buffer of equivalent size may need to be allocated for 
            each message processed.</para> 
            <para> This property was introduced in version 5 of WCF-Xtensions. If one of the communicating sides has a compression threshold 
            of 0 or does not support a compression threshold at all, the other side must set the compression threshold to 0. </para> 
            </remark>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.EnableEnvelopeBehavior">
            <summary>
            Enables the use of %Noemax.WCFX.Behaviors.EnvelopeEndpointBehavior%. Default value <storng>false</storng>.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.MessageEncoding">
            <summary>
            Specifies the message encoding to be used by the binding.
            </summary>
            <remarks>
            Default value for this property is %Default:WcfxMessageEncoding%, which means that the message 
            encoding of the binding will not be changed. 
            </remarks> 
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.FastInfosetSettings">
            <summary>
            Gets and sets the Fast Infoset message encoding writer profile.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.Transport">
            <summary>
            Gets and sets the transport to be used by the binding.
            </summary>
        </member>
        <member name="P:Noemax.WCFX.XDuplexChannelFactory`1.TransportSettings">
            <summary>
            Gets and sets the settings to be applied on the transport used.
            </summary>
        </member>
        <member name="T:Noemax.Xml.XmlFastInfosetDictionaryWriter">
            <summary>
            The <c>XmlFastInfosetDictionaryWriter</c> provides Fast Infoset data serialization by delegating calls to the <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>.
            </summary>    
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Create">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryWriter.
            </summary>
            <returns>An instance of XmlFastInfosetDictionaryWriter.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Create(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <returns>An instance of XmlFastInfosetDictionaryWriter.</returns>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryWriter.
            </summary>
            <param name="output">The stream to which you want to write.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.#ctor">
            <summary>
            Initializes a new instance of XmlFastInfosetDictionaryWriter.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Init(System.IO.Stream)">
            <summary>
            Initializes an instance of %XmlFastInfosetDictionaryWriter% preparing to write 
            into the specified stream.
            </summary>
            <remarks>
            	<para>Initialize the writer and sets it to use provided stream as output.</para>
            	<para>This method allows to reuse existing %XmlFastInfosetDictionaryWriter%
                instance for writing into another stream.</para>
            </remarks>
            <param name="output">The stream to which you want to write.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Clear">
            <summary>
            Clears the %XmlFastInfosetDictionaryWriter% internal state.
            </summary>
            <remarks>
            Clears the internal state of the writer. After call to this method reader remains
            in uninitialized states. You must call Init method in order to reuse writer for writing 
            into another stream.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Close">
            <summary>Changes the WriteState to <strong>Closed</strong>.</summary>
            <remarks>
            If CloseOutput is set to <strong>true</strong>, underlying stream will also be closed.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.Flush">
            <summary>
            Flushes whatever is in the buffer into the underlying stream and flushes the
            underlying stream.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.LookupPrefix(System.String)">
            <summary>
            Returns the closest prefix defined in the current namespace scope for the namespace URI
            </summary>
            <returns>
            The matching prefix or a null reference (<b>Nothing</b> in Visual Basic) if no
            matching namespace URI is found in the current scope.
            </returns>
            <param name="ns"><para>The namespace URI whose prefix you want to find.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of Base64 values
            and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteCData(System.String)">
            <summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            </remarks>
            <param name="text"><para>The text to place inside the CDATA block.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteCharEntity(System.Char)">
            <summary>
            Forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch"><para>The Unicode character for which to generate a character entity.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes text one buffer at a time.
            </summary>
            <param name="buffer">The character array containing the text to write.</param>
            <param name="index"><para>The position in the buffer indicating the start of the text to write.</para></param>
            <param name="count"><para>The number of characters to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment containing the specified text.
            </summary>
            <remarks>
            	<para>If the <b>text</b> is a null reference
                (<b>Nothing</b> in Visual Basic) or <b>String.Empty</b>, this method does not write
                anything.</para>
            </remarks>
            <param name="text"><para>The text to place inside the comment.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing DOCTYPE is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">
            If non-null it also writes PUBLIC "pubid" "sysid" where
            <b>pubid</b> and <b>sysid</b> are
            replaced with the value of the given arguments.
            </param>
            <param name="sysid">
            If <b>pubid</b> is a null reference (<b>Nothing</b> in
            Visual Basic) and <b>sysid</b> is non-null it writes SYSTEM
            "sysid" where <b>sysid</b> is replaced with the value of this
            argument.
            </param>
            <param name="subset">
            	<para>If non-null it writes [subset] where subset is replaced with the value of
                this argument.</para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteEndAttribute">
            <summary>
            Closes the previous %WriteStartAttribute% call.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteEndDocument">
            <summary>
            Closes any open elements or attributes and changes the %WriteState% to <strong>Start</strong>.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteEntityRef(System.String)">
            <summary>
            This method is not supported and always throws a
            <b>NotSupportedException</b>.
            </summary>
            <remarks>
            Writing of entity references is presently not supported by
            <strong>XmlFastInfosetWriter</strong>.
            </remarks>
            <param name="name"><para>The name of the entity reference.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteFullEndElement">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>Writes out a processing instruction.</summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text"><para>The text to include in the processing instruction.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteRaw(System.String)">
            <summary>This method is not supported.</summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as %WriteString%.
            </remarks>
            <param name="data"><para>The string containing the text to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>This method is not supported.</summary>
            <remarks>
            Writing raw XML text is not supported by the Fast Infoset standard. This method
            works the same way as %WriteString%.
            </remarks>
            <param name="buffer"><para>The buffer containing characters to write.</para></param>
            <param name="index"><para>The index of the first character to write.</para></param>
            <param name="count"><para>The number of characters to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
            <summary>
            Writes a namespace declaration attribute.
            </summary>
            <param name="prefix">The prefix that is bound to the given namespace.</param>
            <param name="namespaceUri">The namespace to which the prefix is bound.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start of an attribute.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="ns"><para>The namespace URI for the attribute.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
            <remarks>
            Since <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see>
            does not preserve the original XML declaration, <strong>standalone</strong> is
            ignored.
            </remarks>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration with the version "1.0".
            </summary>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Writes the specified start tag.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteString(System.String)">
            <summary>
            Writes the given text content.
            </summary>
            <param name="text"><para>The text to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>Writes a Unicode surrogate char pair.</summary>
            <param name="lowChar"><para>The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</para></param>
            <param name="highChar"><para>The high surrogate. This must be a value between 0xD800 and 0xDBFF.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <remarks>
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriter">XmlFastInfosetWriter</see> does not preserve non-significant white
            space unless it's written within the scope of the element with the xml:space attribute set to "true" (xml:space="true").
            </remarks>
            <param name="ws"><para>The string of white space characters.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the binary bytes using Fast Infoset's binary encoding of hexadecimal
            values and writes the result at the current position in the content.
            </summary>
            <param name="buffer">the byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count"><para>The number of bytes to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Object)">
            <summary><para>Writes the value.</para></summary>
            <remarks>
            <para>This method takes the common language runtime (CLR) object and converts the
            input value to the desired output type using the FastInfoset encoding rules. If the
            type cannot not be represented as a binary encoded value it's serialized as a
            string according to the XML Schema definition language (XSD) data type conversion
            rules.</para>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            <c>WriteValue(Object)</c> method using an array of values as parameter.</para>        
            </remarks>
            <param name="value">The object representing the value to write.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a boolean value.  
            </summary>  
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The boolean value to write.</para>
            </param>    
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Double)">
            <summary>
            Writes a double-precision floating point value. 
            </summary>    
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The double-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Single)">
            <summary>
            Writes a single-precision floating point value.
            </summary>
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value">
            	<para>The single-precision floating-point <font color="black">value to
                write.</font></para>
            </param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>        
            <remarks>
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 32-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Int64)">
            <summary>
            Writes a 64-bit signed integer value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>
            <param name="value"><para>The 64-bit signed integer <font color="black">value to write.</font></para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads attributes from the reader and writes them out into current start element node.
            </summary>
            <param name="reader">The reader to read attributes from.</param>
            <param name="defattr">If set to <strong>true</strong> default attributes will also be written.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
            <contentfrom cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" filter=""/>        
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.DateTime)">
            <summary>
            Write DateTime value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">DateTime value to writer.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.Decimal)">
            <summary>
            Write Decimal value.
            </summary>  
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks>         
            <param name="value">Decimal value to writer.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.String)">
            <summary>
            Writes the string value.
            </summary>
            <param name="value"><para>The string value to write.</para></param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteValue(System.TimeSpan)">
            <summary>
            Write TimeSpan value.
            </summary>
            <remarks>        
            <para> If WriteValue is called multiple times in succession, values are written one next to 
            the other without being delimited by white space. To write a list of values, call the
            %WriteValue(Object)% method using an array of values as parameter.</para>
            <para>Values are encoded according to the %Profile% settings.</para>
            </remarks> 
            <param name="value">TimeSpan value to write.</param>
        </member>
        <member name="M:Noemax.Xml.XmlFastInfosetDictionaryWriter.SetVocabulary(Noemax.FastInfoset.WriterVocabulary)">
            <summary>
            Sets the vocabulary to be used when writing a Fast Infoset document.
            </summary>
            <param name="vocabulary">The vocabulary to use.</param>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.MaxVocabularyStringLength">
            <summary>
            Gets and sets the maximum number of characters that a string value may contain in order to be added to 
            the vocabulary.
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum string length specifies the maximum number of characters that a string value may contain in order to be added to
            the vocabulary. Longer values are not added to the vocabulary. A higher limit might result in higher compactness but might also 
            result in higher resource consumption than a lower limit.
            </para>
            </remarks>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.MaxVocabularyStringIndex">
            <summary>
            Gets and sets the maximum number of strings that may be added to the vocabulary. 
            </summary>
            <remarks>
            <para>
            The vocabulary is used by Fast Infoset to reduce redundancy and increase compactness. All occurrences of values 
            added to the vocabulary are removed from the document and replaced by an index to the corresponding entry in the vocabulary.
            </para>
            <para>
            The maximum number of strings specifies up to how many strings may be added to the vocabulary. When this limit is reached, no 
            more values are added to the vocabulary. A higher limit might result in higher compactness but might also result in 
            higher resource consumption than a lower limit.
            </para>
            </remarks> 
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.WriteState">
            <summary>Gets the state of the writer.</summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.Settings">
            <summary>
            Gets the XmlWriterSettings object used to create this XmlWriter instance.
            </summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.XmlLang">
            <summary>Current xml:lang value in scope.</summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.XmlSpace">
            <summary>Current xml:space value in scope.</summary>
        </member>
        <member name="P:Noemax.Xml.XmlFastInfosetDictionaryWriter.Profile">
            <summary>
            <see cref="T:Noemax.FastInfoset.XmlFastInfosetWriterProfile">XmlFastInfosetWriterProfile</see> that defines the way 
            how primitive data-type are going to be serialized.
            </summary>
        </member>
    </members>
</doc>
